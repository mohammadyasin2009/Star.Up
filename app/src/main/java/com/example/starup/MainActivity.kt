package com.example.starup
import android.animation.StateListAnimator
import androidx.compose.material3.TextFieldDefaults
import android.app.Activity
import android.graphics.Bitmap
import androidx.compose.material3.*
import androidx.compose.ui.platform.LocalContext
import androidx.compose.animation.core.tween
import androidx.compose.runtime.LaunchedEffect
import androidx.compose.runtime.remember
import androidx.compose.ui.geometry.Offset
import androidx.compose.ui.unit.dp
import androidx.compose.foundation.layout.Box
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.animation.ExperimentalAnimationApi
import androidx.compose.animation.slideInHorizontally
import androidx.compose.animation.slideOutHorizontally
import androidx.compose.foundation.clickable
import androidx.compose.runtime.Composable
import android.os.Bundle
import androidx.activity.ComponentActivity
import androidx.activity.compose.setContent
import androidx.activity.enableEdgeToEdge
import androidx.compose.foundation.Image
import androidx.compose.foundation.background
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material.icons.Icons
import androidx.compose.runtime.*
import androidx.compose.ui.draw.clip
import androidx.compose.ui.draw.shadow
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.graphics.RectangleShape
import androidx.compose.ui.layout.ContentScale
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.text.TextStyle
import androidx.compose.ui.text.font.FontFamily
import androidx.compose.ui.text.font.FontStyle
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.sp
import com.example.starup.ui.theme.StarUpTheme
import kotlinx.coroutines.delay
import androidx.compose.animation.AnimatedVisibility
import androidx.compose.animation.core.FastOutSlowInEasing
import androidx.compose.animation.fadeIn
import androidx.compose.animation.slideInVertically
import androidx.compose.animation.slideOutVertically
import androidx.compose.foundation.indication
import androidx.compose.foundation.interaction.MutableInteractionSource
import androidx.compose.foundation.lazy.LazyRow
import androidx.compose.material.icons.outlined.ArrowBack
import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.lazy.items
import androidx.compose.foundation.shape.CircleShape
import androidx.compose.material.icons.filled.ArrowBack
import androidx.compose.material.icons.filled.Build
import androidx.compose.material.icons.filled.ExitToApp
import androidx.compose.material.icons.filled.Favorite
import androidx.compose.material.icons.filled.FavoriteBorder
import androidx.compose.material.icons.filled.Home
import androidx.compose.material.icons.filled.Info
import androidx.compose.material.icons.filled.Menu
import androidx.compose.material.icons.filled.Search
import androidx.compose.material.icons.filled.Settings
import androidx.compose.material.icons.filled.Share
import androidx.compose.material.icons.filled.Star
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Shadow
import androidx.compose.ui.graphics.graphicsLayer
import androidx.compose.ui.graphics.painter.Painter
import androidx.compose.ui.res.fontResource
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.text.style.TextDirection
import kotlin.collections.listOf
import androidx.compose.animation.*
import androidx.compose.animation.core.FastOutLinearInEasing
import androidx.compose.animation.core.FastOutSlowInEasing
import androidx.compose.animation.core.FloatDecayAnimationSpec
import androidx.compose.animation.core.animateDecay
import androidx.compose.animation.core.tween
import androidx.compose.foundation.gestures.ScrollableState
import androidx.compose.foundation.gestures.scrollable
import androidx.compose.foundation.layout.Box
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.lazy.LazyItemScope
import androidx.compose.foundation.lazy.LazyListState
import androidx.compose.ui.graphics.ImageBitmap
import androidx.compose.ui.res.imageResource
import androidx.compose.foundation.Image
import androidx.compose.foundation.layout.fillMaxSize
import coil.compose.AsyncImage
import coil.ImageLoader
import coil.request.ImageRequest
import coil.compose.rememberAsyncImagePainter
import androidx.compose.runtime.LaunchedEffect
import androidx.compose.ui.platform.LocalContext
import coil.compose.SubcomposeAsyncImage
import coil.compose.rememberAsyncImagePainter


@OptIn(ExperimentalAnimationApi::class)
class MainActivity : ComponentActivity() {
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        enableEdgeToEdge()
        setContent {
            StarUpTheme {
                Surface(
                    modifier = Modifier.fillMaxSize(),
                    color = Color(0xFF000000),
                )
                {
                    Box(modifier = Modifier.fillMaxSize()) {
                        AnimatedContent(
                            targetState = currentScreen,
                            transitionSpec = {
                                slideInHorizontally(
                                    initialOffsetX = { if(backap) -it else it },
                                    animationSpec = tween(400, easing = FastOutSlowInEasing)
                                ) + fadeIn(animationSpec = tween(400)) with
                                        slideOutHorizontally(
                                            targetOffsetX = { if(backap) it else -it },
                                            animationSpec = tween(400, easing = FastOutSlowInEasing)
                                        ) + fadeOut(animationSpec = tween(400))
                            },
                            modifier = Modifier.fillMaxSize()
                        ) { screen ->
                            when(screen) {
                                "search" -> SearchEwiew()
                                "home" -> Greeting("Android")
                                "asli" -> FeardScreen()
                                "asli1" -> TheardScrean()
                                "asli2" -> EardScrean()
                                "asli3" -> NeardScrean()
                                "asli4" -> TenthScrean()
                                "asli5" -> ElevenScreen()
                                "zohre" -> Zohre()
                                "atarod" -> Atarod()
                                "zamin" -> Zamin()
                                "merikh" -> Merikh()
                                "zohal" -> Zohal()
                                "moshtari" -> Moshtari()
                                "uranos" -> Uranos()
                                "nepton" -> Nepton()
                                "sun" -> Sun()
                                "starlite" -> Starlite()
                                "starbig" -> Starbig()
                                "starlittle" -> Starlittle()
                                "starnetron" -> Starnetron()
                                "starvarible" -> Starvarible()
                                "starnebula" -> Starnebula()
                                "starnazari" -> Starnazari()
                                "moonnatural" -> Moonnatural()
                                "moonartificional" -> MoonArtificional()
                                "moonregular" -> MoonRegular()
                                "mooniregular" -> MoonIregular()
                                "moon2gane" -> Moon2Gane()
                                "moonbarkhordi" -> MoonBarkhordi()
                                "moonstari" -> MoonStari()
                                "astroidtarkibi" -> AstroidTarkibi()
                                "astroidteifi" -> AstroidTeifi()
                                "astroidnoori" -> AstroidNoori()
                                "astroidfiziki" -> AstroidFiziki()
                                "astroidmanshaedar" -> AstroidManshaedar()
                                "astroidmadari" -> AstroidMadari()
                                "astroidbazalati" -> AstroidBazalati()
                                "comekotah" -> Comekotah()
                                "comeboland" -> Comeboland()
                                "cometakgozar" -> Cometakgozar()
                                "comesakhtar" -> Cometsakhtar()
                                "comemanshae" -> Cometmanshae()
                                "comefamus" -> Cometfamus()
                                "comemiani" -> Cometmiani()
                                "comecharkhe" -> Cometcharkhe()
                                "cometaethir" -> Comettaethir()
                                "comemoghayese" -> Cometmoghayese()
                                "" -> SecandScreen()
                            }
                        }
                    }
                    if(expanded) {
                        Box(modifier = Modifier.fillMaxSize()) {
                            Box(
                                modifier = Modifier
                                    .align(Alignment.BottomStart)
                                    .fillMaxHeight(0.963f)
                                    .fillMaxWidth(

                                    )
                                    .background(color = Color.Black.copy(alpha = 0.5f))
                                    .clickable(
                                        indication = null,
                                        interactionSource = remember { MutableInteractionSource() })
                                    {
                                        expanded = false
                                    }
                            )
                            {
                                Column(modifier = Modifier.fillMaxSize()) {
                                }
                            }
                        }
                    }
                    Box(modifier = Modifier
                        .fillMaxHeight(0.963f)
                        .fillMaxWidth(0.83f), contentAlignment = Alignment.BottomEnd) {
                        AnimatedVisibility(
                            visible = expanded,
                            modifier = Modifier
                                .fillMaxHeight(0.963f)
                                .fillMaxWidth(0.80f),
                            enter = slideInHorizontally(initialOffsetX = { full -> full }
                                , animationSpec = tween(durationMillis = 400 , easing = FastOutSlowInEasing)) ,
                            exit = slideOutHorizontally(targetOffsetX = { full -> full }
                                , animationSpec = tween(durationMillis = 400 , easing = FastOutLinearInEasing))
                        ) {
                            Column(modifier = Modifier.fillMaxSize()) {
                                Column(
                                    modifier = Modifier
                                        .fillMaxSize()
                                        .background(Color.White)
                                        .clickable(
                                            indication = null,
                                            interactionSource = remember { MutableInteractionSource() }) {
                                        }
                                    , verticalArrangement = Arrangement.Top , horizontalAlignment = Alignment.CenterHorizontally
                                ) {
                                    Column(modifier = Modifier.fillMaxSize()) {
                                        Box(modifier = Modifier.fillMaxSize() ,contentAlignment = Alignment.Center){
                                            Image(
                                                painter = painterResource(id = R.drawable.app_back),
                                                contentDescription = null,
                                                contentScale = ContentScale.Crop,
                                                modifier = Modifier.fillMaxSize(),
                                            )
                                            Box(modifier = Modifier
                                                .fillMaxSize()
                                                .padding(top = 50.dp) , contentAlignment = Alignment.TopCenter) {
                                                Column(
                                                ) {
                                                    Row(modifier = Modifier.fillMaxWidth(0.96f) ,
                                                        horizontalArrangement = Arrangement.End){
                                                        Image(
                                                            painter = painterResource(id = R.drawable.star),
                                                            contentDescription = null,
                                                            modifier = Modifier.size(100.dp)
                                                        )
                                                    }
                                                    Text("")
                                                    Row(modifier = Modifier.fillMaxWidth(0.86f) ,
                                                        horizontalArrangement = Arrangement.End) {
                                                        Text("استارآپ", fontSize = 35.sp , color = Color(
                                                            0xFFFFFFFF
                                                        ), fontWeight = FontWeight.ExtraBold ,
                                                            modifier = Modifier
                                                                .shadow(
                                                                    elevation = 0.dp,
                                                                    ambientColor = Color(0xFFFFFFFF).copy(
                                                                        alpha = 20f
                                                                    ),
                                                                    spotColor = Color(0xFFFFFFFF).copy(
                                                                        alpha = 20f
                                                                    )
                                                                )
                                                                .graphicsLayer(scaleX = 1.5f), style = TextStyle(
                                                                shadow = Shadow(
                                                                    color = Color(0xFFFFFFFF),
                                                                    offset = Offset(0f ,0f)
                                                                    , blurRadius = 20f
                                                                )
                                                            )
                                                        )
                                                    }
                                                    Text("")
                                                    Text("")
                                                    Row(modifier = Modifier.fillMaxWidth() ,
                                                        horizontalArrangement = Arrangement.End) {
                                                        Image(
                                                            painter = painterResource(id = R.drawable.meno),
                                                            contentDescription = null,
                                                            modifier = Modifier
                                                                .fillMaxWidth()
                                                                .height(5.dp)
                                                                .shadow(
                                                                    elevation = 20.dp,
                                                                    spotColor = Color.White.copy(
                                                                        alpha = 20f
                                                                    ),
                                                                    ambientColor = Color.White.copy(
                                                                        alpha = 20f
                                                                    ),
                                                                    shape = RectangleShape
                                                                ),
                                                            contentScale = ContentScale.Crop
                                                        )
                                                    }
                                                    Row(modifier = Modifier
                                                        .fillMaxWidth()
                                                        .padding(
                                                            end = 10.dp,
                                                            bottom = 20.dp,
                                                            top = 20.dp
                                                        )
                                                        .clickable(interactionSource = remember { MutableInteractionSource() },
                                                            indication = ripple(color = Color.White)) {
                                                            currentScreen = "home"
                                                            expanded = false
                                                            backap = false
                                                        }
                                                        , horizontalArrangement = Arrangement.End){

                                                        Text("زبان",fontSize = 22.sp , color = Color(
                                                            0xFFFFFFFF
                                                        ), fontWeight = FontWeight.ExtraBold ,
                                                            modifier = Modifier
                                                                .padding(top = 6.5.dp, end = 15.dp)
                                                                .shadow(
                                                                    elevation = 0.dp,
                                                                    ambientColor = Color(0xFFFFFFFF).copy(
                                                                        alpha = 20f
                                                                    ),
                                                                    spotColor = Color(0xFFFFFFFF).copy(
                                                                        alpha = 20f
                                                                    )
                                                                ), style = TextStyle(
                                                                shadow = Shadow(
                                                                    color = Color(0xFFFFFFFF),
                                                                    offset = Offset(0f ,0f)
                                                                    , blurRadius = 20f
                                                                )
                                                            )
                                                        )

                                                        Icon(imageVector = Icons.Default.Build
                                                            , contentDescription = null
                                                            , modifier = Modifier
                                                                .size(40.dp)
                                                                .shadow(
                                                                    elevation = 0.dp,
                                                                    spotColor = Color(0xFFFFFFFF).copy(
                                                                        alpha = 20f
                                                                    )
                                                                        .copy(alpha = 1f),
                                                                    ambientColor = Color(0xFFFFFFFF).copy(
                                                                        alpha = 20f
                                                                    )
                                                                )
                                                            , tint = Color(0xFFFFFFFF)
                                                        )


                                                    }
                                                    Row(modifier = Modifier
                                                        .fillMaxWidth()
                                                        .padding(end = 10.dp, bottom = 20.dp)
                                                        .clickable(interactionSource = remember { MutableInteractionSource() },
                                                            indication = ripple(color = Color.White)) {
                                                            currentScreen = "home"
                                                            expanded = false
                                                            backap = false
                                                        }, horizontalArrangement = Arrangement.End){
                                                        Text("صفحه اصلی",fontSize = 22.sp , color = Color(
                                                            0xFFFFFFFF
                                                        ), fontWeight = FontWeight.ExtraBold ,
                                                            modifier = Modifier
                                                                .padding(top = 6.5.dp, end = 15.dp)
                                                                .shadow(
                                                                    elevation = 0.dp,
                                                                    ambientColor = Color(0xFFFFFFFF).copy(
                                                                        alpha = 20f
                                                                    ),
                                                                    spotColor = Color(0xFFFFFFFF).copy(
                                                                        alpha = 20f
                                                                    )
                                                                ), style = TextStyle(
                                                                shadow = Shadow(
                                                                    color = Color(0xFFFFFFFF),
                                                                    offset = Offset(0f ,0f)
                                                                    , blurRadius = 20f
                                                                )
                                                            )
                                                        )

                                                        Icon(imageVector = Icons.Default.Home
                                                            , contentDescription = null
                                                            , modifier = Modifier
                                                                .size(40.dp)
                                                                .shadow(
                                                                    elevation = 0.dp,
                                                                    spotColor = Color(0xFFFFFFFF).copy(
                                                                        alpha = 20f
                                                                    )
                                                                        .copy(alpha = 1f),
                                                                    ambientColor = Color(0xFFFFFFFF).copy(
                                                                        alpha = 20f
                                                                    )
                                                                )
                                                            , tint = Color(0xFFFFFFFF)
                                                        )

                                                    }
                                                    Row(modifier = Modifier
                                                        .fillMaxWidth()
                                                        .padding(end = 10.dp, bottom = 20.dp)
                                                        .clickable(interactionSource = remember { MutableInteractionSource() },
                                                            indication = ripple(color = Color.White)) {
                                                            currentScreen = "search"
                                                            expanded = false
                                                            backap = false
                                                        }, horizontalArrangement = Arrangement.End){
                                                        Text("جست و جو",fontSize = 22.sp , color = Color(
                                                            0xFFFFFFFF
                                                        ), fontWeight = FontWeight.ExtraBold ,
                                                            modifier = Modifier
                                                                .padding(top = 6.5.dp, end = 15.dp)
                                                                .shadow(
                                                                    elevation = 0.dp,
                                                                    ambientColor = Color(0xFFFFFFFF).copy(
                                                                        alpha = 20f
                                                                    ),
                                                                    spotColor = Color(0xFFFFFFFF).copy(
                                                                        alpha = 20f
                                                                    )
                                                                ), style = TextStyle(
                                                                shadow = Shadow(
                                                                    color = Color(0xFFFFFFFF),
                                                                    offset = Offset(0f ,0f)
                                                                    , blurRadius = 20f
                                                                )
                                                            )
                                                        )

                                                        Icon(imageVector = Icons.Default.Search
                                                            , contentDescription = null
                                                            , modifier = Modifier
                                                                .size(40.dp)
                                                                .shadow(
                                                                    elevation = 0.dp,
                                                                    spotColor = Color(0xFFFFFFFF).copy(
                                                                        alpha = 20f
                                                                    )
                                                                        .copy(alpha = 1f),
                                                                    ambientColor = Color(0xFFFFFFFF).copy(
                                                                        alpha = 20f
                                                                    )
                                                                )
                                                            , tint = Color(0xFFFFFFFF)
                                                        )
                                                    }
                                                    Row(modifier = Modifier
                                                        .fillMaxWidth()
                                                        .padding(end = 10.dp, bottom = 20.dp)
                                                        .clickable(interactionSource = remember { MutableInteractionSource() },
                                                            indication = ripple(color = Color.White)) {
                                                            currentScreen = "home"
                                                            expanded = false
                                                            backap = false
                                                        }, horizontalArrangement = Arrangement.End){
                                                        Text("تنظیمات",fontSize = 22.sp , color = Color(
                                                            0xFFFFFFFF
                                                        ), fontWeight = FontWeight.ExtraBold ,
                                                            modifier = Modifier
                                                                .padding(top = 6.5.dp, end = 15.dp)
                                                                .shadow(
                                                                    elevation = 0.dp,
                                                                    ambientColor = Color(0xFFFFFFFF).copy(
                                                                        alpha = 20f
                                                                    ),
                                                                    spotColor = Color(0xFFFFFFFF).copy(
                                                                        alpha = 20f
                                                                    )
                                                                ), style = TextStyle(
                                                                shadow = Shadow(
                                                                    color = Color(0xFFFFFFFF),
                                                                    offset = Offset(0f ,0f)
                                                                    , blurRadius = 20f
                                                                )
                                                            )
                                                        )

                                                        Icon(imageVector = Icons.Default.Settings
                                                            , contentDescription = null
                                                            , modifier = Modifier
                                                                .size(40.dp)
                                                                .shadow(
                                                                    elevation = 0.dp,
                                                                    spotColor = Color(0xFFFFFFFF).copy(
                                                                        alpha = 20f
                                                                    )
                                                                        .copy(alpha = 1f),
                                                                    ambientColor = Color(0xFFFFFFFF).copy(
                                                                        alpha = 20f
                                                                    )
                                                                )
                                                            , tint = Color(0xFFFFFFFF)
                                                        )
                                                    }
                                                    Row(modifier = Modifier
                                                        .fillMaxWidth()
                                                        .padding(end = 10.dp, bottom = 20.dp)
                                                        .clickable(interactionSource = remember { MutableInteractionSource() },
                                                            indication = ripple(color = Color.White)) {
                                                            currentScreen = "home"
                                                            expanded = false
                                                            backap = false
                                                        }, horizontalArrangement = Arrangement.End){
                                                        Text("موضوعات مورد علاقه",fontSize = 22.sp , color = Color(
                                                            0xFFFFFFFF
                                                        ), fontWeight = FontWeight.ExtraBold ,
                                                            modifier = Modifier
                                                                .padding(top = 6.5.dp, end = 15.dp)
                                                                .shadow(
                                                                    elevation = 0.dp,
                                                                    ambientColor = Color(0xFFFFFFFF).copy(
                                                                        alpha = 20f
                                                                    ),
                                                                    spotColor = Color(0xFFFFFFFF).copy(
                                                                        alpha = 20f
                                                                    )
                                                                ), style = TextStyle(
                                                                shadow = Shadow(
                                                                    color = Color(0xFFFFFFFF),
                                                                    offset = Offset(0f ,0f)
                                                                    , blurRadius = 20f
                                                                )
                                                            )
                                                        )

                                                        Icon(imageVector = Icons.Default.Favorite
                                                            , contentDescription = null
                                                            , modifier = Modifier
                                                                .size(40.dp)
                                                                .shadow(
                                                                    elevation = 0.dp,
                                                                    spotColor = Color(0xFFFFFFFF).copy(
                                                                        alpha = 20f
                                                                    )
                                                                        .copy(alpha = 1f),
                                                                    ambientColor = Color(0xFFFFFFFF).copy(
                                                                        alpha = 20f
                                                                    )
                                                                )
                                                            , tint = Color(0xFFFFFFFF)
                                                        )
                                                    }
                                                    Row(modifier = Modifier
                                                        .fillMaxWidth()
                                                        .padding(end = 10.dp, bottom = 20.dp)
                                                        .clickable(interactionSource = remember { MutableInteractionSource() },
                                                            indication = ripple(color = Color.White)) {
                                                            currentScreen = "home"
                                                            expanded = false
                                                            backap = false
                                                        }, horizontalArrangement = Arrangement.End){
                                                        Text("امتیاز به برنامه",fontSize = 22.sp , color = Color(
                                                            0xFFFFFFFF
                                                        ), fontWeight = FontWeight.ExtraBold ,
                                                            modifier = Modifier
                                                                .padding(top = 6.5.dp, end = 15.dp)
                                                                .shadow(
                                                                    elevation = 0.dp,
                                                                    ambientColor = Color(0xFFFFFFFF).copy(
                                                                        alpha = 20f
                                                                    ),
                                                                    spotColor = Color(0xFFFFFFFF).copy(
                                                                        alpha = 20f
                                                                    )
                                                                ), style = TextStyle(
                                                                shadow = Shadow(
                                                                    color = Color(0xFFFFFFFF),
                                                                    offset = Offset(0f ,0f)
                                                                    , blurRadius = 20f
                                                                )
                                                            )
                                                        )

                                                        Icon(imageVector = Icons.Default.Star
                                                            , contentDescription = null
                                                            , modifier = Modifier
                                                                .size(40.dp)
                                                                .shadow(
                                                                    elevation = 0.dp,
                                                                    spotColor = Color(0xFFFFFFFF).copy(
                                                                        alpha = 20f
                                                                    )
                                                                        .copy(alpha = 1f),
                                                                    ambientColor = Color(0xFFFFFFFF).copy(
                                                                        alpha = 20f
                                                                    )
                                                                )
                                                            , tint = Color(0xFFFFFFFF)
                                                        )
                                                    }
                                                    Row(modifier = Modifier
                                                        .fillMaxWidth()
                                                        .padding(end = 10.dp, bottom = 20.dp)
                                                        .clickable(interactionSource = remember { MutableInteractionSource() },
                                                            indication = ripple(color = Color.White)) {
                                                            currentScreen = "home"
                                                            backap = false
                                                            expanded = false
                                                        }, horizontalArrangement = Arrangement.End){
                                                        Text("درباره ما",fontSize = 22.sp , color = Color(
                                                            0xFFFFFFFF
                                                        ), fontWeight = FontWeight.ExtraBold ,
                                                            modifier = Modifier
                                                                .padding(top = 6.5.dp, end = 15.dp)
                                                                .shadow(
                                                                    elevation = 0.dp,
                                                                    ambientColor = Color(0xFFFFFFFF).copy(
                                                                        alpha = 20f
                                                                    ),
                                                                    spotColor = Color(0xFFFFFFFF).copy(
                                                                        alpha = 20f
                                                                    )
                                                                ), style = TextStyle(
                                                                shadow = Shadow(
                                                                    color = Color(0xFFFFFFFF),
                                                                    offset = Offset(0f ,0f)
                                                                    , blurRadius = 20f
                                                                )
                                                            )
                                                        )

                                                        Icon(imageVector = Icons.Default.Info
                                                            , contentDescription = null
                                                            , modifier = Modifier
                                                                .size(40.dp)
                                                                .shadow(
                                                                    elevation = 0.dp,
                                                                    spotColor = Color(0xFFFFFFFF).copy(
                                                                        alpha = 20f
                                                                    )
                                                                        .copy(alpha = 1f),
                                                                    ambientColor = Color(0xFFFFFFFF).copy(
                                                                        alpha = 20f
                                                                    )
                                                                )
                                                            , tint = Color(0xFFFFFFFF)
                                                        )
                                                    }

                                                    val context = LocalContext.current
                                                    Row(modifier = Modifier
                                                        .fillMaxWidth()
                                                        .padding(end = 10.dp, bottom = 20.dp)
                                                        .clickable(interactionSource = remember { MutableInteractionSource() },
                                                            indication = ripple(color = Color.White)) {
                                                            (context as? Activity)?.finishAffinity()
                                                        }, horizontalArrangement = Arrangement.End){
                                                        Text("خروج",fontSize = 22.sp , color = Color(
                                                            0xFFFFFFFF
                                                        ), fontWeight = FontWeight.ExtraBold ,
                                                            modifier = Modifier
                                                                .padding(top = 6.5.dp, end = 15.dp)
                                                                .shadow(
                                                                    elevation = 0.dp,
                                                                    ambientColor = Color(0xFFFFFFFF).copy(
                                                                        alpha = 20f
                                                                    ),
                                                                    spotColor = Color(0xFFFFFFFF).copy(
                                                                        alpha = 20f
                                                                    )
                                                                ), style = TextStyle(
                                                                shadow = Shadow(
                                                                    color = Color(0xFFFFFFFF),
                                                                    offset = Offset(0f ,0f)
                                                                    , blurRadius = 20f
                                                                )
                                                            )
                                                        )

                                                        Icon(imageVector = Icons.Default.ExitToApp
                                                            , contentDescription = null
                                                            , modifier = Modifier
                                                                .size(40.dp)
                                                                .shadow(
                                                                    elevation = 0.dp,
                                                                    spotColor = Color(0xFFFFFFFF).copy(
                                                                        alpha = 20f
                                                                    )
                                                                        .copy(alpha = 1f),
                                                                    ambientColor = Color(0xFFFFFFFF).copy(
                                                                        alpha = 20f
                                                                    )
                                                                )
                                                            , tint = Color(0xFFFFFFFF)
                                                        )
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}

var expanded by   mutableStateOf(false)
var currentScreen by mutableStateOf("")
var backap by mutableStateOf(false)


//اضافه کردن برای همه عکس ها حالت های greeting بعلاوه کم کردن حجم صفحات
@Composable
fun Greeting(name: String, modifier: Modifier = Modifier) {
    Image(
        painter = painterResource(id = R.drawable.app_back),
        contentDescription = null,
        contentScale = ContentScale.Crop
    )
    when (currentScreen) {
        "home" -> {
            Column() {
                Card(
                    modifier = Modifier
                        .fillMaxWidth()
                        .height(32.5.dp),
                    shape = RectangleShape,
                    colors = CardDefaults.cardColors(containerColor = Color(0xFF03105D))
                ) {
                }
                Column() {
                    Card(
                        modifier = Modifier
                            .fillMaxWidth()
                            .height(50.dp),
                        shape = RectangleShape,
                        colors = CardDefaults.cardColors(containerColor = Color(0xFF0707AD))
                    ) {
                        Row(modifier = Modifier.padding(10.dp)) {
                            IconButton(
                                onClick = {},
                                colors = IconButtonDefaults.iconButtonColors(contentColor = Color.White),
                                modifier = Modifier.indication(indication = null ,
                                    interactionSource = remember { MutableInteractionSource() })
                            )  {
                                Icon(imageVector = Icons.Default.Info, contentDescription = null)
                            }
                            IconButton(
                                onClick = {currentScreen = "search"
                                    backap = false},
                                colors = IconButtonDefaults.iconButtonColors(contentColor = Color.White),
                                modifier = Modifier.indication(indication = null ,
                                    interactionSource = remember { MutableInteractionSource() })
                            ) {
                                Icon(imageVector = Icons.Default.Search, contentDescription = null)
                            }
                            Row(
                                modifier = Modifier.fillMaxWidth(),
                                horizontalArrangement = Arrangement.End,
                                verticalAlignment = Alignment.CenterVertically
                            ) {
                                Text("استارآپ", fontSize = 20.sp, color = Color.White , maxLines = 1 , fontWeight = FontWeight.ExtraBold)
                                IconButton(
                                    onClick = { expanded = true },
                                    colors = IconButtonDefaults.iconButtonColors(contentColor = Color.White),
                                ) {
                                    Icon(
                                        imageVector = Icons.Default.Menu,
                                        contentDescription = null
                                    )
                                }
                            }
                        }
                    }
                }
            }
            var ii = listOf(
                "سیاره ها",
                " ستارگان",
                "    قمرها",
                "سیارک ها  ",
                "دنباله دارها  ",
                "شهاب سنگ ها     ",
                "منظومه ها",
                "کهکشان ها",
                "سحابی ها",
                "خوشه ستاره ای ها           ",
                "سیاه چاله ها    ",
                "اکسوپلنت ها    "
            )

            val picture = listOf(
                R.drawable.planet,
                R.drawable.stars,
                R.drawable.moons,
                R.drawable.astroids,
                R.drawable.comets,
                R.drawable.meteorits,
                R.drawable.solarsystem,
                R.drawable.galaxi,
                R.drawable.nebula,
                R.drawable.starcluster,
                R.drawable.blackhole,
                R.drawable.exoplanet
            )

            val painters = picture.map { resId ->
                rememberAsyncImagePainter(model = resId)
            }

            val jam = remember { ii.zip(painters) }

            Column(
                modifier = modifier
                    .fillMaxSize()
                    .padding(16.dp),
                horizontalAlignment = Alignment.CenterHorizontally,
            ) {
                Text("")
                Text("")
                Text("")
                LazyColumn() {
                    items(jam , key = {it.first}) { (textha, pictureha) ->
                        Card(
                            modifier = Modifier
                                .height(120.dp)
                                .fillMaxWidth()
                                .padding(5.dp)
                                .clip(shape = RoundedCornerShape(200.dp))
                        ) {
                            Box(
                                modifier = Modifier.fillMaxSize(),
                                contentAlignment = Alignment.CenterEnd
                            )
                            {
                                Image(
                                    painter = painterResource(id = R.drawable.card),
                                    contentDescription = null, contentScale = ContentScale.Crop
                                )
                                Button(
                                    onClick = {
                                        if (textha == "سیاره ها") {
                                            currentScreen = "asli"
                                            backap = false
                                        }
                                        if (textha == " ستارگان") {
                                            currentScreen = "asli1"
                                            backap = false
                                        }
                                        if (textha == "    قمرها") {
                                            currentScreen = "asli2"
                                            backap = false
                                        }
                                        if (textha == "سیارک ها  ") {
                                            currentScreen = "asli3"
                                            backap = false
                                        }
                                        if (textha == "دنباله دارها  ") {
                                            currentScreen = "asli4"

                                            backap = false
                                        }
                                        if (textha == "شهاب سنگ ها     ") {
                                            currentScreen = "asli5"
                                            backap = false
                                        }
                                    },
                                    modifier = Modifier.fillMaxSize().indication(interactionSource = remember { MutableInteractionSource() }
                                        , indication = null),
                                    shape = RectangleShape,
                                    colors = ButtonDefaults.buttonColors(
                                        contentColor = Color.Transparent,
                                        containerColor = Color.Transparent
                                    )
                                ) {
                                }
                                Image(
                                    painter = pictureha,
                                    contentDescription = null,
                                    modifier = Modifier
                                        .clip(shape = CircleShape)
                                        .width(120.dp)
                                        .height(170.dp)
                                )
                                Box(
                                    modifier = Modifier.fillMaxSize(),
                                    contentAlignment = Alignment.Center
                                )
                                {
                                    Row {
                                        Column(verticalArrangement = Arrangement.Center , horizontalAlignment = Alignment.CenterHorizontally) {
                                            Text(
                                                "$textha",
                                                fontSize = 20.sp,
                                                color = Color.White, style = TextStyle(
                                                    shadow = Shadow(
                                                        color = Color(0xFFFFFFFF),
                                                        offset = Offset(0f ,0f)
                                                        , blurRadius = 20f
                                                    )
                                                ), fontWeight = FontWeight.ExtraLight
                                            )
                                            Row {
                                                if (textha == "سیاره ها") {
                                                    Spacer(modifier = Modifier.width(18.dp))
                                                    Text(
                                                        "بخش", fontSize = 20.sp, color = Color(
                                                            0xFFC9BFBF
                                                        )
                                                    )
                                                    Text(
                                                        " ۸", fontSize = 20.sp, color = Color(
                                                            0xFFC9BFBF
                                                        )
                                                    )
                                                }
                                                if (textha == " ستارگان") {
                                                    Spacer(modifier = Modifier.width(18.dp))
                                                    Text(
                                                        "بخش", fontSize = 20.sp, color = Color(
                                                            0xFFC9BFBF
                                                        )
                                                    )
                                                    Text(
                                                        " ۸", fontSize = 20.sp, color = Color(
                                                            0xFFC9BFBF
                                                        )
                                                    )
                                                }
                                                if (textha == "    قمرها") {
                                                    Spacer(modifier = Modifier.width(18.dp))
                                                    Text(
                                                        "بخش", fontSize = 20.sp, color = Color(
                                                            0xFFC9BFBF
                                                        )
                                                    )
                                                    Text(
                                                        " ۷", fontSize = 20.sp, color = Color(
                                                            0xFFC9BFBF
                                                        )
                                                    )
                                                }
                                                if (textha == "سیارک ها  ") {
                                                    Spacer(modifier = Modifier.width(18.dp))
                                                    Text(
                                                        "بخش", fontSize = 20.sp, color = Color(
                                                            0xFFC9BFBF
                                                        )
                                                    )
                                                    Text(
                                                        " ۷", fontSize = 20.sp, color = Color(
                                                            0xFFC9BFBF
                                                        )
                                                    )
                                                }
                                                if (textha == "دنباله دارها  ") {
                                                    Spacer(modifier = Modifier.width(18.dp))
                                                    Text(
                                                        "بخش", fontSize = 20.sp, color = Color(
                                                            0xFFC9BFBF
                                                        )
                                                    )
                                                    Text(
                                                        " ۱۰", fontSize = 20.sp, color = Color(
                                                            0xFFC9BFBF
                                                        )
                                                    )
                                                }
                                                //فارسی شود 6
                                                if (textha == "شهاب سنگ ها     ") {
                                                    Spacer(modifier = Modifier.width(18.dp))
                                                    Text(
                                                        "بخش", fontSize = 20.sp, color = Color(
                                                            0xFFC9BFBF
                                                        )
                                                    )
                                                    Text(
                                                        " ۶", fontSize = 20.sp, color = Color(
                                                            0xFFC9BFBF
                                                        )
                                                    )
                                                }
                                                if (textha == "منظومه ها") {
                                                    Spacer(modifier = Modifier.width(18.dp))
                                                    Text(
                                                        "به زودی", fontSize = 20.sp, color = Color(
                                                            0xFFC9BFBF
                                                        )
                                                    )
                                                    Text(
                                                        "", fontSize = 20.sp, color = Color(
                                                            0xFFC9BFBF
                                                        )
                                                    )
                                                }
                                                if (textha == "کهکشان ها") {
                                                    Spacer(modifier = Modifier.width(18.dp))
                                                    Text(
                                                        "به زودی", fontSize = 20.sp, color = Color(
                                                            0xFFC9BFBF
                                                        )
                                                    )
                                                    Text(
                                                        "", fontSize = 20.sp, color = Color(
                                                            0xFFC9BFBF
                                                        )
                                                    )
                                                }
                                                if (textha == "سحابی ها") {
                                                    Spacer(modifier = Modifier.width(18.dp))
                                                    Text(
                                                        "به زودی", fontSize = 20.sp, color = Color(
                                                            0xFFC9BFBF
                                                        )
                                                    )
                                                    Text(
                                                        "", fontSize = 20.sp, color = Color(
                                                            0xFFC9BFBF
                                                        )
                                                    )
                                                }
                                                if (textha == "خوشه ستاره ای ها           ") {
                                                    Spacer(modifier = Modifier.width(18.dp))
                                                    Text(
                                                        "به زودی", fontSize = 20.sp, color = Color(
                                                            0xFFC9BFBF
                                                        )
                                                    )
                                                    Text(
                                                        "", fontSize = 20.sp, color = Color(
                                                            0xFFC9BFBF
                                                        )
                                                    )
                                                }
                                                if (textha == "سیاه چاله ها    ") {
                                                    Spacer(modifier = Modifier.width(18.dp))
                                                    Text(
                                                        "به زودی", fontSize = 20.sp, color = Color(
                                                            0xFFC9BFBF
                                                        )
                                                    )
                                                    Text(
                                                        "", fontSize = 20.sp, color = Color(
                                                            0xFFC9BFBF
                                                        )
                                                    )
                                                }
                                                if (textha == "اکسوپلنت ها    ") {
                                                    Spacer(modifier = Modifier.width(18.dp))
                                                    Text(
                                                        "به زودی", fontSize = 20.sp, color = Color(
                                                            0xFFC9BFBF
                                                        )
                                                    )
                                                    Text(
                                                        "", fontSize = 20.sp, color = Color(
                                                            0xFFC9BFBF
                                                        )
                                                    )
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}

@Composable
fun SecandScreen() {
    Image(
        painter = painterResource(id =  R.drawable.app_back),
        contentDescription = null,
        contentScale = ContentScale.Crop,
        modifier = Modifier.fillMaxSize()
    )

    when(currentScreen) {
        "" -> {
            LaunchedEffect(Unit) {
                delay(5000)
                currentScreen = "home"
                backap = false
            }

            Column(
                modifier = Modifier.fillMaxSize(),
                horizontalAlignment = Alignment.CenterHorizontally,
            ) {
                Spacer(modifier = Modifier.height(250.dp).width(300.dp))
                Image(
                    painter = painterResource(id = R.drawable.star),
                    contentDescription = null,
                    modifier = Modifier.size(200.dp).clip(RoundedCornerShape(10.dp))
                )
                Text("")
                Text(
                    "StarUp",
                    color = Color.White,
                    fontSize = 45.sp,
                    fontStyle = FontStyle.Italic,
                    fontFamily = FontFamily.Cursive,
                    fontWeight = FontWeight.ExtraBold,
                    style = TextStyle(
                        shadow = Shadow(
                            color = Color(0xFFFFFFFF),
                            offset = Offset(0f, 0f),
                            blurRadius = 20f
                        )
                    )
                )
                Spacer(modifier = Modifier.height(50.dp))
                CircularProgressIndicator(color = Color.White)
            }
        }
    }
}


@Composable
fun FeardScreen() {
    Image(painter = painterResource(id = R.drawable.app_back)
        , contentScale = ContentScale.Crop , contentDescription = null)
    when(currentScreen) {
        "asli" -> {
            Column {
                Card(
                    modifier = Modifier
                        .fillMaxWidth()
                        .height(32.5.dp),
                    shape = RectangleShape,
                    colors = CardDefaults.cardColors(containerColor = Color(0xFF030A33))
                ) {
                }
                Column() {
                    Card(
                        modifier = Modifier
                            .fillMaxWidth()
                            .height(50.dp),
                        shape = RectangleShape,
                        colors = CardDefaults.cardColors(containerColor = Color(0xFF0707AD))
                    ) {
                        Row(modifier = Modifier.padding(10.dp)) {
                            IconButton(onClick = { currentScreen = "home"
                                backap = true
                            }, modifier = Modifier.indication(indication = null ,
                                interactionSource = remember { MutableInteractionSource() }),
                                colors = IconButtonDefaults.iconButtonColors(contentColor = Color.White)) {
                                Icon(
                                    imageVector = Icons.Outlined.ArrowBack,
                                    contentDescription = null,
                                    modifier = Modifier.size(40.dp)
                                )
                            }
                            IconButton(
                                onClick = {},
                                colors = IconButtonDefaults.iconButtonColors(contentColor = Color.White),
                                modifier = Modifier.indication(indication = null ,
                                    interactionSource = remember { MutableInteractionSource() })
                            ) {
                                Icon(imageVector = Icons.Default.Info, contentDescription = null)
                            }
                            IconButton(
                                onClick = {currentScreen = "search"
                                    backap = false},
                                colors = IconButtonDefaults.iconButtonColors(contentColor = Color.White),
                                modifier = Modifier.indication(indication = null ,
                                    interactionSource = remember { MutableInteractionSource() })
                            ) {
                                Icon(imageVector = Icons.Default.Search, contentDescription = null)
                            }
                            Row(
                                modifier = Modifier.fillMaxWidth(),
                                horizontalArrangement = Arrangement.End,
                                verticalAlignment = Alignment.CenterVertically
                            ) {
                                Text("سیاره ها", fontSize = 20.sp, color = Color.White  , maxLines = 1 , fontWeight = FontWeight.ExtraBold)
                                IconButton(
                                    onClick = { expanded = true},
                                    modifier = Modifier.size(50.dp).indication(indication = null ,
                                        interactionSource = remember { MutableInteractionSource() }),
                                    colors = IconButtonDefaults.iconButtonColors(contentColor = Color.White)
                                ) {
                                    Icon(imageVector = Icons.Default.Menu, contentDescription = null)
                                }
                            }
                        }
                    }
                }
            }


            val esm = listOf("عطارد", "زهره", "زمین", "مریخ", "مشتری", "زحل", "اورانوس", "نپتون")
            val language = listOf(
                painterResource(id = R.drawable.atarod),
                painterResource(id = R.drawable.zohre),
                painterResource(id = R.drawable.zamin),
                painterResource(id = R.drawable.merikh),
                painterResource(id = R.drawable.moshtari),
                painterResource(id = R.drawable.zohal),
                painterResource(id = R.drawable.uranos),
                painterResource(id = R.drawable.nepton),
            )
            val kameltar = esm.zip(language)




            Column(
                modifier = Modifier
                    .fillMaxSize(),
                horizontalAlignment = Alignment.CenterHorizontally
            ) {
                Text("")
                Text("")
                Text("")
                Text("")
                //بسیار چیز خفن
                LazyColumn() {
                    items(kameltar) { (letter, esmha) ->
                        Card(
                            modifier = Modifier
                                .padding(5.dp)
                                .height(100.dp)
                                .fillMaxWidth()
                                .clip(shape = RoundedCornerShape(100.dp))
                        ) {
                            Box(
                                modifier = Modifier.fillMaxSize(),
                                contentAlignment = Alignment.CenterEnd
                            ) {
                                Image(
                                    painter = painterResource(R.drawable.card),
                                    contentDescription = null, contentScale = ContentScale.Crop
                                )
                                Button(
                                    onClick = {
                                        if (letter == "عطارد") {
                                            currentScreen = "atarod"
                                            backap = false
                                        }
                                        if (letter == "زهره") {
                                            backap = false
                                            currentScreen = "zohre"
                                        }
                                        if (letter == "زمین") {
                                            currentScreen = "zamin"
                                            backap = false
                                        }
                                        if (letter == "مریخ") {
                                            backap = false
                                            currentScreen = "merikh"
                                        }
                                        if (letter == "زحل") {
                                            backap = false
                                            currentScreen = "zohal"
                                        }
                                        if (letter == "مشتری") {
                                            backap = false
                                            currentScreen = "moshtari"
                                        }
                                        if (letter == "اورانوس") {
                                            backap = false
                                            currentScreen = "uranos"
                                        }
                                        if (letter == "نپتون") {
                                            backap = false
                                            currentScreen = "nepton"
                                        }
                                    }, modifier = Modifier.fillMaxSize().indication(interactionSource = remember { MutableInteractionSource() }
                                        , indication = null),
                                    colors = ButtonDefaults.buttonColors(containerColor = Color.Transparent)
                                ) {

                                }
                                Image(
                                    painter = esmha,
                                    contentDescription = null,
                                    modifier = Modifier
                                        .width(145.dp)
                                        .height(300.dp)
                                )
                                Box(contentAlignment = Alignment.Center) {
                                    Row() {
                                        Column() {
                                            Text(
                                                "          $letter",
                                                color = Color.White,
                                                fontSize = 25.sp,
                                                fontStyle = FontStyle.Italic
                                                , style = TextStyle(
                                                    shadow = Shadow(
                                                        color = Color(0xFFFFFFFF),
                                                        offset = Offset(0f ,0f)
                                                        , blurRadius = 20f
                                                    )
                                                ), fontWeight = FontWeight.ExtraLight
                                            )
                                        }
                                        Spacer(modifier = Modifier.width(130.dp))
                                    }
                                }
                                var first by remember { mutableStateOf(0) }
                                var first1 by remember { mutableStateOf(0) }
                                var first2 by remember { mutableStateOf(0) }
                                var first3 by remember { mutableStateOf(0) }
                                var first4 by remember { mutableStateOf(0) }
                                var first5 by remember { mutableStateOf(0) }
                                var first6 by remember { mutableStateOf(0) }
                                var first7 by remember { mutableStateOf(0) }
                                Box(
                                    contentAlignment = Alignment.CenterStart,
                                    modifier = Modifier
                                        .fillMaxSize()
                                        .padding(15.dp)
                                ) {
                                    IconButton(
                                        onClick = {
                                            if (letter == "عطارد") {
                                                first++
                                            }
                                            if (letter == "زهره") {
                                                first1++
                                            }
                                            if (letter == "زمین") {
                                                first2++
                                            }
                                            if (letter == "مریخ") {
                                                first3++
                                            }
                                            if (letter == "مشتری") {
                                                first4++
                                            }
                                            if (letter == "زحل") {
                                                first5++
                                            }
                                            if (letter == "اورانوس") {
                                                first6++
                                            }
                                            if (letter == "نپتون") {
                                                first7++
                                            }
                                        }, modifier = Modifier.size(50.dp).indication(indication = null ,
                                            interactionSource = remember { MutableInteractionSource() }),
                                    ) {
                                        if (first % 2 == 0) {
                                            Icon(
                                                imageVector = Icons.Default.Favorite,
                                                contentDescription = null,
                                                tint = Color.Transparent,
                                                modifier = Modifier.size(40.dp)
                                            )
                                            Icon(
                                                imageVector = Icons.Default.FavoriteBorder,
                                                contentDescription = null,
                                                tint = Color.White,
                                                modifier = Modifier.size(40.dp)
                                            )
                                        }
                                        if (first % 2 == 1) {
                                            Icon(
                                                imageVector = Icons.Default.Favorite,
                                                contentDescription = null,
                                                tint = Color.White,
                                                modifier = Modifier.size(40.dp)
                                            )
                                            Icon(
                                                imageVector = Icons.Default.FavoriteBorder,
                                                contentDescription = null,
                                                tint = Color.White,
                                                modifier = Modifier.size(40.dp)
                                            )
                                        }


                                        if (first1 % 2 == 0) {
                                            Icon(
                                                imageVector = Icons.Default.Favorite,
                                                contentDescription = null,
                                                tint = Color.Transparent,
                                                modifier = Modifier.size(40.dp)
                                            )
                                            Icon(
                                                imageVector = Icons.Default.FavoriteBorder,
                                                contentDescription = null,
                                                tint = Color.White,
                                                modifier = Modifier.size(40.dp)
                                            )
                                        }
                                        if (first1 % 2 == 1) {
                                            Icon(
                                                imageVector = Icons.Default.Favorite,
                                                contentDescription = null,
                                                tint = Color.White,
                                                modifier = Modifier.size(40.dp)
                                            )
                                            Icon(
                                                imageVector = Icons.Default.FavoriteBorder,
                                                contentDescription = null,
                                                tint = Color.White,
                                                modifier = Modifier.size(40.dp)
                                            )
                                        }


                                        if (first2 % 2 == 0) {
                                            Icon(
                                                imageVector = Icons.Default.Favorite,
                                                contentDescription = null,
                                                tint = Color.Transparent,
                                                modifier = Modifier.size(40.dp)
                                            )
                                            Icon(
                                                imageVector = Icons.Default.FavoriteBorder,
                                                contentDescription = null,
                                                tint = Color.White,
                                                modifier = Modifier.size(40.dp)
                                            )
                                        }
                                        if (first2 % 2 == 1) {
                                            Icon(
                                                imageVector = Icons.Default.Favorite,
                                                contentDescription = null,
                                                tint = Color.White,
                                                modifier = Modifier.size(40.dp)
                                            )
                                            Icon(
                                                imageVector = Icons.Default.FavoriteBorder,
                                                contentDescription = null,
                                                tint = Color.White,
                                                modifier = Modifier.size(40.dp)
                                            )
                                        }
                                        if (first3 % 2 == 0) {
                                            Icon(
                                                imageVector = Icons.Default.Favorite,
                                                contentDescription = null,
                                                tint = Color.Transparent,
                                                modifier = Modifier.size(40.dp)
                                            )
                                            Icon(
                                                imageVector = Icons.Default.FavoriteBorder,
                                                contentDescription = null,
                                                tint = Color.White,
                                                modifier = Modifier.size(40.dp)
                                            )
                                        }
                                        if (first3 % 2 == 1) {
                                            Icon(
                                                imageVector = Icons.Default.Favorite,
                                                contentDescription = null,
                                                tint = Color.White,
                                                modifier = Modifier.size(40.dp)
                                            )
                                            Icon(
                                                imageVector = Icons.Default.FavoriteBorder,
                                                contentDescription = null,
                                                tint = Color.White,
                                                modifier = Modifier.size(40.dp)
                                            )
                                        }


                                        if (first4 % 2 == 0) {
                                            Icon(
                                                imageVector = Icons.Default.Favorite,
                                                contentDescription = null,
                                                tint = Color.Transparent,
                                                modifier = Modifier.size(40.dp)
                                            )
                                            Icon(
                                                imageVector = Icons.Default.FavoriteBorder,
                                                contentDescription = null,
                                                tint = Color.White,
                                                modifier = Modifier.size(40.dp)
                                            )
                                        }
                                        if (first4 % 2 == 1) {
                                            Icon(
                                                imageVector = Icons.Default.Favorite,
                                                contentDescription = null,
                                                tint = Color.White,
                                                modifier = Modifier.size(40.dp)
                                            )
                                            Icon(
                                                imageVector = Icons.Default.FavoriteBorder,
                                                contentDescription = null,
                                                tint = Color.White,
                                                modifier = Modifier.size(40.dp)
                                            )
                                        }


                                        if (first5 % 2 == 0) {
                                            Icon(
                                                imageVector = Icons.Default.Favorite,
                                                contentDescription = null,
                                                tint = Color.Transparent,
                                                modifier = Modifier.size(40.dp)
                                            )
                                            Icon(
                                                imageVector = Icons.Default.FavoriteBorder,
                                                contentDescription = null,
                                                tint = Color.White,
                                                modifier = Modifier.size(40.dp)
                                            )
                                        }
                                        if (first5 % 2 == 1) {
                                            Icon(
                                                imageVector = Icons.Default.Favorite,
                                                contentDescription = null,
                                                tint = Color.White,
                                                modifier = Modifier.size(40.dp)
                                            )
                                            Icon(
                                                imageVector = Icons.Default.FavoriteBorder,
                                                contentDescription = null,
                                                tint = Color.White,
                                                modifier = Modifier.size(40.dp)
                                            )
                                        }


                                        if (first6 % 2 == 0) {
                                            Icon(
                                                imageVector = Icons.Default.Favorite,
                                                contentDescription = null,
                                                tint = Color.Transparent,
                                                modifier = Modifier.size(40.dp)
                                            )
                                            Icon(
                                                imageVector = Icons.Default.FavoriteBorder,
                                                contentDescription = null,
                                                tint = Color.White,
                                                modifier = Modifier.size(40.dp)
                                            )
                                        }
                                        if (first6 % 2 == 1) {
                                            Icon(
                                                imageVector = Icons.Default.Favorite,
                                                contentDescription = null,
                                                tint = Color.White,
                                                modifier = Modifier.size(40.dp)
                                            )
                                            Icon(
                                                imageVector = Icons.Default.FavoriteBorder,
                                                contentDescription = null,
                                                tint = Color.White,
                                                modifier = Modifier.size(40.dp)
                                            )
                                        }


                                        if (first7 % 2 == 0) {
                                            Icon(
                                                imageVector = Icons.Default.Favorite,
                                                contentDescription = null,
                                                tint = Color.Transparent,
                                                modifier = Modifier.size(40.dp)
                                            )
                                            Icon(
                                                imageVector = Icons.Default.FavoriteBorder,
                                                contentDescription = null,
                                                tint = Color.White,
                                                modifier = Modifier.size(40.dp)
                                            )
                                        }
                                        if (first7 % 2 == 1) {
                                            Icon(
                                                imageVector = Icons.Default.Favorite,
                                                contentDescription = null,
                                                tint = Color.White,
                                                modifier = Modifier.size(40.dp)
                                            )
                                            Icon(
                                                imageVector = Icons.Default.FavoriteBorder,
                                                contentDescription = null,
                                                tint = Color.White,
                                                modifier = Modifier.size(40.dp)
                                            )
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}


@Composable
fun TheardScrean() {
    Image(painter = painterResource(id = R.drawable.app_back)
        , contentScale = ContentScale.Crop , contentDescription = null)
    when(currentScreen) {
        "asli1" -> {
            Column {
                Card(
                    modifier = Modifier
                        .fillMaxWidth()
                        .height(32.5.dp),
                    shape = RectangleShape,
                    colors = CardDefaults.cardColors(containerColor = Color(0xFF030A33))
                ) {
                }
                Column() {
                    Card(
                        modifier = Modifier
                            .fillMaxWidth()
                            .height(50.dp),
                        shape = RectangleShape,
                        colors = CardDefaults.cardColors(containerColor = Color(0xFF0707AD))
                    ) {
                        Row(modifier = Modifier.padding(10.dp)) {
                            IconButton(onClick = { currentScreen = "home"
                                backap = true
                            }, modifier = Modifier.indication(indication = null ,
                                interactionSource = remember { MutableInteractionSource() }),
                                colors = IconButtonDefaults.iconButtonColors(contentColor = Color.White)) {
                                Icon(
                                    imageVector = Icons.Outlined.ArrowBack,
                                    contentDescription = null,
                                    modifier = Modifier.size(40.dp)
                                )
                            }
                            IconButton(
                                onClick = {},
                                colors = IconButtonDefaults.iconButtonColors(contentColor = Color.White),
                                modifier = Modifier.indication(indication = null ,
                                    interactionSource = remember { MutableInteractionSource() })
                            ) {
                                Icon(imageVector = Icons.Default.Info, contentDescription = null)
                            }
                            IconButton(
                                onClick = {currentScreen = "search"
                                    backap = false},
                                colors = IconButtonDefaults.iconButtonColors(contentColor = Color.White),
                                modifier = Modifier.indication(indication = null ,
                                    interactionSource = remember { MutableInteractionSource() })
                            ) {
                                Icon(imageVector = Icons.Default.Search, contentDescription = null)
                            }
                            Row(
                                modifier = Modifier.fillMaxWidth(),
                                horizontalArrangement = Arrangement.End,
                                verticalAlignment = Alignment.CenterVertically
                            ) {
                                Text("ستارگان", fontSize = 20.sp, color = Color.White  , maxLines = 1 , fontWeight = FontWeight.ExtraBold)
                                IconButton(
                                    onClick = { expanded = true},
                                    modifier = Modifier.size(50.dp).indication(indication = null ,
                                        interactionSource = remember { MutableInteractionSource() }),
                                    colors = IconButtonDefaults.iconButtonColors(contentColor = Color.White)
                                ) {
                                    Icon(imageVector = Icons.Default.Menu, contentDescription = null)
                                }
                            }
                        }
                    }
                }
            }


            val esm = listOf("خورشیدی", "پرنور و مشهور", "غول و ابرغول", "کوتوله و داغ", "نوترونی و انفجاری", "متغیر و خاص", "مناطق ستاره زایی", "اصول نظری")
            val language = listOf(
                painterResource(id = R.drawable.sun),
                painterResource(id = R.drawable.starlite),
                painterResource(id = R.drawable.bigstar),
                painterResource(id = R.drawable.starlittle),
                painterResource(id = R.drawable.starnetrun),
                painterResource(id = R.drawable.starvarible),
                painterResource(id = R.drawable.starnebula),
                painterResource(id = R.drawable.starnazari),
            )
            val kameltar = esm.zip(language)




            Column(
                modifier = Modifier
                    .fillMaxSize(),
                horizontalAlignment = Alignment.CenterHorizontally
            ) {
                Text("")
                Text("")
                Text("")
                Text("")
                //بسیار چیز خفن
                LazyColumn() {
                    items(kameltar) { (letter, esmha) ->
                        Card(
                            modifier = Modifier
                                .padding(5.dp)
                                .height(100.dp)
                                .fillMaxWidth()
                                .clip(shape = RoundedCornerShape(100.dp))
                        ) {
                            Box(
                                modifier = Modifier.fillMaxSize(),
                                contentAlignment = Alignment.CenterEnd
                            ) {
                                Image(
                                    painter = painterResource(R.drawable.card),
                                    contentDescription = null, contentScale = ContentScale.Crop
                                )
                                Button(
                                    onClick = {
                                        if (letter == "خورشیدی") {
                                            currentScreen = "sun"
                                            backap = false
                                        }
                                        if (letter == "پرنور و مشهور") {
                                            backap = false
                                            currentScreen = "starlite"
                                        }
                                        if (letter == "غول و ابرغول") {
                                            currentScreen = "starbig"
                                            backap = false
                                        }
                                        if (letter == "کوتوله و داغ") {
                                            backap = false
                                            currentScreen = "starlittle"
                                        }
                                        if (letter == "نوترونی و انفجاری") {
                                            backap = false
                                            currentScreen = "starnetron"
                                        }
                                        if (letter == "متغیر و خاص") {
                                            backap = false
                                            currentScreen = "starvarible"
                                        }
                                        if (letter == "مناطق ستاره زایی") {
                                            backap = false
                                            currentScreen = "starnebula"
                                        }
                                        if (letter == "اصول نظری") {
                                            backap = false
                                            currentScreen = "starnazari"
                                        }
                                    }, modifier = Modifier.fillMaxSize().indication(interactionSource = remember { MutableInteractionSource() }
                                        , indication = null),
                                    colors = ButtonDefaults.buttonColors(containerColor = Color.Transparent)
                                ) {

                                }
                                Image(
                                    painter = esmha,
                                    contentDescription = null,
                                    modifier = Modifier
                                        .width(145.dp)
                                        .height(300.dp)
                                )
                                Box(contentAlignment = Alignment.Center) {
                                    Row() {
//                                    Spacer(modifier = Modifier.height(100.dp))
                                        Column() {
                                            Text(
                                                "   $letter",
                                                color = Color.White,
                                                fontSize = 20.sp,
                                                fontStyle = FontStyle.Italic
                                                , style = TextStyle(
                                                    shadow = Shadow(
                                                        color = Color(0xFFFFFFFF),
                                                        offset = Offset(0f ,0f)
                                                        , blurRadius = 20f
                                                    )
                                                ), fontWeight = FontWeight.ExtraLight
                                            )
                                        }
                                        Spacer(modifier = Modifier.width(130.dp))
                                    }
                                }
                                var first by remember { mutableStateOf(0) }
                                var first1 by remember { mutableStateOf(0) }
                                var first2 by remember { mutableStateOf(0) }
                                var first3 by remember { mutableStateOf(0) }
                                var first4 by remember { mutableStateOf(0) }
                                var first5 by remember { mutableStateOf(0) }
                                var first6 by remember { mutableStateOf(0) }
                                var first7 by remember { mutableStateOf(0) }
                                Box(
                                    contentAlignment = Alignment.CenterStart,
                                    modifier = Modifier
                                        .fillMaxSize()
                                        .padding(15.dp)
                                ) {
                                    IconButton(
                                        onClick = {
                                            if (letter == "خورشیدی") {
                                                first++
                                            }
                                            if (letter == "پرنور و مشهور") {
                                                first1++
                                            }
                                            if (letter == "غول و ابرغول") {
                                                first2++
                                            }
                                            if (letter == "کوتوله و داغ") {
                                                first3++
                                            }
                                            if (letter == "نوترونی و انفجاری") {
                                                first4++
                                            }
                                            if (letter == "متغیر و خاص") {
                                                first5++
                                            }
                                            if (letter == "مناطق ستاره زایی") {
                                                first6++
                                            }
                                            if (letter == "اصول نظری") {
                                                first7++
                                            }
                                        }, modifier = Modifier.size(50.dp)
                                            .indication(indication = null ,
                                                interactionSource = remember { MutableInteractionSource() }),
                                    ) {
                                        if (first % 2 == 0) {
                                            Icon(
                                                imageVector = Icons.Default.Favorite,
                                                contentDescription = null,
                                                tint = Color.Transparent,
                                                modifier = Modifier.size(40.dp)
                                            )
                                            Icon(
                                                imageVector = Icons.Default.FavoriteBorder,
                                                contentDescription = null,
                                                tint = Color.White,
                                                modifier = Modifier.size(40.dp)
                                            )
                                        }
                                        if (first % 2 == 1) {
                                            Icon(
                                                imageVector = Icons.Default.Favorite,
                                                contentDescription = null,
                                                tint = Color.White,
                                                modifier = Modifier.size(40.dp)
                                            )
                                            Icon(
                                                imageVector = Icons.Default.FavoriteBorder,
                                                contentDescription = null,
                                                tint = Color.White,
                                                modifier = Modifier.size(40.dp)
                                            )
                                        }


                                        if (first1 % 2 == 0) {
                                            Icon(
                                                imageVector = Icons.Default.Favorite,
                                                contentDescription = null,
                                                tint = Color.Transparent,
                                                modifier = Modifier.size(40.dp)
                                            )
                                            Icon(
                                                imageVector = Icons.Default.FavoriteBorder,
                                                contentDescription = null,
                                                tint = Color.White,
                                                modifier = Modifier.size(40.dp)
                                            )
                                        }
                                        if (first1 % 2 == 1) {
                                            Icon(
                                                imageVector = Icons.Default.Favorite,
                                                contentDescription = null,
                                                tint = Color.White,
                                                modifier = Modifier.size(40.dp)
                                            )
                                            Icon(
                                                imageVector = Icons.Default.FavoriteBorder,
                                                contentDescription = null,
                                                tint = Color.White,
                                                modifier = Modifier.size(40.dp)
                                            )
                                        }


                                        if (first2 % 2 == 0) {
                                            Icon(
                                                imageVector = Icons.Default.Favorite,
                                                contentDescription = null,
                                                tint = Color.Transparent,
                                                modifier = Modifier.size(40.dp)
                                            )
                                            Icon(
                                                imageVector = Icons.Default.FavoriteBorder,
                                                contentDescription = null,
                                                tint = Color.White,
                                                modifier = Modifier.size(40.dp)
                                            )
                                        }
                                        if (first2 % 2 == 1) {
                                            Icon(
                                                imageVector = Icons.Default.Favorite,
                                                contentDescription = null,
                                                tint = Color.White,
                                                modifier = Modifier.size(40.dp)
                                            )
                                            Icon(
                                                imageVector = Icons.Default.FavoriteBorder,
                                                contentDescription = null,
                                                tint = Color.White,
                                                modifier = Modifier.size(40.dp)
                                            )
                                        }


                                        if (first3 % 2 == 0) {
                                            Icon(
                                                imageVector = Icons.Default.Favorite,
                                                contentDescription = null,
                                                tint = Color.Transparent,
                                                modifier = Modifier.size(40.dp)
                                            )
                                            Icon(
                                                imageVector = Icons.Default.FavoriteBorder,
                                                contentDescription = null,
                                                tint = Color.White,
                                                modifier = Modifier.size(40.dp)
                                            )
                                        }
                                        if (first3 % 2 == 1) {
                                            Icon(
                                                imageVector = Icons.Default.Favorite,
                                                contentDescription = null,
                                                tint = Color.White,
                                                modifier = Modifier.size(40.dp)
                                            )
                                            Icon(
                                                imageVector = Icons.Default.FavoriteBorder,
                                                contentDescription = null,
                                                tint = Color.White,
                                                modifier = Modifier.size(40.dp)
                                            )
                                        }


                                        if (first4 % 2 == 0) {
                                            Icon(
                                                imageVector = Icons.Default.Favorite,
                                                contentDescription = null,
                                                tint = Color.Transparent,
                                                modifier = Modifier.size(40.dp)
                                            )
                                            Icon(
                                                imageVector = Icons.Default.FavoriteBorder,
                                                contentDescription = null,
                                                tint = Color.White,
                                                modifier = Modifier.size(40.dp)
                                            )
                                        }
                                        if (first4 % 2 == 1) {
                                            Icon(
                                                imageVector = Icons.Default.Favorite,
                                                contentDescription = null,
                                                tint = Color.White,
                                                modifier = Modifier.size(40.dp)
                                            )
                                            Icon(
                                                imageVector = Icons.Default.FavoriteBorder,
                                                contentDescription = null,
                                                tint = Color.White,
                                                modifier = Modifier.size(40.dp)
                                            )
                                        }


                                        if (first5 % 2 == 0) {
                                            Icon(
                                                imageVector = Icons.Default.Favorite,
                                                contentDescription = null,
                                                tint = Color.Transparent,
                                                modifier = Modifier.size(40.dp)
                                            )
                                            Icon(
                                                imageVector = Icons.Default.FavoriteBorder,
                                                contentDescription = null,
                                                tint = Color.White,
                                                modifier = Modifier.size(40.dp)
                                            )
                                        }
                                        if (first5 % 2 == 1) {
                                            Icon(
                                                imageVector = Icons.Default.Favorite,
                                                contentDescription = null,
                                                tint = Color.White,
                                                modifier = Modifier.size(40.dp)
                                            )
                                            Icon(
                                                imageVector = Icons.Default.FavoriteBorder,
                                                contentDescription = null,
                                                tint = Color.White,
                                                modifier = Modifier.size(40.dp)
                                            )
                                        }


                                        if (first6 % 2 == 0) {
                                            Icon(
                                                imageVector = Icons.Default.Favorite,
                                                contentDescription = null,
                                                tint = Color.Transparent,
                                                modifier = Modifier.size(40.dp)
                                            )
                                            Icon(
                                                imageVector = Icons.Default.FavoriteBorder,
                                                contentDescription = null,
                                                tint = Color.White,
                                                modifier = Modifier.size(40.dp)
                                            )
                                        }
                                        if (first6 % 2 == 1) {
                                            Icon(
                                                imageVector = Icons.Default.Favorite,
                                                contentDescription = null,
                                                tint = Color.White,
                                                modifier = Modifier.size(40.dp)
                                            )
                                            Icon(
                                                imageVector = Icons.Default.FavoriteBorder,
                                                contentDescription = null,
                                                tint = Color.White,
                                                modifier = Modifier.size(40.dp)
                                            )
                                        }


                                        if (first7 % 2 == 0) {
                                            Icon(
                                                imageVector = Icons.Default.Favorite,
                                                contentDescription = null,
                                                tint = Color.Transparent,
                                                modifier = Modifier.size(40.dp)
                                            )
                                            Icon(
                                                imageVector = Icons.Default.FavoriteBorder,
                                                contentDescription = null,
                                                tint = Color.White,
                                                modifier = Modifier.size(40.dp)
                                            )
                                        }
                                        if (first7 % 2 == 1) {
                                            Icon(
                                                imageVector = Icons.Default.Favorite,
                                                contentDescription = null,
                                                tint = Color.White,
                                                modifier = Modifier.size(40.dp)
                                            )
                                            Icon(
                                                imageVector = Icons.Default.FavoriteBorder,
                                                contentDescription = null,
                                                tint = Color.White,
                                                modifier = Modifier.size(40.dp)
                                            )
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}

@Composable
fun EardScrean() {
    Image(painter = painterResource(id = R.drawable.app_back)
        , contentScale = ContentScale.Crop , contentDescription = null)
    when(currentScreen) {
        "asli2" -> {
            Column {
                Card(
                    modifier = Modifier
                        .fillMaxWidth()
                        .height(32.5.dp),
                    shape = RectangleShape,
                    colors = CardDefaults.cardColors(containerColor = Color(0xFF030A33))
                ) {
                }
                Column() {
                    Card(
                        modifier = Modifier
                            .fillMaxWidth()
                            .height(50.dp),
                        shape = RectangleShape,
                        colors = CardDefaults.cardColors(containerColor = Color(0xFF0707AD))
                    ) {
                        Row(modifier = Modifier.padding(10.dp)) {
                            IconButton(onClick = { currentScreen = "home"
                                backap = true
                            }, modifier = Modifier.indication(indication = null ,
                                interactionSource = remember { MutableInteractionSource() }),
                                colors = IconButtonDefaults.iconButtonColors(contentColor = Color.White)) {
                                Icon(
                                    imageVector = Icons.Outlined.ArrowBack,
                                    contentDescription = null,
                                    modifier = Modifier.size(40.dp)
                                )
                            }
                            IconButton(
                                onClick = {},
                                colors = IconButtonDefaults.iconButtonColors(contentColor = Color.White),
                                modifier = Modifier.indication(indication = null ,
                                    interactionSource = remember { MutableInteractionSource() })
                            ) {
                                Icon(imageVector = Icons.Default.Info, contentDescription = null)
                            }
                            IconButton(
                                onClick = {currentScreen = "search"
                                    backap = false},
                                colors = IconButtonDefaults.iconButtonColors(contentColor = Color.White),
                                modifier = Modifier.indication(indication = null ,
                                    interactionSource = remember { MutableInteractionSource() })
                            ) {
                                Icon(imageVector = Icons.Default.Search, contentDescription = null)
                            }
                            Row(
                                modifier = Modifier.fillMaxWidth(),
                                horizontalArrangement = Arrangement.End,
                                verticalAlignment = Alignment.CenterVertically
                            ) {
                                Text("قمر ها", fontSize = 20.sp, color = Color.White  , maxLines = 1 , fontWeight = FontWeight.ExtraBold)
                                IconButton(
                                    onClick = { expanded = true},
                                    modifier = Modifier.size(50.dp).indication(indication = null ,
                                        interactionSource = remember { MutableInteractionSource() }),
                                    colors = IconButtonDefaults.iconButtonColors(contentColor = Color.White)
                                ) {
                                    Icon(imageVector = Icons.Default.Menu, contentDescription = null)
                                }
                            }
                        }
                    }
                }
            }


            val esm = listOf("قمر های طبیعی", "قمر های مصنوعی", "قمر های منظم", "قمر های نامنظم", "قمر های دوگانه", "قمر های برخوردی", "قمر های بین ستاره ای")
            val language = listOf(
                painterResource(id = R.drawable.moonnatural),
                painterResource(id = R.drawable.moonartificioal),
                painterResource(id = R.drawable.moonregular),
                painterResource(id = R.drawable.mooniregular),
                painterResource(id = R.drawable.moon2gane),
                painterResource(id = R.drawable.moonbarkhordi),
                painterResource(id = R.drawable.moonstari),
            )
            val kameltar = esm.zip(language)




            Column(
                modifier = Modifier
                    .fillMaxSize(),
                horizontalAlignment = Alignment.CenterHorizontally
            ) {
                Text("")
                Text("")
                Text("")
                Text("")
                //بسیار چیز خفن
                LazyColumn() {
                    items(kameltar) { (letter, esmha) ->
                        Card(
                            modifier = Modifier
                                .padding(5.dp)
                                .height(100.dp)
                                .fillMaxWidth()
                                .clip(shape = RoundedCornerShape(100.dp))
                        ) {
                            Box(
                                modifier = Modifier.fillMaxSize(),
                                contentAlignment = Alignment.CenterEnd
                            ) {
                                Image(
                                    painter = painterResource(R.drawable.card),
                                    contentDescription = null, contentScale = ContentScale.Crop
                                )
                                Button(
                                    onClick = {
                                        if (letter == "قمر های طبیعی") {
                                            currentScreen = "moonnatural"
                                            backap = false
                                        }
                                        if (letter == "قمر های مصنوعی") {
                                            backap = false
                                            currentScreen = "moonartificional"
                                        }
                                        if (letter == "قمر های منظم") {
                                            currentScreen = "moonregular"
                                            backap = false
                                        }
                                        if (letter == "قمر های نامنظم") {
                                            backap = false
                                            currentScreen = "mooniregular"
                                        }
                                        if (letter == "قمر های دوگانه") {
                                            backap = false
                                            currentScreen = "moon2gane"
                                        }
                                        if (letter == "قمر های برخوردی") {
                                            backap = false
                                            currentScreen = "moonbarkhordi"
                                        }
                                        if (letter == "قمر های بین ستاره ای") {
                                            backap = false
                                            currentScreen = "moonstari"
                                        }
                                    }, modifier = Modifier.fillMaxSize().indication(interactionSource = remember { MutableInteractionSource() }
                                        , indication = null),
                                    colors = ButtonDefaults.buttonColors(containerColor = Color.Transparent)
                                ) {

                                }
                                Image(
                                    painter = esmha,
                                    contentDescription = null,
                                    modifier = Modifier
                                        .width(145.dp)
                                        .height(300.dp)
                                )
                                Box(contentAlignment = Alignment.Center) {
                                    Row() {
//                                    Spacer(modifier = Modifier.height(100.dp))
                                        Column() {
                                            Text(
                                                "   $letter",
                                                color = Color.White,
                                                fontSize = 20.sp,
                                                fontStyle = FontStyle.Italic
                                                , style = TextStyle(
                                                    shadow = Shadow(
                                                        color = Color(0xFFFFFFFF),
                                                        offset = Offset(0f ,0f)
                                                        , blurRadius = 20f
                                                    )
                                                ), fontWeight = FontWeight.ExtraLight
                                            )
                                        }
                                        Spacer(modifier = Modifier.width(130.dp))
                                    }
                                }
                                var first by remember { mutableStateOf(0) }
                                var first1 by remember { mutableStateOf(0) }
                                var first2 by remember { mutableStateOf(0) }
                                var first3 by remember { mutableStateOf(0) }
                                var first4 by remember { mutableStateOf(0) }
                                var first5 by remember { mutableStateOf(0) }
                                var first6 by remember { mutableStateOf(0) }
                                var first7 by remember { mutableStateOf(0) }
                                Box(
                                    contentAlignment = Alignment.CenterStart,
                                    modifier = Modifier
                                        .fillMaxSize()
                                        .padding(15.dp)
                                ) {
                                    IconButton(
                                        onClick = {
                                            if (letter == "قمر های طبیعی") {
                                                first++
                                            }
                                            if (letter == "قمر های مصنوعی") {
                                                first1++
                                            }
                                            if (letter == "قمر های منظم") {
                                                first2++
                                            }
                                            if (letter == "قمر های نامنظم") {
                                                first3++
                                            }
                                            if (letter == "قمر های دوگانه") {
                                                first4++
                                            }
                                            if (letter == "قمر های برخوردی") {
                                                first5++
                                            }
                                            if (letter == "قمر های بین ستاره ای") {
                                                first6++
                                            }
                                        }, modifier = Modifier.size(50.dp)
                                            .indication(indication = null ,
                                                interactionSource = remember { MutableInteractionSource() }),
                                    ) {
                                        if (first % 2 == 0) {
                                            Icon(
                                                imageVector = Icons.Default.Favorite,
                                                contentDescription = null,
                                                tint = Color.Transparent,
                                                modifier = Modifier.size(40.dp)
                                            )
                                            Icon(
                                                imageVector = Icons.Default.FavoriteBorder,
                                                contentDescription = null,
                                                tint = Color.White,
                                                modifier = Modifier.size(40.dp)
                                            )
                                        }
                                        if (first % 2 == 1) {
                                            Icon(
                                                imageVector = Icons.Default.Favorite,
                                                contentDescription = null,
                                                tint = Color.White,
                                                modifier = Modifier.size(40.dp)
                                            )
                                            Icon(
                                                imageVector = Icons.Default.FavoriteBorder,
                                                contentDescription = null,
                                                tint = Color.White,
                                                modifier = Modifier.size(40.dp)
                                            )
                                        }


                                        if (first1 % 2 == 0) {
                                            Icon(
                                                imageVector = Icons.Default.Favorite,
                                                contentDescription = null,
                                                tint = Color.Transparent,
                                                modifier = Modifier.size(40.dp)
                                            )
                                            Icon(
                                                imageVector = Icons.Default.FavoriteBorder,
                                                contentDescription = null,
                                                tint = Color.White,
                                                modifier = Modifier.size(40.dp)
                                            )
                                        }
                                        if (first1 % 2 == 1) {
                                            Icon(
                                                imageVector = Icons.Default.Favorite,
                                                contentDescription = null,
                                                tint = Color.White,
                                                modifier = Modifier.size(40.dp)
                                            )
                                            Icon(
                                                imageVector = Icons.Default.FavoriteBorder,
                                                contentDescription = null,
                                                tint = Color.White,
                                                modifier = Modifier.size(40.dp)
                                            )
                                        }


                                        if (first2 % 2 == 0) {
                                            Icon(
                                                imageVector = Icons.Default.Favorite,
                                                contentDescription = null,
                                                tint = Color.Transparent,
                                                modifier = Modifier.size(40.dp)
                                            )
                                            Icon(
                                                imageVector = Icons.Default.FavoriteBorder,
                                                contentDescription = null,
                                                tint = Color.White,
                                                modifier = Modifier.size(40.dp)
                                            )
                                        }
                                        if (first2 % 2 == 1) {
                                            Icon(
                                                imageVector = Icons.Default.Favorite,
                                                contentDescription = null,
                                                tint = Color.White,
                                                modifier = Modifier.size(40.dp)
                                            )
                                            Icon(
                                                imageVector = Icons.Default.FavoriteBorder,
                                                contentDescription = null,
                                                tint = Color.White,
                                                modifier = Modifier.size(40.dp)
                                            )
                                        }


                                        if (first3 % 2 == 0) {
                                            Icon(
                                                imageVector = Icons.Default.Favorite,
                                                contentDescription = null,
                                                tint = Color.Transparent,
                                                modifier = Modifier.size(40.dp)
                                            )
                                            Icon(
                                                imageVector = Icons.Default.FavoriteBorder,
                                                contentDescription = null,
                                                tint = Color.White,
                                                modifier = Modifier.size(40.dp)
                                            )
                                        }
                                        if (first3 % 2 == 1) {
                                            Icon(
                                                imageVector = Icons.Default.Favorite,
                                                contentDescription = null,
                                                tint = Color.White,
                                                modifier = Modifier.size(40.dp)
                                            )
                                            Icon(
                                                imageVector = Icons.Default.FavoriteBorder,
                                                contentDescription = null,
                                                tint = Color.White,
                                                modifier = Modifier.size(40.dp)
                                            )
                                        }


                                        if (first4 % 2 == 0) {
                                            Icon(
                                                imageVector = Icons.Default.Favorite,
                                                contentDescription = null,
                                                tint = Color.Transparent,
                                                modifier = Modifier.size(40.dp)
                                            )
                                            Icon(
                                                imageVector = Icons.Default.FavoriteBorder,
                                                contentDescription = null,
                                                tint = Color.White,
                                                modifier = Modifier.size(40.dp)
                                            )
                                        }
                                        if (first4 % 2 == 1) {
                                            Icon(
                                                imageVector = Icons.Default.Favorite,
                                                contentDescription = null,
                                                tint = Color.White,
                                                modifier = Modifier.size(40.dp)
                                            )
                                            Icon(
                                                imageVector = Icons.Default.FavoriteBorder,
                                                contentDescription = null,
                                                tint = Color.White,
                                                modifier = Modifier.size(40.dp)
                                            )
                                        }


                                        if (first5 % 2 == 0) {
                                            Icon(
                                                imageVector = Icons.Default.Favorite,
                                                contentDescription = null,
                                                tint = Color.Transparent,
                                                modifier = Modifier.size(40.dp)
                                            )
                                            Icon(
                                                imageVector = Icons.Default.FavoriteBorder,
                                                contentDescription = null,
                                                tint = Color.White,
                                                modifier = Modifier.size(40.dp)
                                            )
                                        }
                                        if (first5 % 2 == 1) {
                                            Icon(
                                                imageVector = Icons.Default.Favorite,
                                                contentDescription = null,
                                                tint = Color.White,
                                                modifier = Modifier.size(40.dp)
                                            )
                                            Icon(
                                                imageVector = Icons.Default.FavoriteBorder,
                                                contentDescription = null,
                                                tint = Color.White,
                                                modifier = Modifier.size(40.dp)
                                            )
                                        }


                                        if (first6 % 2 == 0) {
                                            Icon(
                                                imageVector = Icons.Default.Favorite,
                                                contentDescription = null,
                                                tint = Color.Transparent,
                                                modifier = Modifier.size(40.dp)
                                            )
                                            Icon(
                                                imageVector = Icons.Default.FavoriteBorder,
                                                contentDescription = null,
                                                tint = Color.White,
                                                modifier = Modifier.size(40.dp)
                                            )
                                        }
                                        if (first6 % 2 == 1) {
                                            Icon(
                                                imageVector = Icons.Default.Favorite,
                                                contentDescription = null,
                                                tint = Color.White,
                                                modifier = Modifier.size(40.dp)
                                            )
                                            Icon(
                                                imageVector = Icons.Default.FavoriteBorder,
                                                contentDescription = null,
                                                tint = Color.White,
                                                modifier = Modifier.size(40.dp)
                                            )
                                        }


                                        if (first7 % 2 == 0) {
                                            Icon(
                                                imageVector = Icons.Default.Favorite,
                                                contentDescription = null,
                                                tint = Color.Transparent,
                                                modifier = Modifier.size(40.dp)
                                            )
                                            Icon(
                                                imageVector = Icons.Default.FavoriteBorder,
                                                contentDescription = null,
                                                tint = Color.White,
                                                modifier = Modifier.size(40.dp)
                                            )
                                        }
                                        if (first7 % 2 == 1) {
                                            Icon(
                                                imageVector = Icons.Default.Favorite,
                                                contentDescription = null,
                                                tint = Color.White,
                                                modifier = Modifier.size(40.dp)
                                            )
                                            Icon(
                                                imageVector = Icons.Default.FavoriteBorder,
                                                contentDescription = null,
                                                tint = Color.White,
                                                modifier = Modifier.size(40.dp)
                                            )
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}
@Composable
fun NeardScrean() {
    Image(painter = painterResource(id = R.drawable.app_back)
        , contentScale = ContentScale.Crop , contentDescription = null)
    when(currentScreen) {
        "asli3" -> {
            Column {
                Card(
                    modifier = Modifier
                        .fillMaxWidth()
                        .height(32.5.dp),
                    shape = RectangleShape,
                    colors = CardDefaults.cardColors(containerColor = Color(0xFF030A33))
                ) {
                }
                Column() {
                    Card(
                        modifier = Modifier
                            .fillMaxWidth()
                            .height(50.dp),
                        shape = RectangleShape,
                        colors = CardDefaults.cardColors(containerColor = Color(0xFF0707AD))
                    ) {
                        Row(modifier = Modifier.padding(10.dp)) {
                            IconButton(onClick = { currentScreen = "home"
                                backap = true
                            }, modifier = Modifier.indication(indication = null ,
                                interactionSource = remember { MutableInteractionSource() }),
                                colors = IconButtonDefaults.iconButtonColors(contentColor = Color.White)) {
                                Icon(
                                    imageVector = Icons.Outlined.ArrowBack,
                                    contentDescription = null,
                                    modifier = Modifier.size(40.dp)
                                )
                            }
                            IconButton(
                                onClick = {},
                                colors = IconButtonDefaults.iconButtonColors(contentColor = Color.White),
                                modifier = Modifier.indication(indication = null ,
                                    interactionSource = remember { MutableInteractionSource() })
                            ) {
                                Icon(imageVector = Icons.Default.Info, contentDescription = null)
                            }
                            IconButton(
                                onClick = {currentScreen = "search"
                                    backap = false},
                                colors = IconButtonDefaults.iconButtonColors(contentColor = Color.White),
                                modifier = Modifier.indication(indication = null ,
                                    interactionSource = remember { MutableInteractionSource() })
                            ) {
                                Icon(imageVector = Icons.Default.Search, contentDescription = null)
                            }
                            Row(
                                modifier = Modifier.fillMaxWidth(),
                                horizontalArrangement = Arrangement.End,
                                verticalAlignment = Alignment.CenterVertically
                            ) {
                                Text("سیارک ها", fontSize = 20.sp, color = Color.White  , maxLines = 1 , fontWeight = FontWeight.ExtraBold)
                                IconButton(
                                    onClick = { expanded = true},
                                    modifier = Modifier.size(50.dp).indication(indication = null ,
                                        interactionSource = remember { MutableInteractionSource() }),
                                    colors = IconButtonDefaults.iconButtonColors(contentColor = Color.White)
                                ) {
                                    Icon(imageVector = Icons.Default.Menu, contentDescription = null)
                                }
                            }
                        }
                    }
                }
            }



            val esm = listOf("سیارک های ترکیبی", "سیارک های طیفی", "سیارک های نوری", "سیارک های فیزیکی", "سیارک های منشادار", "سیارک های مداری", "سیارک های بازالتی")
            val language = listOf(
                painterResource(id = R.drawable.asteroidtarkibi),
                painterResource(id = R.drawable.astroidteifi),
                painterResource(id = R.drawable.astroidnori),
                painterResource(id = R.drawable.astroidfiziki),
                painterResource(id = R.drawable.astroidmanshaedar),
                painterResource(id = R.drawable.astroidmadari),
                painterResource(id = R.drawable.astroidbazalati),
            )
            val kameltar = esm.zip(language)




            Column(
                modifier = Modifier
                    .fillMaxSize(),
                horizontalAlignment = Alignment.CenterHorizontally
            ) {
                Text("")
                Text("")
                Text("")
                Text("")
                //بسیار چیز خفن
                LazyColumn() {
                    items(kameltar) { (letter, esmha) ->
                        Card(
                            modifier = Modifier
                                .padding(5.dp)
                                .height(100.dp)
                                .fillMaxWidth()
                                .clip(shape = RoundedCornerShape(100.dp))
                        ) {
                            Box(
                                modifier = Modifier.fillMaxSize(),
                                contentAlignment = Alignment.CenterEnd
                            ) {
                                Image(
                                    painter = painterResource(R.drawable.card),
                                    contentDescription = null, contentScale = ContentScale.Crop
                                )
                                Button(
                                    onClick = {
                                        if (letter == "سیارک های ترکیبی") {
                                            currentScreen = "astroidtarkibi"
                                            backap = false
                                        }
                                        if (letter == "سیارک های طیفی") {
                                            backap = false
                                            currentScreen = "astroidteifi"
                                        }
                                        if (letter == "سیارک های نوری") {
                                            currentScreen = "astroidnoori"
                                            backap = false
                                        }
                                        if (letter == "سیارک های فیزیکی") {
                                            backap = false
                                            currentScreen = "astroidfiziki"
                                        }
                                        if (letter == "سیارک های منشادار") {
                                            backap = false
                                            currentScreen = "astroidmanshaedar"
                                        }
                                        if (letter == "سیارک های مداری") {
                                            backap = false
                                            currentScreen = "astroidmadari"
                                        }
                                        if (letter == "سیارک های بازالتی") {
                                            backap = false
                                            currentScreen = "astroidbazalati"
                                        }
                                    }, modifier = Modifier.fillMaxSize().indication(interactionSource = remember { MutableInteractionSource() }
                                        , indication = null),
                                    colors = ButtonDefaults.buttonColors(containerColor = Color.Transparent)
                                ) {

                                }
                                Image(
                                    painter = esmha,
                                    contentDescription = null,
                                    modifier = Modifier
                                        .width(145.dp)
                                        .height(300.dp)
                                )
                                Box(contentAlignment = Alignment.Center) {
                                    Row() {
//                                    Spacer(modifier = Modifier.height(100.dp))
                                        Column() {
                                            Text(
                                                "   $letter",
                                                color = Color.White,
                                                fontSize = 20.sp,
                                                fontStyle = FontStyle.Italic
                                                , style = TextStyle(
                                                    shadow = Shadow(
                                                        color = Color(0xFFFFFFFF),
                                                        offset = Offset(0f ,0f)
                                                        , blurRadius = 20f
                                                    )
                                                ), fontWeight = FontWeight.ExtraLight
                                            )
                                        }
                                        Spacer(modifier = Modifier.width(130.dp))
                                    }
                                }
                                var first by remember { mutableStateOf(0) }
                                var first1 by remember { mutableStateOf(0) }
                                var first2 by remember { mutableStateOf(0) }
                                var first3 by remember { mutableStateOf(0) }
                                var first4 by remember { mutableStateOf(0) }
                                var first5 by remember { mutableStateOf(0) }
                                var first6 by remember { mutableStateOf(0) }
                                Box(
                                    contentAlignment = Alignment.CenterStart,
                                    modifier = Modifier
                                        .fillMaxSize()
                                        .padding(15.dp)
                                ) {
                                    IconButton(
                                        onClick = {
                                            if (letter == "سیارک های ترکیبی") {
                                                first++
                                            }
                                            if (letter == "سیارک های طیفی") {
                                                first1++
                                            }
                                            if (letter == "سیارک های نوری") {
                                                first2++
                                            }
                                            if (letter == "سیارک های فیزیکی") {
                                                first3++
                                            }
                                            if (letter == "سیارک های منشادار") {
                                                first4++
                                            }
                                            if (letter == "سیارک های مداری") {
                                                first5++
                                            }
                                            if (letter == "سیارک های بازالتی") {
                                                first6++
                                            }
                                        }, modifier = Modifier.size(50.dp)
                                            .indication(indication = null ,
                                                interactionSource = remember { MutableInteractionSource() }),
                                    ) {
                                        if (first % 2 == 0) {
                                            Icon(
                                                imageVector = Icons.Default.Favorite,
                                                contentDescription = null,
                                                tint = Color.Transparent,
                                                modifier = Modifier.size(40.dp)
                                            )
                                            Icon(
                                                imageVector = Icons.Default.FavoriteBorder,
                                                contentDescription = null,
                                                tint = Color.White,
                                                modifier = Modifier.size(40.dp)
                                            )
                                        }
                                        if (first % 2 == 1) {
                                            Icon(
                                                imageVector = Icons.Default.Favorite,
                                                contentDescription = null,
                                                tint = Color.White,
                                                modifier = Modifier.size(40.dp)
                                            )
                                            Icon(
                                                imageVector = Icons.Default.FavoriteBorder,
                                                contentDescription = null,
                                                tint = Color.White,
                                                modifier = Modifier.size(40.dp)
                                            )
                                        }


                                        if (first1 % 2 == 0) {
                                            Icon(
                                                imageVector = Icons.Default.Favorite,
                                                contentDescription = null,
                                                tint = Color.Transparent,
                                                modifier = Modifier.size(40.dp)
                                            )
                                            Icon(
                                                imageVector = Icons.Default.FavoriteBorder,
                                                contentDescription = null,
                                                tint = Color.White,
                                                modifier = Modifier.size(40.dp)
                                            )
                                        }
                                        if (first1 % 2 == 1) {
                                            Icon(
                                                imageVector = Icons.Default.Favorite,
                                                contentDescription = null,
                                                tint = Color.White,
                                                modifier = Modifier.size(40.dp)
                                            )
                                            Icon(
                                                imageVector = Icons.Default.FavoriteBorder,
                                                contentDescription = null,
                                                tint = Color.White,
                                                modifier = Modifier.size(40.dp)
                                            )
                                        }


                                        if (first2 % 2 == 0) {
                                            Icon(
                                                imageVector = Icons.Default.Favorite,
                                                contentDescription = null,
                                                tint = Color.Transparent,
                                                modifier = Modifier.size(40.dp)
                                            )
                                            Icon(
                                                imageVector = Icons.Default.FavoriteBorder,
                                                contentDescription = null,
                                                tint = Color.White,
                                                modifier = Modifier.size(40.dp)
                                            )
                                        }
                                        if (first2 % 2 == 1) {
                                            Icon(
                                                imageVector = Icons.Default.Favorite,
                                                contentDescription = null,
                                                tint = Color.White,
                                                modifier = Modifier.size(40.dp)
                                            )
                                            Icon(
                                                imageVector = Icons.Default.FavoriteBorder,
                                                contentDescription = null,
                                                tint = Color.White,
                                                modifier = Modifier.size(40.dp)
                                            )
                                        }


                                        if (first3 % 2 == 0) {
                                            Icon(
                                                imageVector = Icons.Default.Favorite,
                                                contentDescription = null,
                                                tint = Color.Transparent,
                                                modifier = Modifier.size(40.dp)
                                            )
                                            Icon(
                                                imageVector = Icons.Default.FavoriteBorder,
                                                contentDescription = null,
                                                tint = Color.White,
                                                modifier = Modifier.size(40.dp)
                                            )
                                        }
                                        if (first3 % 2 == 1) {
                                            Icon(
                                                imageVector = Icons.Default.Favorite,
                                                contentDescription = null,
                                                tint = Color.White,
                                                modifier = Modifier.size(40.dp)
                                            )
                                            Icon(
                                                imageVector = Icons.Default.FavoriteBorder,
                                                contentDescription = null,
                                                tint = Color.White,
                                                modifier = Modifier.size(40.dp)
                                            )
                                        }


                                        if (first4 % 2 == 0) {
                                            Icon(
                                                imageVector = Icons.Default.Favorite,
                                                contentDescription = null,
                                                tint = Color.Transparent,
                                                modifier = Modifier.size(40.dp)
                                            )
                                            Icon(
                                                imageVector = Icons.Default.FavoriteBorder,
                                                contentDescription = null,
                                                tint = Color.White,
                                                modifier = Modifier.size(40.dp)
                                            )
                                        }
                                        if (first4 % 2 == 1) {
                                            Icon(
                                                imageVector = Icons.Default.Favorite,
                                                contentDescription = null,
                                                tint = Color.White,
                                                modifier = Modifier.size(40.dp)
                                            )
                                            Icon(
                                                imageVector = Icons.Default.FavoriteBorder,
                                                contentDescription = null,
                                                tint = Color.White,
                                                modifier = Modifier.size(40.dp)
                                            )
                                        }
                                        if (first5 % 2 == 0) {
                                            Icon(
                                                imageVector = Icons.Default.Favorite,
                                                contentDescription = null,
                                                tint = Color.Transparent,
                                                modifier = Modifier.size(40.dp)
                                            )
                                            Icon(
                                                imageVector = Icons.Default.FavoriteBorder,
                                                contentDescription = null,
                                                tint = Color.White,
                                                modifier = Modifier.size(40.dp)
                                            )
                                        }
                                        if (first5 % 2 == 1) {
                                            Icon(
                                                imageVector = Icons.Default.Favorite,
                                                contentDescription = null,
                                                tint = Color.White,
                                                modifier = Modifier.size(40.dp)
                                            )
                                            Icon(
                                                imageVector = Icons.Default.FavoriteBorder,
                                                contentDescription = null,
                                                tint = Color.White,
                                                modifier = Modifier.size(40.dp)
                                            )
                                        }

                                        if (first6 % 2 == 1) {
                                            Icon(
                                                imageVector = Icons.Default.Favorite,
                                                contentDescription = null,
                                                tint = Color.White,
                                                modifier = Modifier.size(40.dp)
                                            )
                                            Icon(
                                                imageVector = Icons.Default.FavoriteBorder,
                                                contentDescription = null,
                                                tint = Color.White,
                                                modifier = Modifier.size(40.dp)
                                            )
                                        }
                                        if (first6 % 2 == 1) {
                                            Icon(
                                                imageVector = Icons.Default.Favorite,
                                                contentDescription = null,
                                                tint = Color.White,
                                                modifier = Modifier.size(40.dp)
                                            )
                                            Icon(
                                                imageVector = Icons.Default.FavoriteBorder,
                                                contentDescription = null,
                                                tint = Color.White,
                                                modifier = Modifier.size(40.dp)
                                            )
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}
@Composable
fun TenthScrean() {
    Image(painter = painterResource(id = R.drawable.app_back)
        , contentScale = ContentScale.Crop , contentDescription = null)
    when(currentScreen) {
        "asli4" -> {
            Column {
                Card(
                    modifier = Modifier
                        .fillMaxWidth()
                        .height(32.5.dp),
                    shape = RectangleShape,
                    colors = CardDefaults.cardColors(containerColor = Color(0xFF030A33))
                ) {
                }
                Column() {
                    Card(
                        modifier = Modifier
                            .fillMaxWidth()
                            .height(50.dp),
                        shape = RectangleShape,
                        colors = CardDefaults.cardColors(containerColor = Color(0xFF0707AD))
                    ) {
                        Row(modifier = Modifier.padding(10.dp)) {
                            IconButton(onClick = { currentScreen = "home"
                                backap = true
                            }, modifier = Modifier.indication(indication = null ,
                                interactionSource = remember { MutableInteractionSource() }),
                                colors = IconButtonDefaults.iconButtonColors(contentColor = Color.White)) {
                                Icon(
                                    imageVector = Icons.Outlined.ArrowBack,
                                    contentDescription = null,
                                    modifier = Modifier.size(40.dp)
                                )
                            }
                            IconButton(
                                onClick = {},
                                colors = IconButtonDefaults.iconButtonColors(contentColor = Color.White),
                                modifier = Modifier.indication(indication = null ,
                                    interactionSource = remember { MutableInteractionSource() })
                            ) {
                                Icon(imageVector = Icons.Default.Info, contentDescription = null)
                            }
                            IconButton(
                                onClick = {currentScreen = "search"
                                    backap = false},
                                colors = IconButtonDefaults.iconButtonColors(contentColor = Color.White),
                                modifier = Modifier.indication(indication = null ,
                                    interactionSource = remember { MutableInteractionSource() })
                            ) {
                                Icon(imageVector = Icons.Default.Search, contentDescription = null)
                            }
                            Row(
                                modifier = Modifier.fillMaxWidth(),
                                horizontalArrangement = Arrangement.End,
                                verticalAlignment = Alignment.CenterVertically
                            ) {
                                Text("دنباله دارها", fontSize = 20.sp, color = Color.White  , maxLines = 1 , fontWeight = FontWeight.ExtraBold)
                                IconButton(
                                    onClick = { expanded = true},
                                    modifier = Modifier.size(50.dp).indication(indication = null ,
                                        interactionSource = remember { MutableInteractionSource() }),
                                    colors = IconButtonDefaults.iconButtonColors(contentColor = Color.White)
                                ) {
                                    Icon(imageVector = Icons.Default.Menu, contentDescription = null)
                                }
                            }
                        }
                    }
                }
            }



            val esm = listOf(
                "دنباله‌دار کوتاه‌دوره",
                "دنباله‌دار بلند‌دوره",
                "دنباله‌دار تک‌گذر",
                "ساختار دنباله‌دارها",
                "منشأ دنباله‌دارها",
                "دنباله‌دار معروف",
                "دنباله‌دار میانی",
                "چرخه‌ حیات دنباله‌دار",
                "تأثیر دنباله‌دار بر زمین",
                "مقایسه دنباله‌دارها"
            )
            val language = listOf(
                painterResource(id = R.drawable.cometkotahdore),
                painterResource(id = R.drawable.cometbolanddore),
                painterResource(id = R.drawable.cometzodgozar),
                painterResource(id = R.drawable.cometsakhtar),
                painterResource(id = R.drawable.cometmanshae),
                painterResource(id = R.drawable.cometfamus),
                painterResource(id = R.drawable.comemiansetaree),
                painterResource(id = R.drawable.comecharkhehayat),
                painterResource(id = R.drawable.cometaethirbarzamin),
                painterResource(id = R.drawable.cometmoghayese),
            )
            val kameltar = esm.zip(language)




            Column(
                modifier = Modifier
                    .fillMaxSize(),
                horizontalAlignment = Alignment.CenterHorizontally
            ) {
                Text("")
                Text("")
                Text("")
                Text("")
                //بسیار چیز خفن
                LazyColumn() {
                    items(kameltar) { (letter, esmha) ->
                        Card(
                            modifier = Modifier
                                .padding(5.dp)
                                .height(100.dp)
                                .fillMaxWidth()
                                .clip(shape = RoundedCornerShape(100.dp))
                        ) {
                            Box(
                                modifier = Modifier.fillMaxSize(),
                                contentAlignment = Alignment.CenterEnd
                            ) {
                                Image(
                                    painter = painterResource(R.drawable.card),
                                    contentDescription = null, contentScale = ContentScale.Crop
                                )
                                Button(
                                    onClick = {
                                        if (letter == "دنباله‌دار کوتاه‌دوره") {
                                            backap = false
                                            currentScreen = "comekotah"
                                        }
                                        if (letter == "دنباله‌دار بلند‌دوره") {
                                            currentScreen = "comeboland"
                                            backap = false
                                        }
                                        if (letter == "دنباله‌دار تک‌گذر") {
                                            backap = false
                                            currentScreen = "cometakgozar"
                                        }
                                        if (letter == "ساختار دنباله‌دارها") {
                                            backap = false
                                            currentScreen = "comesakhtar"
                                        }
                                        if (letter == "منشأ دنباله‌دارها") {
                                            backap = false
                                            currentScreen = "comemanshae"
                                        }
                                        if (letter == "دنباله‌دار معروف") {
                                            backap = false
                                            currentScreen = "comefamus"
                                        }
                                        if (letter == "دنباله‌دار میانی") {
                                            currentScreen = "comemiani"
                                            backap = false
                                        }
                                        if (letter == "چرخه‌ حیات دنباله‌دار") {
                                            backap = false
                                            currentScreen = "comecharkhe"
                                        }
                                        if (letter == "تأثیر دنباله‌دار بر زمین") {
                                            backap = false
                                            currentScreen = "cometaethir"
                                        }
                                        if (letter == "مقایسه دنباله‌دارها") {
                                            backap = false
                                            currentScreen = "comemoghayese"
                                        }
                                    }, modifier = Modifier.fillMaxSize().indication(interactionSource = remember { MutableInteractionSource() }
                                        , indication = null),
                                    colors = ButtonDefaults.buttonColors(containerColor = Color.Transparent)
                                ) {

                                }
                                Image(
                                    painter = esmha,
                                    contentDescription = null,
                                    modifier = Modifier
                                        .width(145.dp)
                                        .height(300.dp)
                                )
                                Box(contentAlignment = Alignment.Center) {
                                    Row() {
//                                    Spacer(modifier = Modifier.height(100.dp))
                                        Column() {
                                            Text(
                                                "   $letter",
                                                color = Color.White,
                                                fontSize = 20.sp,
                                                fontStyle = FontStyle.Italic
                                                , style = TextStyle(
                                                    shadow = Shadow(
                                                        color = Color(0xFFFFFFFF),
                                                        offset = Offset(0f ,0f)
                                                        , blurRadius = 20f
                                                    )
                                                ), fontWeight = FontWeight.ExtraLight
                                            )
                                        }
                                        Spacer(modifier = Modifier.width(130.dp))
                                    }
                                }
                                var first by remember { mutableStateOf(0) }
                                var first1 by remember { mutableStateOf(0) }
                                var first2 by remember { mutableStateOf(0) }
                                var first3 by remember { mutableStateOf(0) }
                                var first4 by remember { mutableStateOf(0) }
                                var first5 by remember { mutableStateOf(0) }
                                var first6 by remember { mutableStateOf(0) }
                                var first7 by remember { mutableStateOf(0) }
                                var first8 by remember { mutableStateOf(0) }
                                var first9 by remember { mutableStateOf(0) }
                                Box(
                                    contentAlignment = Alignment.CenterStart,
                                    modifier = Modifier
                                        .fillMaxSize()
                                        .padding(15.dp)
                                ) {
                                    IconButton(
                                        onClick = {
                                            if (letter == "دنباله‌دار کوتاه‌دوره") {
                                                first++
                                            }
                                            if (letter == "دنباله‌دار بلند‌دوره") {
                                                first1++
                                            }
                                            if (letter == "دنباله‌دار تک‌گذر") {
                                                first2++
                                            }
                                            if (letter == "ساختار دنباله‌دارها") {
                                                first3++
                                            }
                                            if (letter == "منشأ دنباله‌دارها") {
                                                first4++
                                            }
                                            if (letter == "دنباله‌دار معروف") {
                                                first5++
                                            }
                                            if (letter == "دنباله‌دار میانی") {
                                                first6++
                                            }
                                            if (letter == "چرخه‌ حیات دنباله‌دار") {
                                                first7++
                                            }
                                            if (letter == "تأثیر دنباله‌دار بر زمین") {
                                                first8++
                                            }
                                            if (letter == "مقایسه دنباله‌دارها") {
                                                first9++
                                            }
                                        }, modifier = Modifier.size(50.dp)
                                            .indication(indication = null ,
                                                interactionSource = remember { MutableInteractionSource() }),
                                    ) {
                                        if (first % 2 == 0) {
                                            Icon(
                                                imageVector = Icons.Default.Favorite,
                                                contentDescription = null,
                                                tint = Color.Transparent,
                                                modifier = Modifier.size(40.dp)
                                            )
                                            Icon(
                                                imageVector = Icons.Default.FavoriteBorder,
                                                contentDescription = null,
                                                tint = Color.White,
                                                modifier = Modifier.size(40.dp)
                                            )
                                        }
                                        if (first % 2 == 1) {
                                            Icon(
                                                imageVector = Icons.Default.Favorite,
                                                contentDescription = null,
                                                tint = Color.White,
                                                modifier = Modifier.size(40.dp)
                                            )
                                            Icon(
                                                imageVector = Icons.Default.FavoriteBorder,
                                                contentDescription = null,
                                                tint = Color.White,
                                                modifier = Modifier.size(40.dp)
                                            )
                                        }


                                        if (first1 % 2 == 0) {
                                            Icon(
                                                imageVector = Icons.Default.Favorite,
                                                contentDescription = null,
                                                tint = Color.Transparent,
                                                modifier = Modifier.size(40.dp)
                                            )
                                            Icon(
                                                imageVector = Icons.Default.FavoriteBorder,
                                                contentDescription = null,
                                                tint = Color.White,
                                                modifier = Modifier.size(40.dp)
                                            )
                                        }
                                        if (first1 % 2 == 1) {
                                            Icon(
                                                imageVector = Icons.Default.Favorite,
                                                contentDescription = null,
                                                tint = Color.White,
                                                modifier = Modifier.size(40.dp)
                                            )
                                            Icon(
                                                imageVector = Icons.Default.FavoriteBorder,
                                                contentDescription = null,
                                                tint = Color.White,
                                                modifier = Modifier.size(40.dp)
                                            )
                                        }


                                        if (first2 % 2 == 0) {
                                            Icon(
                                                imageVector = Icons.Default.Favorite,
                                                contentDescription = null,
                                                tint = Color.Transparent,
                                                modifier = Modifier.size(40.dp)
                                            )
                                            Icon(
                                                imageVector = Icons.Default.FavoriteBorder,
                                                contentDescription = null,
                                                tint = Color.White,
                                                modifier = Modifier.size(40.dp)
                                            )
                                        }
                                        if (first2 % 2 == 1) {
                                            Icon(
                                                imageVector = Icons.Default.Favorite,
                                                contentDescription = null,
                                                tint = Color.White,
                                                modifier = Modifier.size(40.dp)
                                            )
                                            Icon(
                                                imageVector = Icons.Default.FavoriteBorder,
                                                contentDescription = null,
                                                tint = Color.White,
                                                modifier = Modifier.size(40.dp)
                                            )
                                        }


                                        if (first3 % 2 == 0) {
                                            Icon(
                                                imageVector = Icons.Default.Favorite,
                                                contentDescription = null,
                                                tint = Color.Transparent,
                                                modifier = Modifier.size(40.dp)
                                            )
                                            Icon(
                                                imageVector = Icons.Default.FavoriteBorder,
                                                contentDescription = null,
                                                tint = Color.White,
                                                modifier = Modifier.size(40.dp)
                                            )
                                        }
                                        if (first3 % 2 == 1) {
                                            Icon(
                                                imageVector = Icons.Default.Favorite,
                                                contentDescription = null,
                                                tint = Color.White,
                                                modifier = Modifier.size(40.dp)
                                            )
                                            Icon(
                                                imageVector = Icons.Default.FavoriteBorder,
                                                contentDescription = null,
                                                tint = Color.White,
                                                modifier = Modifier.size(40.dp)
                                            )
                                        }


                                        if (first4 % 2 == 0) {
                                            Icon(
                                                imageVector = Icons.Default.Favorite,
                                                contentDescription = null,
                                                tint = Color.Transparent,
                                                modifier = Modifier.size(40.dp)
                                            )
                                            Icon(
                                                imageVector = Icons.Default.FavoriteBorder,
                                                contentDescription = null,
                                                tint = Color.White,
                                                modifier = Modifier.size(40.dp)
                                            )
                                        }
                                        if (first4 % 2 == 1) {
                                            Icon(
                                                imageVector = Icons.Default.Favorite,
                                                contentDescription = null,
                                                tint = Color.White,
                                                modifier = Modifier.size(40.dp)
                                            )
                                            Icon(
                                                imageVector = Icons.Default.FavoriteBorder,
                                                contentDescription = null,
                                                tint = Color.White,
                                                modifier = Modifier.size(40.dp)
                                            )
                                        }
                                        if (first5 % 2 == 0) {
                                            Icon(
                                                imageVector = Icons.Default.Favorite,
                                                contentDescription = null,
                                                tint = Color.Transparent,
                                                modifier = Modifier.size(40.dp)
                                            )
                                            Icon(
                                                imageVector = Icons.Default.FavoriteBorder,
                                                contentDescription = null,
                                                tint = Color.White,
                                                modifier = Modifier.size(40.dp)
                                            )
                                        }
                                        if (first5 % 2 == 1) {
                                            Icon(
                                                imageVector = Icons.Default.Favorite,
                                                contentDescription = null,
                                                tint = Color.White,
                                                modifier = Modifier.size(40.dp)
                                            )
                                            Icon(
                                                imageVector = Icons.Default.FavoriteBorder,
                                                contentDescription = null,
                                                tint = Color.White,
                                                modifier = Modifier.size(40.dp)
                                            )
                                        }

                                        if (first6 % 2 == 1) {
                                            Icon(
                                                imageVector = Icons.Default.Favorite,
                                                contentDescription = null,
                                                tint = Color.White,
                                                modifier = Modifier.size(40.dp)
                                            )
                                            Icon(
                                                imageVector = Icons.Default.FavoriteBorder,
                                                contentDescription = null,
                                                tint = Color.White,
                                                modifier = Modifier.size(40.dp)
                                            )
                                        }
                                        if (first6 % 2 == 1) {
                                            Icon(
                                                imageVector = Icons.Default.Favorite,
                                                contentDescription = null,
                                                tint = Color.White,
                                                modifier = Modifier.size(40.dp)
                                            )
                                            Icon(
                                                imageVector = Icons.Default.FavoriteBorder,
                                                contentDescription = null,
                                                tint = Color.White,
                                                modifier = Modifier.size(40.dp)
                                            )
                                        }


                                        if (first7 % 2 == 1) {
                                            Icon(
                                                imageVector = Icons.Default.Favorite,
                                                contentDescription = null,
                                                tint = Color.White,
                                                modifier = Modifier.size(40.dp)
                                            )
                                            Icon(
                                                imageVector = Icons.Default.FavoriteBorder,
                                                contentDescription = null,
                                                tint = Color.White,
                                                modifier = Modifier.size(40.dp)
                                            )
                                        }
                                        if (first7 % 2 == 1) {
                                            Icon(
                                                imageVector = Icons.Default.Favorite,
                                                contentDescription = null,
                                                tint = Color.White,
                                                modifier = Modifier.size(40.dp)
                                            )
                                            Icon(
                                                imageVector = Icons.Default.FavoriteBorder,
                                                contentDescription = null,
                                                tint = Color.White,
                                                modifier = Modifier.size(40.dp)
                                            )
                                        }



                                        if (first8 % 2 == 1) {
                                            Icon(
                                                imageVector = Icons.Default.Favorite,
                                                contentDescription = null,
                                                tint = Color.White,
                                                modifier = Modifier.size(40.dp)
                                            )
                                            Icon(
                                                imageVector = Icons.Default.FavoriteBorder,
                                                contentDescription = null,
                                                tint = Color.White,
                                                modifier = Modifier.size(40.dp)
                                            )
                                        }
                                        if (first8 % 2 == 1) {
                                            Icon(
                                                imageVector = Icons.Default.Favorite,
                                                contentDescription = null,
                                                tint = Color.White,
                                                modifier = Modifier.size(40.dp)
                                            )
                                            Icon(
                                                imageVector = Icons.Default.FavoriteBorder,
                                                contentDescription = null,
                                                tint = Color.White,
                                                modifier = Modifier.size(40.dp)
                                            )
                                        }



                                        if (first9 % 2 == 1) {
                                            Icon(
                                                imageVector = Icons.Default.Favorite,
                                                contentDescription = null,
                                                tint = Color.White,
                                                modifier = Modifier.size(40.dp)
                                            )
                                            Icon(
                                                imageVector = Icons.Default.FavoriteBorder,
                                                contentDescription = null,
                                                tint = Color.White,
                                                modifier = Modifier.size(40.dp)
                                            )
                                        }
                                        if (first9 % 2 == 1) {
                                            Icon(
                                                imageVector = Icons.Default.Favorite,
                                                contentDescription = null,
                                                tint = Color.White,
                                                modifier = Modifier.size(40.dp)
                                            )
                                            Icon(
                                                imageVector = Icons.Default.FavoriteBorder,
                                                contentDescription = null,
                                                tint = Color.White,
                                                modifier = Modifier.size(40.dp)
                                            )
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}
@Composable
fun ElevenScreen() {
    Image(painter = painterResource(id = R.drawable.app_back)
        , contentScale = ContentScale.Crop , contentDescription = null)
    when(currentScreen) {
        "asli5" -> {
            Column {
                Card(
                    modifier = Modifier
                        .fillMaxWidth()
                        .height(32.5.dp),
                    shape = RectangleShape,
                    colors = CardDefaults.cardColors(containerColor = Color(0xFF030A33))
                ) {
                }
                Column() {
                    Card(
                        modifier = Modifier
                            .fillMaxWidth()
                            .height(50.dp),
                        shape = RectangleShape,
                        colors = CardDefaults.cardColors(containerColor = Color(0xFF0707AD))
                    ) {
                        Row(modifier = Modifier.padding(10.dp)) {
                            IconButton(onClick = { currentScreen = "home"
                                backap = true
                            }, modifier = Modifier.indication(indication = null ,
                                interactionSource = remember { MutableInteractionSource() }),
                                colors = IconButtonDefaults.iconButtonColors(contentColor = Color.White)) {
                                Icon(
                                    imageVector = Icons.Outlined.ArrowBack,
                                    contentDescription = null,
                                    modifier = Modifier.size(40.dp)
                                )
                            }
                            IconButton(
                                onClick = {},
                                colors = IconButtonDefaults.iconButtonColors(contentColor = Color.White),
                                modifier = Modifier.indication(indication = null ,
                                    interactionSource = remember { MutableInteractionSource() })
                            ) {
                                Icon(imageVector = Icons.Default.Info, contentDescription = null)
                            }
                            IconButton(
                                onClick = {currentScreen = "search"
                                    backap = false},
                                colors = IconButtonDefaults.iconButtonColors(contentColor = Color.White),
                                modifier = Modifier.indication(indication = null ,
                                    interactionSource = remember { MutableInteractionSource() })
                            ) {
                                Icon(imageVector = Icons.Default.Search, contentDescription = null)
                            }
                            Row(
                                modifier = Modifier.fillMaxWidth(),
                                horizontalArrangement = Arrangement.End,
                                verticalAlignment = Alignment.CenterVertically
                            ) {
                                Text("شهاب سنگ ها", fontSize = 20.sp, color = Color.White  , maxLines = 1 , fontWeight = FontWeight.ExtraBold)
                                IconButton(
                                    onClick = { expanded = true},
                                    modifier = Modifier.size(50.dp).indication(indication = null ,
                                        interactionSource = remember { MutableInteractionSource() }),
                                    colors = IconButtonDefaults.iconButtonColors(contentColor = Color.White)
                                ) {
                                    Icon(imageVector = Icons.Default.Menu, contentDescription = null)
                                }
                            }
                        }
                    }
                }
            }
            val esm = listOf(
                "شهاب سنگ سنگی",
                "شهاب سنگ آهنی",
                "شهاب سنگ سنگی آهنی",
                "دسته بندی شهاب سنگ ها",
                "نحوه ورود شهاب سنگ ها",
                "شهاب سنگ های معروف",
            )
            val language = listOf(
                painterResource(id = R.drawable.cometkotahdore),
                painterResource(id = R.drawable.cometbolanddore),
                painterResource(id = R.drawable.cometzodgozar),
                painterResource(id = R.drawable.cometsakhtar),
                painterResource(id = R.drawable.cometmanshae),
                painterResource(id = R.drawable.cometfamus),
            )
            val kameltar = esm.zip(language)
            Column(
                modifier = Modifier
                    .fillMaxSize(),
                horizontalAlignment = Alignment.CenterHorizontally
            ) {
                Text("")
                Text("")
                Text("")
                Text("")
                //بسیار چیز خفن
                LazyColumn() {
                    items(kameltar) { (letter, esmha) ->
                        Card(
                            modifier = Modifier
                                .padding(5.dp)
                                .height(100.dp)
                                .fillMaxWidth()
                                .clip(shape = RoundedCornerShape(100.dp))
                        ) {
                            Box(
                                modifier = Modifier.fillMaxSize(),
                                contentAlignment = Alignment.CenterEnd
                            ) {
                                Image(
                                    painter = painterResource(R.drawable.card),
                                    contentDescription = null, contentScale = ContentScale.Crop
                                )
                                Button(
                                    onClick = {
                                        if (letter == "شهاب سنگ سنگی") {
                                            backap = false
                                            currentScreen = "comekotah"
                                        }
                                        if (letter == "شهاب سنگ آهنی") {
                                            currentScreen = "comeboland"
                                            backap = false
                                        }
                                        if (letter == "شهاب سنگ سنگی آهنی") {
                                            backap = false
                                            currentScreen = "cometakgozar"
                                        }
                                        if (letter == "دسته بندی شهاب سنگ ها") {
                                            backap = false
                                            currentScreen = "comesakhtar"
                                        }
                                        if (letter == "نحوه ورود شهاب سنگ ها") {
                                            backap = false
                                            currentScreen = "comemanshae"
                                        }
                                        if (letter == "شهاب سنگ های معروف") {
                                            backap = false
                                            currentScreen = "comefamus"
                                        }
                                    }, modifier = Modifier.fillMaxSize().indication(interactionSource = remember { MutableInteractionSource() }
                                        , indication = null),
                                    colors = ButtonDefaults.buttonColors(containerColor = Color.Transparent)
                                ) {

                                }
                                Image(
                                    painter = esmha,
                                    contentDescription = null,
                                    modifier = Modifier
                                        .width(145.dp)
                                        .height(300.dp)
                                )
                                Box(contentAlignment = Alignment.Center) {
                                    Row() {
//                                    Spacer(modifier = Modifier.height(100.dp))
                                        Column() {
                                            Text(
                                                "   $letter",
                                                color = Color.White,
                                                fontSize = 20.sp,
                                                fontStyle = FontStyle.Italic
                                                , style = TextStyle(
                                                    shadow = Shadow(
                                                        color = Color(0xFFFFFFFF),
                                                        offset = Offset(0f ,0f)
                                                        , blurRadius = 20f
                                                    )
                                                ), fontWeight = FontWeight.ExtraLight
                                            )
                                        }
                                        Spacer(modifier = Modifier.width(130.dp))
                                    }
                                }
                                var first by remember { mutableStateOf(0) }
                                var first1 by remember { mutableStateOf(0) }
                                var first2 by remember { mutableStateOf(0) }
                                var first3 by remember { mutableStateOf(0) }
                                var first4 by remember { mutableStateOf(0) }
                                var first5 by remember { mutableStateOf(0) }
                                Box(
                                    contentAlignment = Alignment.CenterStart,
                                    modifier = Modifier
                                        .fillMaxSize()
                                        .padding(15.dp)
                                ) {
                                    IconButton(
                                        onClick = {
                                            if (letter == "شهاب سنگ سنگی") {
                                                first++
                                            }
                                            if (letter == "شهاب سنگ آهنی") {
                                                first1++
                                            }
                                            if (letter == "شهاب سنگ سنگی آهنی") {
                                                first2++
                                            }
                                            if (letter == "دسته بندی شهاب سنگ ها") {
                                                first3++
                                            }
                                            if (letter == "منشأ دنباله‌دارها") {
                                                first4++
                                            }
                                            if (letter == "شهاب سنگ های معروف") {
                                                first5++
                                            }
                                        }, modifier = Modifier.size(50.dp)
                                            .indication(indication = null ,
                                                interactionSource = remember { MutableInteractionSource() }),
                                    ) {
                                        if (first % 2 == 0) {
                                            Icon(
                                                imageVector = Icons.Default.Favorite,
                                                contentDescription = null,
                                                tint = Color.Transparent,
                                                modifier = Modifier.size(40.dp)
                                            )
                                            Icon(
                                                imageVector = Icons.Default.FavoriteBorder,
                                                contentDescription = null,
                                                tint = Color.White,
                                                modifier = Modifier.size(40.dp)
                                            )
                                        }
                                        if (first % 2 == 1) {
                                            Icon(
                                                imageVector = Icons.Default.Favorite,
                                                contentDescription = null,
                                                tint = Color.White,
                                                modifier = Modifier.size(40.dp)
                                            )
                                            Icon(
                                                imageVector = Icons.Default.FavoriteBorder,
                                                contentDescription = null,
                                                tint = Color.White,
                                                modifier = Modifier.size(40.dp)
                                            )
                                        }
                                        if (first1 % 2 == 0) {
                                            Icon(
                                                imageVector = Icons.Default.Favorite,
                                                contentDescription = null,
                                                tint = Color.Transparent,
                                                modifier = Modifier.size(40.dp)
                                            )
                                            Icon(
                                                imageVector = Icons.Default.FavoriteBorder,
                                                contentDescription = null,
                                                tint = Color.White,
                                                modifier = Modifier.size(40.dp)
                                            )
                                        }
                                        if (first1 % 2 == 1) {
                                            Icon(
                                                imageVector = Icons.Default.Favorite,
                                                contentDescription = null,
                                                tint = Color.White,
                                                modifier = Modifier.size(40.dp)
                                            )
                                            Icon(
                                                imageVector = Icons.Default.FavoriteBorder,
                                                contentDescription = null,
                                                tint = Color.White,
                                                modifier = Modifier.size(40.dp)
                                            )
                                        }
                                        if (first2 % 2 == 0) {
                                            Icon(
                                                imageVector = Icons.Default.Favorite,
                                                contentDescription = null,
                                                tint = Color.Transparent,
                                                modifier = Modifier.size(40.dp)
                                            )
                                            Icon(
                                                imageVector = Icons.Default.FavoriteBorder,
                                                contentDescription = null,
                                                tint = Color.White,
                                                modifier = Modifier.size(40.dp)
                                            )
                                        }
                                        if (first2 % 2 == 1) {
                                            Icon(
                                                imageVector = Icons.Default.Favorite,
                                                contentDescription = null,
                                                tint = Color.White,
                                                modifier = Modifier.size(40.dp)
                                            )
                                            Icon(
                                                imageVector = Icons.Default.FavoriteBorder,
                                                contentDescription = null,
                                                tint = Color.White,
                                                modifier = Modifier.size(40.dp)
                                            )
                                        }
                                        if (first3 % 2 == 0) {
                                            Icon(
                                                imageVector = Icons.Default.Favorite,
                                                contentDescription = null,
                                                tint = Color.Transparent,
                                                modifier = Modifier.size(40.dp)
                                            )
                                            Icon(
                                                imageVector = Icons.Default.FavoriteBorder,
                                                contentDescription = null,
                                                tint = Color.White,
                                                modifier = Modifier.size(40.dp)
                                            )
                                        }
                                        if (first3 % 2 == 1) {
                                            Icon(
                                                imageVector = Icons.Default.Favorite,
                                                contentDescription = null,
                                                tint = Color.White,
                                                modifier = Modifier.size(40.dp)
                                            )
                                            Icon(
                                                imageVector = Icons.Default.FavoriteBorder,
                                                contentDescription = null,
                                                tint = Color.White,
                                                modifier = Modifier.size(40.dp)
                                            )
                                        }


                                        if (first4 % 2 == 0) {
                                            Icon(
                                                imageVector = Icons.Default.Favorite,
                                                contentDescription = null,
                                                tint = Color.Transparent,
                                                modifier = Modifier.size(40.dp)
                                            )
                                            Icon(
                                                imageVector = Icons.Default.FavoriteBorder,
                                                contentDescription = null,
                                                tint = Color.White,
                                                modifier = Modifier.size(40.dp)
                                            )
                                        }
                                        if (first4 % 2 == 1) {
                                            Icon(
                                                imageVector = Icons.Default.Favorite,
                                                contentDescription = null,
                                                tint = Color.White,
                                                modifier = Modifier.size(40.dp)
                                            )
                                            Icon(
                                                imageVector = Icons.Default.FavoriteBorder,
                                                contentDescription = null,
                                                tint = Color.White,
                                                modifier = Modifier.size(40.dp)
                                            )
                                        }
                                        if (first5 % 2 == 0) {
                                            Icon(
                                                imageVector = Icons.Default.Favorite,
                                                contentDescription = null,
                                                tint = Color.Transparent,
                                                modifier = Modifier.size(40.dp)
                                            )
                                            Icon(
                                                imageVector = Icons.Default.FavoriteBorder,
                                                contentDescription = null,
                                                tint = Color.White,
                                                modifier = Modifier.size(40.dp)
                                            )
                                        }
                                        if (first5 % 2 == 1) {
                                            Icon(
                                                imageVector = Icons.Default.Favorite,
                                                contentDescription = null,
                                                tint = Color.White,
                                                modifier = Modifier.size(40.dp)
                                            )
                                            Icon(
                                                imageVector = Icons.Default.FavoriteBorder,
                                                contentDescription = null,
                                                tint = Color.White,
                                                modifier = Modifier.size(40.dp)
                                            )
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}

@Composable
fun SearchEwiew(){
    data class PlanetItem(val name: String, val image: Painter)
    Image(painter = painterResource(id = R.drawable.app_back)
        , contentScale = ContentScale.Crop
        , contentDescription = null,
        modifier = Modifier.fillMaxSize())
    when(currentScreen) {
        "search" -> {
            var bazsafhe by remember { mutableStateOf(false) }
            val planets = listOf(
                PlanetItem("عطارد", painterResource(id = R.drawable.atarod)),
                PlanetItem("زهره", painterResource(id = R.drawable.zohre)),
                PlanetItem("زمین", painterResource(id = R.drawable.zamin)),
                PlanetItem("مریخ", painterResource(id = R.drawable.merikh)),
                PlanetItem("مشتری", painterResource(id = R.drawable.moshtari)),
                PlanetItem("زحل", painterResource(id = R.drawable.zohal)),
                PlanetItem("اورانوس", painterResource(id = R.drawable.uranos)),
                PlanetItem("نپتون", painterResource(id = R.drawable.nepton)),
                PlanetItem("خورشیدی", painterResource(id = R.drawable.sun)),
                PlanetItem("پرنور و مشهور", painterResource(id = R.drawable.starlite)),
                PlanetItem("غول و ابرغول", painterResource(id = R.drawable.bigstar)),
                PlanetItem("کوتوله و داغ", painterResource(id = R.drawable.starlittle)),
                PlanetItem("نوترونی و انفجاری", painterResource(id = R.drawable.starnetrun)),
                PlanetItem("متغیر و خاص", painterResource(id = R.drawable.starvarible)),
                PlanetItem("مناطق ستاره زایی", painterResource(id = R.drawable.starnebula)),
                PlanetItem("اصول نظری", painterResource(id = R.drawable.starnazari)) ,
                PlanetItem("قمر های طبیعی", painterResource(id = R.drawable.moonnatural)),
                PlanetItem("قمر های مصنوعی", painterResource(id = R.drawable.moonartificioal)),
                PlanetItem("قمر های منظم", painterResource(id = R.drawable.moonregular)),
                PlanetItem("قمر های نامنظم", painterResource(id = R.drawable.mooniregular)),
                PlanetItem("قمر های دوگانه", painterResource(id = R.drawable.moon2gane)),
                PlanetItem("قمر های برخوردی", painterResource(id = R.drawable.moonbarkhordi)),
                PlanetItem("قمر های بین ستاره ای", painterResource(id = R.drawable.moonstari)),
                PlanetItem("سیارک های ترکیبی", painterResource(id = R.drawable.asteroidtarkibi)),
                PlanetItem("سیارک های طیفی", painterResource(id = R.drawable.astroidteifi)),
                PlanetItem("سیارک های نوری", painterResource(id = R.drawable.astroidnori)),
                PlanetItem("سیارک های فیزیکی", painterResource(id = R.drawable.astroidfiziki)),
                PlanetItem("سیارک های منشادار", painterResource(id = R.drawable.astroidmanshaedar)),
                PlanetItem("سیارک های مداری", painterResource(id = R.drawable.astroidmadari)),
                PlanetItem("سیارک های بازالتی", painterResource(id = R.drawable.astroidbazalati)),
                PlanetItem("دنباله‌دار کوتاه‌دوره", painterResource(id = R.drawable.cometkotahdore)),
                PlanetItem("دنباله‌دار بلند‌دوره", painterResource(id = R.drawable.cometbolanddore)),
                PlanetItem("دنباله‌دار تک‌گذر", painterResource(id = R.drawable.cometzodgozar)),
                PlanetItem("ساختار دنباله‌دارها", painterResource(id = R.drawable.cometsakhtar)),
                PlanetItem("منشأ دنباله‌دارها", painterResource(id = R.drawable.cometmanshae)),
                PlanetItem("دنباله‌دارهای معروف", painterResource(id = R.drawable.cometfamus)),
                PlanetItem("دنباله‌دار میانی", painterResource(id = R.drawable.comemiansetaree)),
                PlanetItem("چرخه‌ حیات دنباله‌دار", painterResource(id = R.drawable.comecharkhehayat)),
                PlanetItem("تأثیر دنباله‌دار بر زمین", painterResource(id = R.drawable.cometaethirbarzamin)),
                PlanetItem("مقایسه دنباله‌دارها", painterResource(id = R.drawable.cometmoghayese)),
                PlanetItem("شهاب سنگ سنگی", painterResource(id = R.drawable.cometmanshae)),
                PlanetItem("شهاب سنگ آهنی", painterResource(id = R.drawable.cometfamus)),
                PlanetItem("شهاب سنگ سنگی آهن", painterResource(id = R.drawable.comemiansetaree)),
                PlanetItem("دسته بندی شهاب سنگ ها", painterResource(id = R.drawable.comecharkhehayat)),
                PlanetItem("نحوه ورود شهاب سنگ ها", painterResource(id = R.drawable.cometaethirbarzamin)),
                PlanetItem("شهاب سنگ های معروف", painterResource(id = R.drawable.cometmoghayese)),
            )
            var textma by remember { mutableStateOf("") }
            val kameltar = planets.filter {it.name.contains (textma , ignoreCase = true) }
            Column {
                Card(
                    modifier = Modifier
                        .fillMaxWidth()
                        .height(32.5.dp),
                    shape = RectangleShape,
                    colors = CardDefaults.cardColors(containerColor = Color(0xFF030A33))
                ) {
                }
                Column() {
                    TextField(
                        value = textma,
                        onValueChange = {textma = it},
                        modifier = Modifier
                            .fillMaxWidth()
                            .height(50.dp), placeholder = {
                            Text("عبارت مورد نظر خود را وارد کنید   " , style = TextStyle(
                                textDirection = TextDirection.Rtl
                            ) , fontSize = 12.sp)},
                        shape = RectangleShape,
                        colors = TextFieldDefaults.colors(
                            focusedContainerColor = Color(0xFF0707AD),
                            unfocusedContainerColor = Color(0xFF0707AD),
                            focusedTextColor = Color.White,
                            unfocusedTextColor = Color.White
                        ), trailingIcon = {
                            Row(modifier = Modifier.padding(end = 10.dp)) {
                                IconButton(onClick = {} , colors = IconButtonDefaults.iconButtonColors(
                                    contentColor = Color.White
                                ) , modifier = Modifier.indication(indication = null ,
                                    interactionSource = remember { MutableInteractionSource() })
                                ) {
                                    Icon(imageVector = Icons.Default.Search , contentDescription = null)
                                }
                                IconButton(onClick = {expanded = true} , colors = IconButtonDefaults.iconButtonColors(
                                    contentColor = Color.White
                                ) , modifier = Modifier.indication(indication = null ,
                                    interactionSource = remember { MutableInteractionSource() })
                                ) {
                                    Icon(imageVector = Icons.Default.Menu , contentDescription = null)
                                }
                            }

                        } , leadingIcon = {
                            Row(modifier = Modifier.padding(start = 10.dp)) {
                                IconButton(onClick = {currentScreen =  "home"
                                    backap = true} , colors = IconButtonDefaults.iconButtonColors(
                                    contentColor = Color.White
                                ) ,  modifier = Modifier.indication(indication = null ,
                                    interactionSource = remember { MutableInteractionSource() })
                                ) {
                                    Icon(imageVector = Icons.Default.ArrowBack , contentDescription = null)
                                }
                                IconButton(onClick = {} , colors = IconButtonDefaults.iconButtonColors(
                                    contentColor = Color.White
                                ) , modifier = Modifier.indication(indication = null ,
                                    interactionSource = remember { MutableInteractionSource() })
                                ) {
                                    Icon(imageVector = Icons.Default.Info , contentDescription = null)
                                }
                            }
                        }, maxLines = 1, textStyle = TextStyle(
                            textDirection = TextDirection.Rtl,
                            shadow = Shadow(
                                color = Color(0xFFFFFFFF),
                                offset = Offset(0f ,0f)
                                , blurRadius = 20f
                            )
                        )
                    )
                }
            }
            if(textma == "") {
                bazsafhe = false
            }
            else{
                if(bazsafhe == false){
                    Box(modifier = Modifier.fillMaxSize() , contentAlignment = Alignment.Center){
                        CircularProgressIndicator(
                            color = Color.White
                        )
                    }
                    LaunchedEffect(Unit) {
                        delay(3000)
                        bazsafhe = true
                    }
                }
            }
            Box(modifier = Modifier.fillMaxSize()) {
                AnimatedVisibility(
                    visible = bazsafhe,
                    enter = slideInVertically(initialOffsetY = { +it },
                        animationSpec = tween(
                            400,
                            easing = FastOutSlowInEasing
                        )) + fadeIn(initialAlpha = 0f , animationSpec = tween(800)),
                    modifier = Modifier.fillMaxSize(),
                    exit = slideOutVertically(targetOffsetY = { +it },
                        animationSpec = tween(
                            400,
                            easing = FastOutSlowInEasing
                        ))
                ) {
                    Column(
                        modifier = Modifier
                            .fillMaxSize(),
                        horizontalAlignment = Alignment.CenterHorizontally
                    ) {
                        Text("")
                        Text("")
                        Text("")
                        Text("")
                        LazyColumn() {
                            items(kameltar) { (letter, esmha) ->
                                Card(
                                    modifier = Modifier
                                        .padding(5.dp)
                                        .height(100.dp)
                                        .fillMaxWidth()
                                        .clip(shape = RoundedCornerShape(100.dp))
                                ) {
                                    Box(
                                        modifier = Modifier.fillMaxSize(),
                                        contentAlignment = Alignment.CenterEnd
                                    ) {
                                        Image(
                                            painter = painterResource(R.drawable.card),
                                            contentDescription = null,
                                            contentScale = ContentScale.Crop
                                        )
                                        Button(
                                            onClick = {
                                                if (letter == "عطارد") {
                                                    currentScreen = "atarod"
                                                    backap = false
                                                }
                                                if (letter == "زهره") {
                                                    backap = false
                                                    currentScreen = "zohre"
                                                }
                                                if (letter == "زمین") {
                                                    currentScreen = "zamin"
                                                    backap = false
                                                }
                                                if (letter == "مریخ") {
                                                    backap = false
                                                    currentScreen = "merikh"
                                                }
                                                if (letter == "زحل") {
                                                    backap = false
                                                    currentScreen = "zohal"
                                                }
                                                if (letter == "مشتری") {
                                                    backap = false
                                                    currentScreen = "moshtari"
                                                }
                                                if (letter == "اورانوس") {
                                                    backap = false
                                                    currentScreen = "uranos"
                                                }
                                                if (letter == "نپتون") {
                                                    backap = false
                                                    currentScreen = "nepton"
                                                }
                                                if (letter == "خورشیدی") {
                                                    currentScreen = "sun"
                                                    backap = false
                                                }
                                                if (letter == "پرنور و مشهور") {
                                                    backap = false
                                                    currentScreen = "starlite"
                                                }
                                                if (letter == "غول و ابرغول") {
                                                    currentScreen = "starbig"
                                                    backap = false
                                                }
                                                if (letter == "کوتوله و داغ") {
                                                    backap = false
                                                    currentScreen = "starlittle"
                                                }
                                                if (letter == "نوترونی و انفجاری") {
                                                    backap = false
                                                    currentScreen = "starnetron"
                                                }
                                                if (letter == "متغیر و خاص") {
                                                    backap = false
                                                    currentScreen = "starvarible"
                                                }
                                                if (letter == "مناطق ستاره زایی") {
                                                    backap = false
                                                    currentScreen = "starnebula"
                                                }
                                                if (letter == "اصول نظری") {
                                                    backap = false
                                                    currentScreen = "starnazari"
                                                }
                                                if (letter == "قمر های طبیعی") {
                                                    currentScreen = "moonnatural"
                                                    backap = false
                                                }
                                                if (letter == "قمر های مصنوعی") {
                                                    backap = false
                                                    currentScreen = "moonartificional"
                                                }
                                                if (letter == "قمر های منظم") {
                                                    currentScreen = "moonregular"
                                                    backap = false
                                                }
                                                if (letter == "قمر های نامنظم") {
                                                    backap = false
                                                    currentScreen = "mooniregular"
                                                }
                                                if (letter == "قمر های دوگانه") {
                                                    backap = false
                                                    currentScreen = "moon2gane"
                                                }
                                                if (letter == "قمر های برخوردی") {
                                                    backap = false
                                                    currentScreen = "moonbarkhordi"
                                                }
                                                if (letter == "قمر های بین ستاره ای") {
                                                    backap = false
                                                    currentScreen = "moonstari"
                                                }
                                                if (letter == "سیارک های ترکیبی") {
                                                    currentScreen = "astroidtarkibi"
                                                    backap = false
                                                }
                                                if (letter == "سیارک های طیفی") {
                                                    backap = false
                                                    currentScreen = "astroidteifi"
                                                }
                                                if (letter == "سیارک های نوری") {
                                                    currentScreen = "astroidnoori"
                                                    backap = false
                                                }
                                                if (letter == "سیارک های فیزیکی") {
                                                    backap = false
                                                    currentScreen = "astroidfiziki"
                                                }
                                                if (letter == "سیارک های منشادار") {
                                                    backap = false
                                                    currentScreen = "astroidmanshaedar"
                                                }
                                                if (letter == "سیارک های مداری") {
                                                    backap = false
                                                    currentScreen = "astroidmadari"
                                                }
                                                if (letter == "سیارک های بازالتی") {
                                                    backap = false
                                                    currentScreen = "astroidbazalati"
                                                }
                                                if (letter == "دنباله‌دار کوتاه‌دوره") {
                                                    backap = false
                                                    currentScreen = "comekotah"
                                                }
                                                if (letter == "دنباله‌دار بلند‌دوره") {
                                                    currentScreen = "comeboland"
                                                    backap = false
                                                }
                                                if (letter == "دنباله‌دار تک‌گذر") {
                                                    backap = false
                                                    currentScreen = "cometakgozar"
                                                }
                                                if (letter == "ساختار دنباله‌دارها") {
                                                    backap = false
                                                    currentScreen = "comesakhtar"
                                                }
                                                if (letter == "منشأ دنباله‌دارها") {
                                                    backap = false
                                                    currentScreen = "comemanshae"
                                                }
                                                if (letter == "دنباله‌دارهای معروف") {
                                                    backap = false
                                                    currentScreen = "comefamus"
                                                }
                                                if (letter == "دنباله‌دار میانی") {
                                                    currentScreen = "comemiani"
                                                    backap = false
                                                }
                                                if (letter == "چرخه‌ حیات دنباله‌دار") {
                                                    backap = false
                                                    currentScreen = "comecharkhe"
                                                }
                                                if (letter == "تأثیر دنباله‌دار بر زمین") {
                                                    backap = false
                                                    currentScreen = "cometaethir"
                                                }
                                                if (letter == "مقایسه دنباله‌دارها") {
                                                    backap = false
                                                    currentScreen = "comemoghayese"
                                                }
                                            }, modifier = Modifier.fillMaxSize().indication(interactionSource = remember { MutableInteractionSource() }
                                                , indication = null),
                                            colors = ButtonDefaults.buttonColors(containerColor = Color.Transparent)
                                        ) {

                                        }
                                        Image(
                                            painter = esmha,
                                            contentDescription = null,
                                            modifier = Modifier
                                                .width(145.dp)
                                                .height(300.dp)
                                        )
                                        Box(contentAlignment = Alignment.Center) {
                                            Row() {
                                                Column() {
                                                    Text(
                                                        "          $letter",
                                                        color = Color.White,
                                                        fontSize = 25.sp,
                                                        fontStyle = FontStyle.Italic,
                                                        style = TextStyle(
                                                            shadow = Shadow(
                                                                color = Color(0xFFFFFFFF),
                                                                offset = Offset(0f, 0f),
                                                                blurRadius = 20f
                                                            )
                                                        ),
                                                        fontWeight = FontWeight.ExtraLight
                                                    )
                                                }
                                                Spacer(modifier = Modifier.width(150.dp))
                                            }
                                        }
                                        var first by remember { mutableStateOf(0) }
                                        var first1 by remember { mutableStateOf(0) }
                                        var first2 by remember { mutableStateOf(0) }
                                        var first3 by remember { mutableStateOf(0) }
                                        var first4 by remember { mutableStateOf(0) }
                                        var first5 by remember { mutableStateOf(0) }
                                        var first6 by remember { mutableStateOf(0) }
                                        var first7 by remember { mutableStateOf(0) }
                                        var first8 by remember { mutableStateOf(0) }
                                        var first9 by remember { mutableStateOf(0) }
                                        var first10 by remember { mutableStateOf(0) }
                                        var first11 by remember { mutableStateOf(0) }
                                        var first12 by remember { mutableStateOf(0) }
                                        var first13 by remember { mutableStateOf(0) }
                                        var first14 by remember { mutableStateOf(0) }
                                        var first15 by remember { mutableStateOf(0) }
                                        var first16 by remember { mutableStateOf(0) }
                                        var first17 by remember { mutableStateOf(0) }
                                        var first18 by remember { mutableStateOf(0) }
                                        var first19 by remember { mutableStateOf(0) }
                                        var first20 by remember { mutableStateOf(0) }
                                        var first21 by remember { mutableStateOf(0) }
                                        var first22 by remember { mutableStateOf(0) }
                                        var first23 by remember { mutableStateOf(0) }
                                        var first24 by remember { mutableStateOf(0) }
                                        var first25 by remember { mutableStateOf(0) }
                                        var first26 by remember { mutableStateOf(0) }
                                        var first27 by remember { mutableStateOf(0) }
                                        var first28 by remember { mutableStateOf(0) }
                                        var first29 by remember { mutableStateOf(0) }
                                        var first30 by remember { mutableStateOf(0) }
                                        var first31 by remember { mutableStateOf(0) }
                                        var first32 by remember { mutableStateOf(0) }
                                        var first33 by remember { mutableStateOf(0) }
                                        var first34 by remember { mutableStateOf(0) }
                                        var first35 by remember { mutableStateOf(0) }
                                        var first36 by remember { mutableStateOf(0) }
                                        var first37 by remember { mutableStateOf(0) }
                                        var first38 by remember { mutableStateOf(0) }
                                        var first39 by remember { mutableStateOf(0) }
                                        Box(
                                            contentAlignment = Alignment.CenterStart,
                                            modifier = Modifier
                                                .fillMaxSize()
                                                .padding(15.dp)
                                        ) {
                                            IconButton(
                                                onClick = {
                                                    if (letter == "عطارد") {
                                                        first++
                                                    }
                                                    if (letter == "زهره") {
                                                        first1++
                                                    }
                                                    if (letter == "زمین") {
                                                        first2++
                                                    }
                                                    if (letter == "مریخ") {
                                                        first3++
                                                    }
                                                    if (letter == "مشتری") {
                                                        first4++
                                                    }
                                                    if (letter == "زحل") {
                                                        first5++
                                                    }
                                                    if (letter == "اورانوس") {
                                                        first6++
                                                    }
                                                    if (letter == "نپتون") {
                                                        first7++
                                                    }
                                                    if (letter == "خورشیدی") {
                                                        first8++
                                                    }
                                                    if (letter == "پرنور و مشهور") {
                                                        first9++
                                                    }
                                                    if (letter == "غول و ابرغول") {
                                                        first10++
                                                    }
                                                    if (letter == "کوتوله و داغ") {
                                                        first11++
                                                    }
                                                    if (letter == "نوترونی و انفجاری") {
                                                        first12++
                                                    }
                                                    if (letter == "متغیر و خاص") {
                                                        first13++
                                                    }
                                                    if (letter == "مناطق ستاره زایی") {
                                                        first14++
                                                    }
                                                    if (letter == "اصول نظری") {
                                                        first15++
                                                    }
                                                    if (letter == "قمر های طبیعی") {
                                                        first16++
                                                    }
                                                    if (letter == "قمر های مصنوعی") {
                                                        first17++
                                                    }
                                                    if (letter == "قمر های منظم") {
                                                        first18++
                                                    }
                                                    if (letter == "قمر های نامنظم") {
                                                        first19++
                                                    }
                                                    if (letter == "قمر های دوگانه") {
                                                        first20++
                                                    }
                                                    if (letter == "قمر های برخوردی") {
                                                        first21++
                                                    }
                                                    if (letter == "قمر های بین ستاره ای") {
                                                        first22++
                                                    }
                                                    if (letter == "سیارک های ترکیبی") {
                                                        first23++
                                                    }
                                                    if (letter == "سیارک های طیفی") {
                                                        first24++
                                                    }
                                                    if (letter == "سیارک های نوری") {
                                                        first25++
                                                    }
                                                    if (letter == "سیارک های فیزیکی") {
                                                        first26++
                                                    }
                                                    if (letter == "سیارک های منشادار") {
                                                        first27++
                                                    }
                                                    if (letter == "سیارک های مداری") {
                                                        first28++
                                                    }
                                                    if (letter == "سیارک های بازالتی") {
                                                        first29++
                                                    }
                                                    if (letter == "دنباله‌دار کوتاه‌دوره") {
                                                        first30++
                                                    }
                                                    if (letter == "دنباله‌دار بلند‌دوره") {
                                                        first31++
                                                    }
                                                    if (letter == "دنباله‌دار تک‌گذر") {
                                                        first32++
                                                    }
                                                    if (letter == "ساختار دنباله‌دارها") {
                                                        first33++
                                                    }
                                                    if (letter == "منشأ دنباله‌دارها") {
                                                        first34++
                                                    }
                                                    if (letter == "دنباله‌دارهای معروف") {
                                                        first35++
                                                    }
                                                    if (letter == "دنباله‌دار میانی") {
                                                        first36++
                                                    }
                                                    if (letter == "چرخه‌ حیات دنباله‌دار") {
                                                        first37++
                                                    }
                                                    if (letter == "تأثیر دنباله‌دار بر زمین") {
                                                        first38++
                                                    }
                                                    if (letter == "مقایسه دنباله‌دارها") {
                                                        first39++
                                                    }
                                                },
                                                modifier = Modifier.size(50.dp)
                                                    .indication(indication = null ,
                                                        interactionSource = remember { MutableInteractionSource() }),
                                            ) {
                                                if (first % 2 == 0) {
                                                    Icon(
                                                        imageVector = Icons.Default.Favorite,
                                                        contentDescription = null,
                                                        tint = Color.Transparent,
                                                        modifier = Modifier.size(40.dp)
                                                    )
                                                    Icon(
                                                        imageVector = Icons.Default.FavoriteBorder,
                                                        contentDescription = null,
                                                        tint = Color.White,
                                                        modifier = Modifier.size(40.dp)
                                                    )
                                                }
                                                if (first % 2 == 1) {
                                                    Icon(
                                                        imageVector = Icons.Default.Favorite,
                                                        contentDescription = null,
                                                        tint = Color.White,
                                                        modifier = Modifier.size(40.dp)
                                                    )
                                                    Icon(
                                                        imageVector = Icons.Default.FavoriteBorder,
                                                        contentDescription = null,
                                                        tint = Color.White,
                                                        modifier = Modifier.size(40.dp)
                                                    )
                                                }


                                                if (first1 % 2 == 0) {
                                                    Icon(
                                                        imageVector = Icons.Default.Favorite,
                                                        contentDescription = null,
                                                        tint = Color.Transparent,
                                                        modifier = Modifier.size(40.dp)
                                                    )
                                                    Icon(
                                                        imageVector = Icons.Default.FavoriteBorder,
                                                        contentDescription = null,
                                                        tint = Color.White,
                                                        modifier = Modifier.size(40.dp)
                                                    )
                                                }
                                                if (first1 % 2 == 1) {
                                                    Icon(
                                                        imageVector = Icons.Default.Favorite,
                                                        contentDescription = null,
                                                        tint = Color.White,
                                                        modifier = Modifier.size(40.dp)
                                                    )
                                                    Icon(
                                                        imageVector = Icons.Default.FavoriteBorder,
                                                        contentDescription = null,
                                                        tint = Color.White,
                                                        modifier = Modifier.size(40.dp)
                                                    )
                                                }


                                                if (first2 % 2 == 0) {
                                                    Icon(
                                                        imageVector = Icons.Default.Favorite,
                                                        contentDescription = null,
                                                        tint = Color.Transparent,
                                                        modifier = Modifier.size(40.dp)
                                                    )
                                                    Icon(
                                                        imageVector = Icons.Default.FavoriteBorder,
                                                        contentDescription = null,
                                                        tint = Color.White,
                                                        modifier = Modifier.size(40.dp)
                                                    )
                                                }
                                                if (first2 % 2 == 1) {
                                                    Icon(
                                                        imageVector = Icons.Default.Favorite,
                                                        contentDescription = null,
                                                        tint = Color.White,
                                                        modifier = Modifier.size(40.dp)
                                                    )
                                                    Icon(
                                                        imageVector = Icons.Default.FavoriteBorder,
                                                        contentDescription = null,
                                                        tint = Color.White,
                                                        modifier = Modifier.size(40.dp)
                                                    )
                                                }


                                                if (first3 % 2 == 0) {
                                                    Icon(
                                                        imageVector = Icons.Default.Favorite,
                                                        contentDescription = null,
                                                        tint = Color.Transparent,
                                                        modifier = Modifier.size(40.dp)
                                                    )
                                                    Icon(
                                                        imageVector = Icons.Default.FavoriteBorder,
                                                        contentDescription = null,
                                                        tint = Color.White,
                                                        modifier = Modifier.size(40.dp)
                                                    )
                                                }
                                                if (first3 % 2 == 1) {
                                                    Icon(
                                                        imageVector = Icons.Default.Favorite,
                                                        contentDescription = null,
                                                        tint = Color.White,
                                                        modifier = Modifier.size(40.dp)
                                                    )
                                                    Icon(
                                                        imageVector = Icons.Default.FavoriteBorder,
                                                        contentDescription = null,
                                                        tint = Color.White,
                                                        modifier = Modifier.size(40.dp)
                                                    )
                                                }


                                                if (first4 % 2 == 0) {
                                                    Icon(
                                                        imageVector = Icons.Default.Favorite,
                                                        contentDescription = null,
                                                        tint = Color.Transparent,
                                                        modifier = Modifier.size(40.dp)
                                                    )
                                                    Icon(
                                                        imageVector = Icons.Default.FavoriteBorder,
                                                        contentDescription = null,
                                                        tint = Color.White,
                                                        modifier = Modifier.size(40.dp)
                                                    )
                                                }
                                                if (first4 % 2 == 1) {
                                                    Icon(
                                                        imageVector = Icons.Default.Favorite,
                                                        contentDescription = null,
                                                        tint = Color.White,
                                                        modifier = Modifier.size(40.dp)
                                                    )
                                                    Icon(
                                                        imageVector = Icons.Default.FavoriteBorder,
                                                        contentDescription = null,
                                                        tint = Color.White,
                                                        modifier = Modifier.size(40.dp)
                                                    )
                                                }


                                                if (first5 % 2 == 0) {
                                                    Icon(
                                                        imageVector = Icons.Default.Favorite,
                                                        contentDescription = null,
                                                        tint = Color.Transparent,
                                                        modifier = Modifier.size(40.dp)
                                                    )
                                                    Icon(
                                                        imageVector = Icons.Default.FavoriteBorder,
                                                        contentDescription = null,
                                                        tint = Color.White,
                                                        modifier = Modifier.size(40.dp)
                                                    )
                                                }
                                                if (first5 % 2 == 1) {
                                                    Icon(
                                                        imageVector = Icons.Default.Favorite,
                                                        contentDescription = null,
                                                        tint = Color.White,
                                                        modifier = Modifier.size(40.dp)
                                                    )
                                                    Icon(
                                                        imageVector = Icons.Default.FavoriteBorder,
                                                        contentDescription = null,
                                                        tint = Color.White,
                                                        modifier = Modifier.size(40.dp)
                                                    )
                                                }
                                                if (first6 % 2 == 0) {
                                                    Icon(
                                                        imageVector = Icons.Default.Favorite,
                                                        contentDescription = null,
                                                        tint = Color.Transparent,
                                                        modifier = Modifier.size(40.dp)
                                                    )
                                                    Icon(
                                                        imageVector = Icons.Default.FavoriteBorder,
                                                        contentDescription = null,
                                                        tint = Color.White,
                                                        modifier = Modifier.size(40.dp)
                                                    )
                                                }
                                                if (first6 % 2 == 1) {
                                                    Icon(
                                                        imageVector = Icons.Default.Favorite,
                                                        contentDescription = null,
                                                        tint = Color.White,
                                                        modifier = Modifier.size(40.dp)
                                                    )
                                                    Icon(
                                                        imageVector = Icons.Default.FavoriteBorder,
                                                        contentDescription = null,
                                                        tint = Color.White,
                                                        modifier = Modifier.size(40.dp)
                                                    )
                                                }
                                                if (first7 % 2 == 0) {
                                                    Icon(
                                                        imageVector = Icons.Default.Favorite,
                                                        contentDescription = null,
                                                        tint = Color.Transparent,
                                                        modifier = Modifier.size(40.dp)
                                                    )
                                                    Icon(
                                                        imageVector = Icons.Default.FavoriteBorder,
                                                        contentDescription = null,
                                                        tint = Color.White,
                                                        modifier = Modifier.size(40.dp)
                                                    )
                                                }
                                                if (first7 % 2 == 1) {
                                                    Icon(
                                                        imageVector = Icons.Default.Favorite,
                                                        contentDescription = null,
                                                        tint = Color.White,
                                                        modifier = Modifier.size(40.dp)
                                                    )
                                                    Icon(
                                                        imageVector = Icons.Default.FavoriteBorder,
                                                        contentDescription = null,
                                                        tint = Color.White,
                                                        modifier = Modifier.size(40.dp)
                                                    )
                                                }
                                                if (first8 % 2 == 0) {
                                                    Icon(
                                                        imageVector = Icons.Default.Favorite,
                                                        contentDescription = null,
                                                        tint = Color.Transparent,
                                                        modifier = Modifier.size(40.dp)
                                                    )
                                                    Icon(
                                                        imageVector = Icons.Default.FavoriteBorder,
                                                        contentDescription = null,
                                                        tint = Color.White,
                                                        modifier = Modifier.size(40.dp)
                                                    )
                                                }
                                                if (first8 % 2 == 1) {
                                                    Icon(
                                                        imageVector = Icons.Default.Favorite,
                                                        contentDescription = null,
                                                        tint = Color.White,
                                                        modifier = Modifier.size(40.dp)
                                                    )
                                                    Icon(
                                                        imageVector = Icons.Default.FavoriteBorder,
                                                        contentDescription = null,
                                                        tint = Color.White,
                                                        modifier = Modifier.size(40.dp)
                                                    )
                                                }
                                                if (first9 % 2 == 0) {
                                                    Icon(
                                                        imageVector = Icons.Default.Favorite,
                                                        contentDescription = null,
                                                        tint = Color.Transparent,
                                                        modifier = Modifier.size(40.dp)
                                                    )
                                                    Icon(
                                                        imageVector = Icons.Default.FavoriteBorder,
                                                        contentDescription = null,
                                                        tint = Color.White,
                                                        modifier = Modifier.size(40.dp)
                                                    )
                                                }
                                                if (first9 % 2 == 1) {
                                                    Icon(
                                                        imageVector = Icons.Default.Favorite,
                                                        contentDescription = null,
                                                        tint = Color.White,
                                                        modifier = Modifier.size(40.dp)
                                                    )
                                                    Icon(
                                                        imageVector = Icons.Default.FavoriteBorder,
                                                        contentDescription = null,
                                                        tint = Color.White,
                                                        modifier = Modifier.size(40.dp)
                                                    )
                                                }
                                                if (first10 % 2 == 0) {
                                                    Icon(
                                                        imageVector = Icons.Default.Favorite,
                                                        contentDescription = null,
                                                        tint = Color.Transparent,
                                                        modifier = Modifier.size(40.dp)
                                                    )
                                                    Icon(
                                                        imageVector = Icons.Default.FavoriteBorder,
                                                        contentDescription = null,
                                                        tint = Color.White,
                                                        modifier = Modifier.size(40.dp)
                                                    )
                                                }
                                                if (first10 % 2 == 1) {
                                                    Icon(
                                                        imageVector = Icons.Default.Favorite,
                                                        contentDescription = null,
                                                        tint = Color.White,
                                                        modifier = Modifier.size(40.dp)
                                                    )
                                                    Icon(
                                                        imageVector = Icons.Default.FavoriteBorder,
                                                        contentDescription = null,
                                                        tint = Color.White,
                                                        modifier = Modifier.size(40.dp)
                                                    )
                                                }
                                                if (first11 % 2 == 0) {
                                                    Icon(
                                                        imageVector = Icons.Default.Favorite,
                                                        contentDescription = null,
                                                        tint = Color.Transparent,
                                                        modifier = Modifier.size(40.dp)
                                                    )
                                                    Icon(
                                                        imageVector = Icons.Default.FavoriteBorder,
                                                        contentDescription = null,
                                                        tint = Color.White,
                                                        modifier = Modifier.size(40.dp)
                                                    )
                                                }
                                                if (first11 % 2 == 1) {
                                                    Icon(
                                                        imageVector = Icons.Default.Favorite,
                                                        contentDescription = null,
                                                        tint = Color.White,
                                                        modifier = Modifier.size(40.dp)
                                                    )
                                                    Icon(
                                                        imageVector = Icons.Default.FavoriteBorder,
                                                        contentDescription = null,
                                                        tint = Color.White,
                                                        modifier = Modifier.size(40.dp)
                                                    )
                                                }
                                                if (first12 % 2 == 0) {
                                                    Icon(
                                                        imageVector = Icons.Default.Favorite,
                                                        contentDescription = null,
                                                        tint = Color.Transparent,
                                                        modifier = Modifier.size(40.dp)
                                                    )
                                                    Icon(
                                                        imageVector = Icons.Default.FavoriteBorder,
                                                        contentDescription = null,
                                                        tint = Color.White,
                                                        modifier = Modifier.size(40.dp)
                                                    )
                                                }
                                                if (first12 % 2 == 1) {
                                                    Icon(
                                                        imageVector = Icons.Default.Favorite,
                                                        contentDescription = null,
                                                        tint = Color.White,
                                                        modifier = Modifier.size(40.dp)
                                                    )
                                                    Icon(
                                                        imageVector = Icons.Default.FavoriteBorder,
                                                        contentDescription = null,
                                                        tint = Color.White,
                                                        modifier = Modifier.size(40.dp)
                                                    )
                                                }
                                                if (first13 % 2 == 0) {
                                                    Icon(
                                                        imageVector = Icons.Default.Favorite,
                                                        contentDescription = null,
                                                        tint = Color.Transparent,
                                                        modifier = Modifier.size(40.dp)
                                                    )
                                                    Icon(
                                                        imageVector = Icons.Default.FavoriteBorder,
                                                        contentDescription = null,
                                                        tint = Color.White,
                                                        modifier = Modifier.size(40.dp)
                                                    )
                                                }
                                                if (first13 % 2 == 1) {
                                                    Icon(
                                                        imageVector = Icons.Default.Favorite,
                                                        contentDescription = null,
                                                        tint = Color.White,
                                                        modifier = Modifier.size(40.dp)
                                                    )
                                                    Icon(
                                                        imageVector = Icons.Default.FavoriteBorder,
                                                        contentDescription = null,
                                                        tint = Color.White,
                                                        modifier = Modifier.size(40.dp)
                                                    )
                                                }
                                                if (first14 % 2 == 0) {
                                                    Icon(
                                                        imageVector = Icons.Default.Favorite,
                                                        contentDescription = null,
                                                        tint = Color.Transparent,
                                                        modifier = Modifier.size(40.dp)
                                                    )
                                                    Icon(
                                                        imageVector = Icons.Default.FavoriteBorder,
                                                        contentDescription = null,
                                                        tint = Color.White,
                                                        modifier = Modifier.size(40.dp)
                                                    )
                                                }
                                                if (first14 % 2 == 1) {
                                                    Icon(
                                                        imageVector = Icons.Default.Favorite,
                                                        contentDescription = null,
                                                        tint = Color.White,
                                                        modifier = Modifier.size(40.dp)
                                                    )
                                                    Icon(
                                                        imageVector = Icons.Default.FavoriteBorder,
                                                        contentDescription = null,
                                                        tint = Color.White,
                                                        modifier = Modifier.size(40.dp)
                                                    )
                                                }
                                                if (first15 % 2 == 0) {
                                                    Icon(
                                                        imageVector = Icons.Default.Favorite,
                                                        contentDescription = null,
                                                        tint = Color.Transparent,
                                                        modifier = Modifier.size(40.dp)
                                                    )
                                                    Icon(
                                                        imageVector = Icons.Default.FavoriteBorder,
                                                        contentDescription = null,
                                                        tint = Color.White,
                                                        modifier = Modifier.size(40.dp)
                                                    )
                                                }
                                                if (first15 % 2 == 1) {
                                                    Icon(
                                                        imageVector = Icons.Default.Favorite,
                                                        contentDescription = null,
                                                        tint = Color.White,
                                                        modifier = Modifier.size(40.dp)
                                                    )
                                                    Icon(
                                                        imageVector = Icons.Default.FavoriteBorder,
                                                        contentDescription = null,
                                                        tint = Color.White,
                                                        modifier = Modifier.size(40.dp)
                                                    )
                                                }
                                                if (first16 % 2 == 0) {
                                                    Icon(
                                                        imageVector = Icons.Default.Favorite,
                                                        contentDescription = null,
                                                        tint = Color.Transparent,
                                                        modifier = Modifier.size(40.dp)
                                                    )
                                                    Icon(
                                                        imageVector = Icons.Default.FavoriteBorder,
                                                        contentDescription = null,
                                                        tint = Color.White,
                                                        modifier = Modifier.size(40.dp)
                                                    )
                                                }
                                                if (first16 % 2 == 1) {
                                                    Icon(
                                                        imageVector = Icons.Default.Favorite,
                                                        contentDescription = null,
                                                        tint = Color.White,
                                                        modifier = Modifier.size(40.dp)
                                                    )
                                                    Icon(
                                                        imageVector = Icons.Default.FavoriteBorder,
                                                        contentDescription = null,
                                                        tint = Color.White,
                                                        modifier = Modifier.size(40.dp)
                                                    )
                                                }
                                                if (first17 % 2 == 0) {
                                                    Icon(
                                                        imageVector = Icons.Default.Favorite,
                                                        contentDescription = null,
                                                        tint = Color.Transparent,
                                                        modifier = Modifier.size(40.dp)
                                                    )
                                                    Icon(
                                                        imageVector = Icons.Default.FavoriteBorder,
                                                        contentDescription = null,
                                                        tint = Color.White,
                                                        modifier = Modifier.size(40.dp)
                                                    )
                                                }
                                                if (first17 % 2 == 1) {
                                                    Icon(
                                                        imageVector = Icons.Default.Favorite,
                                                        contentDescription = null,
                                                        tint = Color.White,
                                                        modifier = Modifier.size(40.dp)
                                                    )
                                                    Icon(
                                                        imageVector = Icons.Default.FavoriteBorder,
                                                        contentDescription = null,
                                                        tint = Color.White,
                                                        modifier = Modifier.size(40.dp)
                                                    )
                                                }
                                                if (first18 % 2 == 0) {
                                                    Icon(
                                                        imageVector = Icons.Default.Favorite,
                                                        contentDescription = null,
                                                        tint = Color.Transparent,
                                                        modifier = Modifier.size(40.dp)
                                                    )
                                                    Icon(
                                                        imageVector = Icons.Default.FavoriteBorder,
                                                        contentDescription = null,
                                                        tint = Color.White,
                                                        modifier = Modifier.size(40.dp)
                                                    )
                                                }
                                                if (first18 % 2 == 1) {
                                                    Icon(
                                                        imageVector = Icons.Default.Favorite,
                                                        contentDescription = null,
                                                        tint = Color.White,
                                                        modifier = Modifier.size(40.dp)
                                                    )
                                                    Icon(
                                                        imageVector = Icons.Default.FavoriteBorder,
                                                        contentDescription = null,
                                                        tint = Color.White,
                                                        modifier = Modifier.size(40.dp)
                                                    )
                                                }
                                                if (first19 % 2 == 0) {
                                                    Icon(
                                                        imageVector = Icons.Default.Favorite,
                                                        contentDescription = null,
                                                        tint = Color.Transparent,
                                                        modifier = Modifier.size(40.dp)
                                                    )
                                                    Icon(
                                                        imageVector = Icons.Default.FavoriteBorder,
                                                        contentDescription = null,
                                                        tint = Color.White,
                                                        modifier = Modifier.size(40.dp)
                                                    )
                                                }
                                                if (first19 % 2 == 1) {
                                                    Icon(
                                                        imageVector = Icons.Default.Favorite,
                                                        contentDescription = null,
                                                        tint = Color.White,
                                                        modifier = Modifier.size(40.dp)
                                                    )
                                                    Icon(
                                                        imageVector = Icons.Default.FavoriteBorder,
                                                        contentDescription = null,
                                                        tint = Color.White,
                                                        modifier = Modifier.size(40.dp)
                                                    )
                                                }
                                                if (first20 % 2 == 0) {
                                                    Icon(
                                                        imageVector = Icons.Default.Favorite,
                                                        contentDescription = null,
                                                        tint = Color.Transparent,
                                                        modifier = Modifier.size(40.dp)
                                                    )
                                                    Icon(
                                                        imageVector = Icons.Default.FavoriteBorder,
                                                        contentDescription = null,
                                                        tint = Color.White,
                                                        modifier = Modifier.size(40.dp)
                                                    )
                                                }
                                                if (first20 % 2 == 1) {
                                                    Icon(
                                                        imageVector = Icons.Default.Favorite,
                                                        contentDescription = null,
                                                        tint = Color.White,
                                                        modifier = Modifier.size(40.dp)
                                                    )
                                                    Icon(
                                                        imageVector = Icons.Default.FavoriteBorder,
                                                        contentDescription = null,
                                                        tint = Color.White,
                                                        modifier = Modifier.size(40.dp)
                                                    )
                                                }
                                                if (first21 % 2 == 0) {
                                                    Icon(
                                                        imageVector = Icons.Default.Favorite,
                                                        contentDescription = null,
                                                        tint = Color.Transparent,
                                                        modifier = Modifier.size(40.dp)
                                                    )
                                                    Icon(
                                                        imageVector = Icons.Default.FavoriteBorder,
                                                        contentDescription = null,
                                                        tint = Color.White,
                                                        modifier = Modifier.size(40.dp)
                                                    )
                                                }
                                                if (first21 % 2 == 1) {
                                                    Icon(
                                                        imageVector = Icons.Default.Favorite,
                                                        contentDescription = null,
                                                        tint = Color.White,
                                                        modifier = Modifier.size(40.dp)
                                                    )
                                                    Icon(
                                                        imageVector = Icons.Default.FavoriteBorder,
                                                        contentDescription = null,
                                                        tint = Color.White,
                                                        modifier = Modifier.size(40.dp)
                                                    )
                                                }
                                                if (first22 % 2 == 0) {
                                                    Icon(
                                                        imageVector = Icons.Default.Favorite,
                                                        contentDescription = null,
                                                        tint = Color.Transparent,
                                                        modifier = Modifier.size(40.dp)
                                                    )
                                                    Icon(
                                                        imageVector = Icons.Default.FavoriteBorder,
                                                        contentDescription = null,
                                                        tint = Color.White,
                                                        modifier = Modifier.size(40.dp)
                                                    )
                                                }
                                                if (first22 % 2 == 1) {
                                                    Icon(
                                                        imageVector = Icons.Default.Favorite,
                                                        contentDescription = null,
                                                        tint = Color.White,
                                                        modifier = Modifier.size(40.dp)
                                                    )
                                                    Icon(
                                                        imageVector = Icons.Default.FavoriteBorder,
                                                        contentDescription = null,
                                                        tint = Color.White,
                                                        modifier = Modifier.size(40.dp)
                                                    )
                                                }
                                                if (first23 % 2 == 0) {
                                                    Icon(
                                                        imageVector = Icons.Default.Favorite,
                                                        contentDescription = null,
                                                        tint = Color.Transparent,
                                                        modifier = Modifier.size(40.dp)
                                                    )
                                                    Icon(
                                                        imageVector = Icons.Default.FavoriteBorder,
                                                        contentDescription = null,
                                                        tint = Color.White,
                                                        modifier = Modifier.size(40.dp)
                                                    )
                                                }
                                                if (first23 % 2 == 1) {
                                                    Icon(
                                                        imageVector = Icons.Default.Favorite,
                                                        contentDescription = null,
                                                        tint = Color.White,
                                                        modifier = Modifier.size(40.dp)
                                                    )
                                                    Icon(
                                                        imageVector = Icons.Default.FavoriteBorder,
                                                        contentDescription = null,
                                                        tint = Color.White,
                                                        modifier = Modifier.size(40.dp)
                                                    )
                                                }
                                                if (first24 % 2 == 0) {
                                                    Icon(
                                                        imageVector = Icons.Default.Favorite,
                                                        contentDescription = null,
                                                        tint = Color.Transparent,
                                                        modifier = Modifier.size(40.dp)
                                                    )
                                                    Icon(
                                                        imageVector = Icons.Default.FavoriteBorder,
                                                        contentDescription = null,
                                                        tint = Color.White,
                                                        modifier = Modifier.size(40.dp)
                                                    )
                                                }
                                                if (first24 % 2 == 1) {
                                                    Icon(
                                                        imageVector = Icons.Default.Favorite,
                                                        contentDescription = null,
                                                        tint = Color.White,
                                                        modifier = Modifier.size(40.dp)
                                                    )
                                                    Icon(
                                                        imageVector = Icons.Default.FavoriteBorder,
                                                        contentDescription = null,
                                                        tint = Color.White,
                                                        modifier = Modifier.size(40.dp)
                                                    )
                                                }
                                                if (first25 % 2 == 0) {
                                                    Icon(
                                                        imageVector = Icons.Default.Favorite,
                                                        contentDescription = null,
                                                        tint = Color.Transparent,
                                                        modifier = Modifier.size(40.dp)
                                                    )
                                                    Icon(
                                                        imageVector = Icons.Default.FavoriteBorder,
                                                        contentDescription = null,
                                                        tint = Color.White,
                                                        modifier = Modifier.size(40.dp)
                                                    )
                                                }
                                                if (first25 % 2 == 1) {
                                                    Icon(
                                                        imageVector = Icons.Default.Favorite,
                                                        contentDescription = null,
                                                        tint = Color.White,
                                                        modifier = Modifier.size(40.dp)
                                                    )
                                                    Icon(
                                                        imageVector = Icons.Default.FavoriteBorder,
                                                        contentDescription = null,
                                                        tint = Color.White,
                                                        modifier = Modifier.size(40.dp)
                                                    )
                                                }
                                                if (first26 % 2 == 0) {
                                                    Icon(
                                                        imageVector = Icons.Default.Favorite,
                                                        contentDescription = null,
                                                        tint = Color.Transparent,
                                                        modifier = Modifier.size(40.dp)
                                                    )
                                                    Icon(
                                                        imageVector = Icons.Default.FavoriteBorder,
                                                        contentDescription = null,
                                                        tint = Color.White,
                                                        modifier = Modifier.size(40.dp)
                                                    )
                                                }
                                                if (first26 % 2 == 1) {
                                                    Icon(
                                                        imageVector = Icons.Default.Favorite,
                                                        contentDescription = null,
                                                        tint = Color.White,
                                                        modifier = Modifier.size(40.dp)
                                                    )
                                                    Icon(
                                                        imageVector = Icons.Default.FavoriteBorder,
                                                        contentDescription = null,
                                                        tint = Color.White,
                                                        modifier = Modifier.size(40.dp)
                                                    )
                                                }
                                                if (first27 % 2 == 0) {
                                                    Icon(
                                                        imageVector = Icons.Default.Favorite,
                                                        contentDescription = null,
                                                        tint = Color.Transparent,
                                                        modifier = Modifier.size(40.dp)
                                                    )
                                                    Icon(
                                                        imageVector = Icons.Default.FavoriteBorder,
                                                        contentDescription = null,
                                                        tint = Color.White,
                                                        modifier = Modifier.size(40.dp)
                                                    )
                                                }
                                                if (first27 % 2 == 1) {
                                                    Icon(
                                                        imageVector = Icons.Default.Favorite,
                                                        contentDescription = null,
                                                        tint = Color.White,
                                                        modifier = Modifier.size(40.dp)
                                                    )
                                                    Icon(
                                                        imageVector = Icons.Default.FavoriteBorder,
                                                        contentDescription = null,
                                                        tint = Color.White,
                                                        modifier = Modifier.size(40.dp)
                                                    )
                                                }
                                                if (first28 % 2 == 0) {
                                                    Icon(
                                                        imageVector = Icons.Default.Favorite,
                                                        contentDescription = null,
                                                        tint = Color.Transparent,
                                                        modifier = Modifier.size(40.dp)
                                                    )
                                                    Icon(
                                                        imageVector = Icons.Default.FavoriteBorder,
                                                        contentDescription = null,
                                                        tint = Color.White,
                                                        modifier = Modifier.size(40.dp)
                                                    )
                                                }
                                                if (first28 % 2 == 1) {
                                                    Icon(
                                                        imageVector = Icons.Default.Favorite,
                                                        contentDescription = null,
                                                        tint = Color.White,
                                                        modifier = Modifier.size(40.dp)
                                                    )
                                                    Icon(
                                                        imageVector = Icons.Default.FavoriteBorder,
                                                        contentDescription = null,
                                                        tint = Color.White,
                                                        modifier = Modifier.size(40.dp)
                                                    )
                                                }
                                                if (first29 % 2 == 0) {
                                                    Icon(
                                                        imageVector = Icons.Default.Favorite,
                                                        contentDescription = null,
                                                        tint = Color.Transparent,
                                                        modifier = Modifier.size(40.dp)
                                                    )
                                                    Icon(
                                                        imageVector = Icons.Default.FavoriteBorder,
                                                        contentDescription = null,
                                                        tint = Color.White,
                                                        modifier = Modifier.size(40.dp)
                                                    )
                                                }
                                                if (first29 % 2 == 1) {
                                                    Icon(
                                                        imageVector = Icons.Default.Favorite,
                                                        contentDescription = null,
                                                        tint = Color.White,
                                                        modifier = Modifier.size(40.dp)
                                                    )
                                                    Icon(
                                                        imageVector = Icons.Default.FavoriteBorder,
                                                        contentDescription = null,
                                                        tint = Color.White,
                                                        modifier = Modifier.size(40.dp)
                                                    )
                                                }
                                                if (first30 % 2 == 0) {
                                                    Icon(
                                                        imageVector = Icons.Default.Favorite,
                                                        contentDescription = null,
                                                        tint = Color.Transparent,
                                                        modifier = Modifier.size(40.dp)
                                                    )
                                                    Icon(
                                                        imageVector = Icons.Default.FavoriteBorder,
                                                        contentDescription = null,
                                                        tint = Color.White,
                                                        modifier = Modifier.size(40.dp)
                                                    )
                                                }
                                                if (first30 % 2 == 1) {
                                                    Icon(
                                                        imageVector = Icons.Default.Favorite,
                                                        contentDescription = null,
                                                        tint = Color.White,
                                                        modifier = Modifier.size(40.dp)
                                                    )
                                                    Icon(
                                                        imageVector = Icons.Default.FavoriteBorder,
                                                        contentDescription = null,
                                                        tint = Color.White,
                                                        modifier = Modifier.size(40.dp)
                                                    )
                                                }
                                                if (first31 % 2 == 0) {
                                                    Icon(
                                                        imageVector = Icons.Default.Favorite,
                                                        contentDescription = null,
                                                        tint = Color.Transparent,
                                                        modifier = Modifier.size(40.dp)
                                                    )
                                                    Icon(
                                                        imageVector = Icons.Default.FavoriteBorder,
                                                        contentDescription = null,
                                                        tint = Color.White,
                                                        modifier = Modifier.size(40.dp)
                                                    )
                                                }
                                                if (first31 % 2 == 1) {
                                                    Icon(
                                                        imageVector = Icons.Default.Favorite,
                                                        contentDescription = null,
                                                        tint = Color.White,
                                                        modifier = Modifier.size(40.dp)
                                                    )
                                                    Icon(
                                                        imageVector = Icons.Default.FavoriteBorder,
                                                        contentDescription = null,
                                                        tint = Color.White,
                                                        modifier = Modifier.size(40.dp)
                                                    )
                                                }
                                                if (first32 % 2 == 0) {
                                                    Icon(
                                                        imageVector = Icons.Default.Favorite,
                                                        contentDescription = null,
                                                        tint = Color.Transparent,
                                                        modifier = Modifier.size(40.dp)
                                                    )
                                                    Icon(
                                                        imageVector = Icons.Default.FavoriteBorder,
                                                        contentDescription = null,
                                                        tint = Color.White,
                                                        modifier = Modifier.size(40.dp)
                                                    )
                                                }
                                                if (first32 % 2 == 1) {
                                                    Icon(
                                                        imageVector = Icons.Default.Favorite,
                                                        contentDescription = null,
                                                        tint = Color.White,
                                                        modifier = Modifier.size(40.dp)
                                                    )
                                                    Icon(
                                                        imageVector = Icons.Default.FavoriteBorder,
                                                        contentDescription = null,
                                                        tint = Color.White,
                                                        modifier = Modifier.size(40.dp)
                                                    )
                                                }
                                                if (first33 % 2 == 0) {
                                                    Icon(
                                                        imageVector = Icons.Default.Favorite,
                                                        contentDescription = null,
                                                        tint = Color.Transparent,
                                                        modifier = Modifier.size(40.dp)
                                                    )
                                                    Icon(
                                                        imageVector = Icons.Default.FavoriteBorder,
                                                        contentDescription = null,
                                                        tint = Color.White,
                                                        modifier = Modifier.size(40.dp)
                                                    )
                                                }
                                                if (first33 % 2 == 1) {
                                                    Icon(
                                                        imageVector = Icons.Default.Favorite,
                                                        contentDescription = null,
                                                        tint = Color.White,
                                                        modifier = Modifier.size(40.dp)
                                                    )
                                                    Icon(
                                                        imageVector = Icons.Default.FavoriteBorder,
                                                        contentDescription = null,
                                                        tint = Color.White,
                                                        modifier = Modifier.size(40.dp)
                                                    )
                                                }
                                                if (first34 % 2 == 0) {
                                                    Icon(
                                                        imageVector = Icons.Default.Favorite,
                                                        contentDescription = null,
                                                        tint = Color.Transparent,
                                                        modifier = Modifier.size(40.dp)
                                                    )
                                                    Icon(
                                                        imageVector = Icons.Default.FavoriteBorder,
                                                        contentDescription = null,
                                                        tint = Color.White,
                                                        modifier = Modifier.size(40.dp)
                                                    )
                                                }
                                                if (first34 % 2 == 1) {
                                                    Icon(
                                                        imageVector = Icons.Default.Favorite,
                                                        contentDescription = null,
                                                        tint = Color.White,
                                                        modifier = Modifier.size(40.dp)
                                                    )
                                                    Icon(
                                                        imageVector = Icons.Default.FavoriteBorder,
                                                        contentDescription = null,
                                                        tint = Color.White,
                                                        modifier = Modifier.size(40.dp)
                                                    )
                                                }
                                                if (first35 % 2 == 0) {
                                                    Icon(
                                                        imageVector = Icons.Default.Favorite,
                                                        contentDescription = null,
                                                        tint = Color.Transparent,
                                                        modifier = Modifier.size(40.dp)
                                                    )
                                                    Icon(
                                                        imageVector = Icons.Default.FavoriteBorder,
                                                        contentDescription = null,
                                                        tint = Color.White,
                                                        modifier = Modifier.size(40.dp)
                                                    )
                                                }
                                                if (first35 % 2 == 1) {
                                                    Icon(
                                                        imageVector = Icons.Default.Favorite,
                                                        contentDescription = null,
                                                        tint = Color.White,
                                                        modifier = Modifier.size(40.dp)
                                                    )
                                                    Icon(
                                                        imageVector = Icons.Default.FavoriteBorder,
                                                        contentDescription = null,
                                                        tint = Color.White,
                                                        modifier = Modifier.size(40.dp)
                                                    )
                                                }
                                                if (first36 % 2 == 0) {
                                                    Icon(
                                                        imageVector = Icons.Default.Favorite,
                                                        contentDescription = null,
                                                        tint = Color.Transparent,
                                                        modifier = Modifier.size(40.dp)
                                                    )
                                                    Icon(
                                                        imageVector = Icons.Default.FavoriteBorder,
                                                        contentDescription = null,
                                                        tint = Color.White,
                                                        modifier = Modifier.size(40.dp)
                                                    )
                                                }
                                                if (first36 % 2 == 1) {
                                                    Icon(
                                                        imageVector = Icons.Default.Favorite,
                                                        contentDescription = null,
                                                        tint = Color.White,
                                                        modifier = Modifier.size(40.dp)
                                                    )
                                                    Icon(
                                                        imageVector = Icons.Default.FavoriteBorder,
                                                        contentDescription = null,
                                                        tint = Color.White,
                                                        modifier = Modifier.size(40.dp)
                                                    )
                                                }
                                                if (first37 % 2 == 0) {
                                                    Icon(
                                                        imageVector = Icons.Default.Favorite,
                                                        contentDescription = null,
                                                        tint = Color.Transparent,
                                                        modifier = Modifier.size(40.dp)
                                                    )
                                                    Icon(
                                                        imageVector = Icons.Default.FavoriteBorder,
                                                        contentDescription = null,
                                                        tint = Color.White,
                                                        modifier = Modifier.size(40.dp)
                                                    )
                                                }
                                                if (first37 % 2 == 1) {
                                                    Icon(
                                                        imageVector = Icons.Default.Favorite,
                                                        contentDescription = null,
                                                        tint = Color.White,
                                                        modifier = Modifier.size(40.dp)
                                                    )
                                                    Icon(
                                                        imageVector = Icons.Default.FavoriteBorder,
                                                        contentDescription = null,
                                                        tint = Color.White,
                                                        modifier = Modifier.size(40.dp)
                                                    )
                                                }
                                                if (first38 % 2 == 0) {
                                                    Icon(
                                                        imageVector = Icons.Default.Favorite,
                                                        contentDescription = null,
                                                        tint = Color.Transparent,
                                                        modifier = Modifier.size(40.dp)
                                                    )
                                                    Icon(
                                                        imageVector = Icons.Default.FavoriteBorder,
                                                        contentDescription = null,
                                                        tint = Color.White,
                                                        modifier = Modifier.size(40.dp)
                                                    )
                                                }
                                                if (first38 % 2 == 1) {
                                                    Icon(
                                                        imageVector = Icons.Default.Favorite,
                                                        contentDescription = null,
                                                        tint = Color.White,
                                                        modifier = Modifier.size(40.dp)
                                                    )
                                                    Icon(
                                                        imageVector = Icons.Default.FavoriteBorder,
                                                        contentDescription = null,
                                                        tint = Color.White,
                                                        modifier = Modifier.size(40.dp)
                                                    )
                                                }
                                                if (first39 % 2 == 0) {
                                                    Icon(
                                                        imageVector = Icons.Default.Favorite,
                                                        contentDescription = null,
                                                        tint = Color.Transparent,
                                                        modifier = Modifier.size(40.dp)
                                                    )
                                                    Icon(
                                                        imageVector = Icons.Default.FavoriteBorder,
                                                        contentDescription = null,
                                                        tint = Color.White,
                                                        modifier = Modifier.size(40.dp)
                                                    )
                                                }
                                                if (first39 % 2 == 1) {
                                                    Icon(
                                                        imageVector = Icons.Default.Favorite,
                                                        contentDescription = null,
                                                        tint = Color.White,
                                                        modifier = Modifier.size(40.dp)
                                                    )
                                                    Icon(
                                                        imageVector = Icons.Default.FavoriteBorder,
                                                        contentDescription = null,
                                                        tint = Color.White,
                                                        modifier = Modifier.size(40.dp)
                                                    )
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}






























//سیاره ها



















@Composable
fun Zamin(){
    Image(
        painter = painterResource(id = R.drawable.app_back),
        contentDescription = null,
        contentScale = ContentScale.Crop
    )
    when(currentScreen) {
        "zamin" -> {
            Column {
                Card(
                    modifier = Modifier
                        .fillMaxWidth()
                        .height(32.5.dp),
                    shape = RectangleShape,
                    colors = CardDefaults.cardColors(containerColor = Color(0xFF030A33))
                ) {
                }
                Column(){
                    Card(
                        modifier = Modifier
                            .fillMaxWidth()
                            .height(50.dp),
                        shape = RectangleShape,
                        colors = CardDefaults.cardColors(containerColor = Color(0xFF0707AD))
                    ) {
                        Row(modifier = Modifier.padding(10.dp)) {
                            IconButton(onClick = {currentScreen = "asli"
                                backap = true
                            } , colors = IconButtonDefaults.iconButtonColors(contentColor = Color.White) , modifier =
                                Modifier.indication(interactionSource = remember { MutableInteractionSource() }
                                    , indication = null)){
                                Icon(imageVector = Icons.Outlined.ArrowBack, contentDescription = null , modifier = Modifier.size(40.dp))
                            }
                            IconButton(
                                onClick = {},
                                colors = IconButtonDefaults.iconButtonColors(contentColor = Color.White)
                                , modifier =
                                    Modifier.indication(interactionSource = remember { MutableInteractionSource() }
                                        , indication = null)
                            ) {
                                Icon(imageVector = Icons.Default.Info, contentDescription = null)
                            }
                            IconButton(
                                onClick = {},
                                colors = IconButtonDefaults.iconButtonColors(contentColor = Color.White)
                                , modifier =
                                    Modifier.indication(interactionSource = remember { MutableInteractionSource() }
                                        , indication = null)
                            ) {
                                Icon(imageVector = Icons.Default.Share, contentDescription = null)
                            }
                            Row(
                                modifier = Modifier.fillMaxWidth(),
                                horizontalArrangement = Arrangement.End,
                                verticalAlignment = Alignment.CenterVertically
                            ) {
                                Text("زمین", fontSize = 20.sp, color = Color.White  , maxLines = 1 , fontWeight = FontWeight.ExtraBold)
                                IconButton(onClick = {expanded = true},
                                    modifier = Modifier.size(50.dp).indication(interactionSource = remember { MutableInteractionSource() }
                                        , indication = null),
                                    colors = IconButtonDefaults.iconButtonColors(contentColor = Color.White)) {
                                    Icon(imageVector = Icons.Default.Menu, contentDescription = null)
                                }
                            }
                        }
                    }
                }


                var textazamin = listOf(": معرفی کلی\n" +
                        "\n" +
                        "سومین سیاره از خورشید، تنها سیاره شناخته شده با حیاط فعال در منظومه شمسی است: به همین دلیل، سیاره زنده یا ابی نامیده میشود. فاصله متوسط آن از خورشید برابر با ۱ واحد نجومی (۱۵۰ میلیون کیلومتر) است. هر ۳۶۵.۲۵ یکبار به دور خورشید میگردد و هر ۲۳.۹۳۴ ساعت معادل (۲۴ ساعت) یک دور کامل حول محور خود میگردد\u202b." +
                        "\n" +
                        "\n" +
                        "\n" +
                        ": ساختار و ابعاد\n" +
                        "\n" +
                        "شعاع میانگین ~۶۳۷۱ کیلومتر، قطر استوایی ~۱۲۷۵۶ کیلومتر. " +
                        "جرم کل ≈۵.۹۷×۱۰^۲۴ کیلوگرم. " +
                        "چگالی میانگین ~۵.۵۱ گرم بر سانتی‌متر مکعب (بالاترین دانسیته بین سیارات). " +
                        "هسته‌ای آهن-نیکل با دو بخش جامد و مایع دارد: هسته داخلی (جامد) ~۱۲۲۰ کیلومتر و هسته بیرونی (مایع) ~۳۴۸۰ کیلومتر شعاع دارد\u202b." +
                        "\n" +
                        "\n" +
                        "\n" +
                        ": سطح و ویژگی\u200Cهای زمینی آن\n" +
                        "\n" +
                        "۷۰٪ سطح با آب (اقیانوس‌ها، دریاها، یخ‌ها) و ۳۰٪ با خشکی پوشیده شده. " +
                        "دارای کوه‌ها (مثل اورست)، دره‌ها، آتشفشان‌ها، رودخانه‌ها و بیابان‌هاست. " +
                        "بیش از ۵۰۰۰ گونه معدنی شناخته‌شده دارد. " +
                        "حرکات تکتونیکی، آتشفشان‌ها و فرسایش شکل‌دهنده سطح هستند\u202b." +
                        "\n" +
                        "\n" +
                        "\n" +
                        ": مدار و چرخش\n" +
                        "\n" +
                        "مدار زمین تقریباً دایره‌ای است؛ فاصله آن از خورشید از ~۱۴۷ تا ~۱۵۲ میلیون کیلومتر متغیر است. " +
                        "محور چرخش با زاویه ~۲۳.۵ درجه کج است، که باعث ایجاد فصل‌ها می‌شود. " +
                        "طول یک سال = ۳۶۵.۲۵ روز، و یک روز = ۲۴ ساعت (چرخش محوری)\u202b." +
                        "\n" +
                        "\n" +
                        "\n" +
                        ": دما و شرایط سطح\n" +
                        "\n" +
                        "میانگین دمای سطح ~۱۵ درجه سلسیوس. " +
                        "بیشینه ثبت‌شده ~۵۶.۷ و کمینه ~−۸۹.۲ درجه سلسیوس. " +
                        "جو، ابرها، اقیانوس‌ها و چرخه کربن در تنظیم دما نقش دارند. " +
                        "وجود مناطق اقلیمی متنوع: گرم‌سیری، معتدل، قطبی، خشک و کوهستانی\u202b." +
                        "\n" +
                        "\n" +
                        "\n" +
                        ": جو و میدان مغناطیسی\n" +
                        "\n" +
                        "جو متشکل از ~۷۸٪ نیتروژن، ~۲۱٪ اکسیژن، ~۱٪ آرگون، بخار آب، CO₂ و گازهای جزئی دیگر. " +
                        "پنج لایه دارد: تروپوسفر، استراتوسفر، مزوسفر، ترموسفر و اگزوسفر. " +
                        "میدان مغناطیسی قوی ناشی از هسته بیرونی مایع؛ نقش حیاتی در محافظت از سطح در برابر پرتوهای کیهانی دارد\u202b." +
                        "\n" +
                        "\n" +
                        "\n" +
                        ": مأموریت\u200Cهای فضایی\n" +
                        "\n" +
                        "تمامی مأموریت‌های انسانی و روباتیک از زمین آغاز می‌شوند. " +
                        "ماهواره‌های هواشناسی، مخابراتی، سنجش از دور، و ایستگاه فضایی بین‌المللی (ISS) در مدار آن هستند. " +
                        "آزمایشات ژئوفیزیکی، سنجش جوی، بررسی تغییرات اقلیمی و رصد نجومی بخشی از کاربردهای مأموریت‌های زمینی هستند\u202b." +
                        "\n" +
                        "\n" +
                        "\n" +
                        ": ترکیب شیمیایی و ساختاری داخلی\n" +
                        "\n" +
                        "پوسته (سیلیکات‌ها، بازالت و گرانیت) ضخامت ۵ تا ۷۰ کیلومتر. " +
                        "گوشته (تا عمق ~۲۹۰۰ کیلومتر): منیزیم، آهن، سیلیکون، اکسیژن. " +
                        "هسته آهن-نیکل؛ هسته داخلی جامد و بیرونی مایع، مولد دینامو برای میدان مغناطیسی. " +
                        "دارای لایه مرز گوشته-هسته (D'') با ویژگی‌های خاص\u202b." +
                        "\n" +
                        "\n" +
                        "\n" +
                        ": ویژگی\u200Cهای خارق\u200Cالعاده\n" +
                        "\n" +
                        "تنها سیاره دارای آب مایع در سطح، چرخهٔ هیدرولوژیکی و حیات فعال. " +
                        "وجود بیوسفر پویا با میلیون‌ها گونهٔ زیستی. " +
                        "جو پایدار و غنی از اکسیژن. " +
                        "فعالیت‌های زمین‌ساختی فعال (حرکت قاره‌ها). " +
                        "ماه به‌عنوان تنها قمر طبیعی، تأثیرگذار بر جزر و مد و پایداری محور چرخش. " +
                        "وجود میدان مغناطیسی نیرومند، محافظت از زیست‌کره در برابر باد خورشیدی. " +
                        "دارای تمدن انسانی، فناوری، و اثرگذاری قابل توجه بر اقلیم و محیط زیست\u202b."
                )
                val textmortabet =
                    listOf("عطارد", "زهره", "مریخ", "مشتری", "زحل", "اورانوس", "نپتون")
                val imagemortabet = listOf(
                    painterResource(R.drawable.atarod),
                    painterResource(R.drawable.zohre),
                    painterResource(R.drawable.merikh),
                    painterResource(R.drawable.moshtari),
                    painterResource(R.drawable.zohal),
                    painterResource(R.drawable.uranos),
                    painterResource(R.drawable.nepton)
                )
                val tarkib = textmortabet.zip(imagemortabet)
                Column(
                    modifier = Modifier
                        .padding(25.dp)
                        .fillMaxSize()
                ) {
                    Box(modifier = Modifier.fillMaxSize())
                    {
                        LazyColumn(
                            horizontalAlignment = Alignment.CenterHorizontally
                        ) {
                            items(textazamin) { letter ->
                                Column(modifier = Modifier.padding(30.dp)) {
                                    Row {
                                        Image(painter = painterResource(id = R.drawable.zamin)
                                            , contentDescription = null , contentScale = ContentScale.Crop
                                            , modifier = Modifier.size(100.dp))
                                        Column {
                                            Text("")
                                            Row(modifier = Modifier.fillMaxWidth()
                                                ,horizontalArrangement = Arrangement.End
                                                , verticalAlignment = Alignment.CenterVertically) {
                                                Text("سیاره زمین" , fontSize = 25.sp  , color = Color.White , style = TextStyle(
                                                    shadow = Shadow(
                                                        color = Color(0xFFFFFFFF),
                                                        offset = Offset(0f ,0f)
                                                        , blurRadius = 20f
                                                    )
                                                ), maxLines = 1
                                                )
                                            }
                                        }
                                    }
                                }
                                Box(
                                    modifier = Modifier.fillMaxSize(),
                                    contentAlignment = Alignment.CenterStart,
                                ) {
                                    Column {
                                        Text(
                                            "$letter",
                                            fontSize = 20.sp,
                                            color = Color(0xFFFFFFFF),
                                            lineHeight = 32.sp,
                                            textAlign = TextAlign.Right
                                            , style = TextStyle(
                                                shadow = Shadow(
                                                    color = Color(0xFFFFFFFF),
                                                    offset = Offset(0f ,0f)
                                                    , blurRadius = 20f
                                                )
                                            )
                                        )
                                        Text("")
                                        Text("")
                                        Text("")
                                        Text(
                                            "موضوعات مرتبط",
                                            textAlign = TextAlign.Right,
                                            modifier = Modifier.fillMaxWidth(),
                                            fontSize = 30.sp,
                                            color = Color.White
                                            , style = TextStyle(
                                                shadow = Shadow(
                                                    color = Color(0xFFFFFFFF),
                                                    offset = Offset(0f ,0f)
                                                    , blurRadius = 20f
                                                )
                                            )
                                        )
                                        Text("")
                                        LazyRow(reverseLayout = true) {
                                            items(tarkib) { (matnha, aksha) ->
                                                Card(
                                                    modifier = Modifier
                                                        .width(250.dp)
                                                        .height(120.dp)
                                                        .padding(20.dp)
                                                        .clip(shape = RoundedCornerShape(100.dp)),
                                                    shape = RectangleShape,
                                                    colors = CardDefaults.cardColors(
                                                        containerColor = Color(
                                                            0xFF0707AD
                                                        )
                                                    )
                                                ) {
                                                    Box(
                                                        modifier = Modifier.fillMaxSize(),
                                                        contentAlignment = Alignment.CenterEnd
                                                    ) {
                                                        Image(
                                                            painter = painterResource(id = R.drawable.card),
                                                            contentScale = ContentScale.Crop,
                                                            contentDescription = null,
                                                            modifier = Modifier.fillMaxSize()
                                                        )
                                                        Button(
                                                            modifier = Modifier.fillMaxSize(
                                                            ).indication(interactionSource = remember { MutableInteractionSource() }
                                                                , indication = null), onClick = {
                                                                if (matnha == "عطارد") {
                                                                    currentScreen = "atarod"
                                                                    backap = false
                                                                }
                                                                if (matnha == "زهره") {
                                                                    currentScreen = "zohre"
                                                                    backap = false
                                                                }
                                                                if (matnha == "زمین") {
                                                                    currentScreen = "zamin"
                                                                    backap = false
                                                                }
                                                                if (matnha == "مریخ") {
                                                                    currentScreen = "merikh"
                                                                    backap = false
                                                                }
                                                                if (matnha == "مشتری") {
                                                                    currentScreen = "moshtari"
                                                                    backap = false
                                                                }
                                                                if (matnha == "زحل") {
                                                                    currentScreen = "zohal"
                                                                    backap = false
                                                                }
                                                                if (matnha == "اورانوس") {
                                                                    currentScreen = "uranos"
                                                                    backap = false
                                                                }
                                                                if (matnha == "نپتون") {
                                                                    currentScreen = "nepton"
                                                                    backap = false
                                                                }
                                                            }, colors = ButtonDefaults.buttonColors(
                                                                contentColor = Color.Transparent,
                                                                containerColor = Color.Transparent
                                                            )) {

                                                        }
                                                        Row() {
                                                            Column {
                                                                Spacer(modifier = Modifier.height(4.dp))
                                                                Text(
                                                                    "$matnha",
                                                                    color = Color.White,
                                                                    fontSize = 30.sp
                                                                    , style = TextStyle(
                                                                        shadow = Shadow(
                                                                            color = Color(0xFFFFFFFF),
                                                                            offset = Offset(0f ,0f)
                                                                            , blurRadius = 20f
                                                                        )
                                                                    )
                                                                )
                                                            }
                                                            Spacer(modifier = Modifier.width(15.dp))
                                                            Image(
                                                                painter = aksha,
                                                                contentDescription = null,
                                                                contentScale = ContentScale.Crop,
                                                                modifier = Modifier.size(50.dp)
                                                            )
                                                            Spacer(modifier = Modifier.width(20.dp))
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        Text("")
                                        Text("")
                                        Text("")
                                    }
                                }
                            }
                        }
                        var count by remember { mutableStateOf(0) }
                        IconButton(
                            onClick = { count++ },
                            modifier = Modifier
                                .size(70.dp)
                                .align(Alignment.BottomEnd).indication(interactionSource = remember { MutableInteractionSource() }
                                    , indication = null),
                            colors = IconButtonDefaults.iconButtonColors(
                                containerColor = Color(0xFF030A33)
                            )
                        ) {
                            if (count % 2 == 0) {
                                Icon(
                                    imageVector = Icons.Default.Favorite,
                                    contentDescription = null,
                                    modifier = Modifier.size(50.dp),
                                    tint = Color.Transparent
                                )
                                Icon(
                                    imageVector = Icons.Default.FavoriteBorder,
                                    contentDescription = null,
                                    modifier = Modifier.size(50.dp),
                                    tint = Color.White
                                )
                            }
                            if (count % 2 == 1) {
                                Icon(
                                    imageVector = Icons.Default.Favorite,
                                    contentDescription = null,
                                    modifier = Modifier.size(50.dp),
                                    tint = Color.White
                                )
                                Icon(
                                    imageVector = Icons.Default.FavoriteBorder,
                                    contentDescription = null,
                                    modifier = Modifier.size(50.dp),
                                    tint = Color.White
                                )
                            }
                        }
                    }
                }
            }
        }
    }
}
@Composable
fun Zohal(){
    Image(
        painter = painterResource(id = R.drawable.app_back),
        contentDescription = null,
        contentScale = ContentScale.Crop
    )
    when(currentScreen) {
        "zohal" -> {
            Column {
                Card(
                    modifier = Modifier
                        .fillMaxWidth()
                        .height(32.5.dp),
                    shape = RectangleShape,
                    colors = CardDefaults.cardColors(containerColor = Color(0xFF030A33))
                ) {
                }
                Column() {
                    Card(
                        modifier = Modifier
                            .fillMaxWidth()
                            .height(50.dp),
                        shape = RectangleShape,
                        colors = CardDefaults.cardColors(containerColor = Color(0xFF0707AD))
                    ) {
                        Row(modifier = Modifier.padding(10.dp)) {
                            IconButton(
                                onClick = { currentScreen = "asli"
                                    backap = true
                                },
                                colors = IconButtonDefaults.iconButtonColors(contentColor = Color.White),
                                modifier = Modifier.indication(interactionSource = remember { MutableInteractionSource() }
                                    , indication = null)
                            ) {
                                Icon(
                                    imageVector = Icons.Outlined.ArrowBack,
                                    contentDescription = null,
                                    modifier = Modifier.size(40.dp)
                                )
                            }
                            IconButton(
                                onClick = {},
                                colors = IconButtonDefaults.iconButtonColors(contentColor = Color.White),
                                modifier = Modifier.indication(interactionSource = remember { MutableInteractionSource() }
                                    , indication = null)
                            ) {
                                Icon(imageVector = Icons.Default.Info, contentDescription = null)
                            }
                            IconButton(
                                onClick = {},
                                colors = IconButtonDefaults.iconButtonColors(contentColor = Color.White),
                                modifier = Modifier.indication(interactionSource = remember { MutableInteractionSource() }
                                    , indication = null)
                            ) {
                                Icon(imageVector = Icons.Default.Share, contentDescription = null)
                            }
                            Row(
                                modifier = Modifier.fillMaxWidth(),
                                horizontalArrangement = Arrangement.End,
                                verticalAlignment = Alignment.CenterVertically
                            ) {
                                Text("زحل", fontSize = 20.sp, color = Color.White  , maxLines = 1 , fontWeight = FontWeight.ExtraBold)
                                IconButton(
                                    onClick = {expanded = true},
                                    modifier = Modifier.size(50.dp).indication(interactionSource = remember { MutableInteractionSource() }
                                        , indication = null),
                                    colors = IconButtonDefaults.iconButtonColors(contentColor = Color.White)
                                ) {
                                    Icon(
                                        imageVector = Icons.Default.Menu,
                                        contentDescription = null
                                    )
                                }
                            }
                        }
                    }
                }
                val textasaturn = listOf(
                    ": معرفی کلی\n" +
                            "\n" +
                            "ششمین سیاره از خورشید و بعد از مشتری، دومین سیاره بزرگ منظومه شمسی است؛ به خاطر حلقه‌های مشهورش شناخته می‌شود. " +
                            "فاصلهٔ متوسط از خورشید ≈ ۹.۵۸ واحد نجومی (~۱,۴۳۰ میلیون کیلومتر). " +
                            "یک گردش مداری کامل ≈۱۰,۷۵۰ روز (≈۲۹.۵ سال زمینی) است و هر ~۱۰.۷ ساعت یک چرخش محوری انجام می‌دهد (یکی از سریع‌ترین چرخش‌ها)\u202b." +
                            "\n" +
                            "\n" +
                            "\n" +
                            ": ساختار و ابعاد\n" +
                            "\n" +
                            "شعاع استوایی ≈۶۰۳۳۰ کیلومتر، شعاع پلاری ≈۵۷۵۳۰ کیلومتر (≈۹.۴ برابر زمین). " +
                            "جرم ≈۵.۶۷×۱۰^۲۶ کیلوگرم (≈۹۵ برابر زمین). " +
                            "چگالی میانگین ≈۰.۶۹ گرم بر سانتی‌متر مکعب؛ سبک‌ترین سیاره به دلیل گازپوش بودن. " +
                            "ساختار شامل هیدروژن و هلیوم، با تبدیل تدریجی به هیدروژن فلزی در عمق، و احتمالاً هسته‌ای سنگی/یخی در مرکز\u202b." +
                            "\n" +
                            "\n" +
                            "\n" +
                            ": سطح و ویژگی‌های ظاهری\n" +
                            "\n" +
                            "فاقد سطح جامد؛ سطح نمایان آن پوشیده از ابرهایی با نوارها و چرخش‌های پیچیده است. " +
                            "ابرهای آمونیاکی، آب یخ‌زده و آمو نیاک هیدرات دارند. " +
                            "الگوی باندبندی مشابه مشتری اما کم‌رنگ‌تر و آرام‌تر؛ طوفان‌های متعددی در کمربندها دیده می‌شوند\u202b." +
                            "\n" +
                            "\n" +
                            "\n" +
                            ": حلقه‌ها\n" +
                            "\n" +
                            "دقیق‌ترین و شناخته‌شده‌ترین ویژگی آن؛ چهار بخش اصلی (ای و بی و سی و حلقه‌های داخلی/دختره). " +
                            "قطر حلقه بی بیشترین چگالی را دارد و عرض کلی سیستم حلقه ≈۲۷۰،۰۰۰ کیلومتر است. " +
                            "ترکیب حلقه‌ها شامل ذرات یخی با اندازه از میکرومتر تا چندین متر\u202b." +
                            "\n" +
                            "\n" +
                            "\n" +
                            ": مدار و چرخش\n" +
                            "\n" +
                            "مدار تقریباً دایره‌ای دارد؛ فاصله از خورشید بین ~۹.۰ تا ~۱۰.۱ au است. " +
                            "چرخش سریع با دوره ~۱۰.۷ ساعت. " +
                            "محور چرخش انحراف ~۲۷ درجه دارد که فصل‌های سبک ایجاد می‌کند\u202b." +
                            "\n" +
                            "\n" +
                            "\n" +
                            ": دما و شرایط جوی\n" +
                            "\n" +
                            "دمای ابرهای خارجی ≈ −۱۳۰ درجه سلسیوس. " +
                            "در عمق گرم‌تر می‌شود و فشار افزایش می‌یابد. " +
                            "نوارهای جوی نشان‌دهنده جریان‌های قوی و جریان‌های قطبی هستند. " +
                            "شفق‌های قطبی پرانرژی از اینتراکشن با باد خورشیدی ایجاد می‌شوند\u202b." +
                            "\n" +
                            "\n" +
                            "\n" +
                            ": جو و میدان مغناطیسی\n" +
                            "\n" +
                            "جو اصلی شامل هیدروژن (~۹۶٪) و هلیوم (~۳٪)، با ردیابی آب، آمونیاک و متان. " +
                            "میدان مغناطیسی قوی، تقریباً ۵۰ برابر زمین، با مگنتوسفر گسترده‌ای که تا حلقه‌ها و فراسو کشیده است. " +
                            "شفق‌های یو وی و ایکس ری قدرتمند در نواحی قطبی ثبت شده‌اند\u202b." +
                            "\n" +
                            "\n" +
                            "\n" +
                            ": مأموریت‌های فضایی\n" +
                            "\n" +
                            "پایونیر و وویجر برای کشف اولیه. " +
                            "کاسینی–هویگنز (۱۳ سال در مدار، ۲۰۰۴–۲۰۱۷): بررسی دقیق حلقه‌ها، قمرها و جو؛ فرودگر هویگنز بر تایتان. " +
                            "ماموریت‌های فعلی و آینده: جویز در حال برنامه‌ریزی برای بررسی تایتان و اروپا است\u202b." +
                            "\n" +
                            "\n" +
                            "\n" +
                            ": ترکیب شیمیایی و ساختار داخلی\n" +
                            "\n" +
                            "لایه گازی بیرونی: هیدروژن + هلیوم. " +
                            "درونگازی: هیدروژن فلزی رسانای الکتریکی. " +
                            "لایه‌های میانی ترکیبی از گاز و مایع. " +
                            "احتمالاً هسته‌ای سنگی یخی با وزن ۱۰–۲۰ جرم زمین\u202b." +
                            "\n" +
                            "\n" +
                            "\n" +
                            ": ویژگی‌های خارق‌العاده\n" +
                            "\n" +
                            "سیاره‌ای با سریع‌ترین چرخش (دوره ~۱۰.۷ ساعت). " +
                            "حلقه‌های برجسته و گسترده‌ترین سیستم حلقه‌ها در بین سیارات. " +
                            "شفق‌های قطبی فرابنفش و رادیویی وسیع. " +
                            "۶۲ قمر تأییدشده تا سال ۲۰۲۵، مهم‌ترین آن‌ها تایتان، رئا، انسلادوس، دیموس. " +
                            "تایتان دارای دریاچه‌ها و رودخانه‌های هیدروکربنی؛ انسلادوس چشمه‌های یخی فعال دارد\u202b."
                )
                val textmortabet =
                    listOf("عطارد", "زهره", "زمین", "مریخ", "مشتری", "اورانوس", "نپتون")
                val imagemortabet = listOf(
                    painterResource(R.drawable.atarod),
                    painterResource(R.drawable.zohre),
                    painterResource(R.drawable.zamin),
                    painterResource(R.drawable.merikh),
                    painterResource(R.drawable.moshtari),
                    painterResource(R.drawable.uranos),
                    painterResource(R.drawable.nepton)
                )
                val tarkib = textmortabet.zip(imagemortabet)
                Column(
                    modifier = Modifier
                        .padding(25.dp)
                        .fillMaxSize()
                ) {
                    Box(modifier = Modifier.fillMaxSize())
                    {
                        LazyColumn(
                            horizontalAlignment = Alignment.CenterHorizontally
                        ) {
                            items(textasaturn) { letter ->
                                Column(modifier = Modifier.padding(30.dp)) {
                                    Row {
                                        Image(
                                            painter = painterResource(id = R.drawable.zohal),
                                            contentDescription = null,
                                            contentScale = ContentScale.Crop,
                                            modifier = Modifier.size(100.dp)
                                        )
                                        Column {
                                            Text("")
                                            Row(
                                                modifier = Modifier.fillMaxWidth(),
                                                horizontalArrangement = Arrangement.End,
                                                verticalAlignment = Alignment.CenterVertically
                                            ) {
                                                Text(
                                                    "سیاره زحل",
                                                    fontSize = 25.sp,
                                                    color = Color.White
                                                    , style = TextStyle(
                                                        shadow = Shadow(
                                                            color = Color(0xFFFFFFFF),
                                                            offset = Offset(0f ,0f)
                                                            , blurRadius = 20f
                                                        )
                                                    ), maxLines = 1
                                                )
                                            }
                                        }
                                    }
                                }
                                Box(
                                    modifier = Modifier.fillMaxSize(),
                                    contentAlignment = Alignment.CenterStart,
                                ) {

                                    Column {
                                        Text(
                                            "$letter",
                                            fontSize = 20.sp,
                                            color = Color(0xFFFFFFFF),
                                            lineHeight = 32.sp,
                                            textAlign = TextAlign.Right
                                            , style = TextStyle(
                                                shadow = Shadow(
                                                    color = Color(0xFFFFFFFF),
                                                    offset = Offset(0f ,0f)
                                                    , blurRadius = 20f
                                                )
                                            )
                                        )
                                        Text("")
                                        Text("")
                                        Text("")
                                        Text(
                                            "موضوعات مرتبط",
                                            textAlign = TextAlign.Right,
                                            modifier = Modifier.fillMaxWidth(),
                                            fontSize = 30.sp,
                                            color = Color.White
                                            , style = TextStyle(
                                                shadow = Shadow(
                                                    color = Color(0xFFFFFFFF),
                                                    offset = Offset(0f ,0f)
                                                    , blurRadius = 20f
                                                )
                                            )
                                        )
                                        Text("")
                                        LazyRow(reverseLayout = true) {
                                            items(tarkib) { (matnha, aksha) ->
                                                Card(
                                                    modifier = Modifier
                                                        .width(250.dp)
                                                        .height(120.dp)
                                                        .padding(20.dp)
                                                        .clip(shape = RoundedCornerShape(100.dp)),
                                                    shape = RectangleShape,
                                                    colors = CardDefaults.cardColors(
                                                        containerColor = Color(0xFF0707AD)
                                                    )
                                                ) {
                                                    Box(
                                                        modifier = Modifier.fillMaxSize(),
                                                        contentAlignment = Alignment.CenterEnd
                                                    ) {
                                                        Image(
                                                            painter = painterResource(id = R.drawable.card),
                                                            contentScale = ContentScale.Crop,
                                                            contentDescription = null,
                                                            modifier = Modifier.fillMaxSize()
                                                        )
                                                        Button(
                                                            modifier = Modifier.fillMaxSize(
                                                            ).indication(interactionSource = remember { MutableInteractionSource() }
                                                                , indication = null),
                                                            onClick = {
                                                                if (matnha == "عطارد") {
                                                                    currentScreen = "atarod"
                                                                    backap = false
                                                                }
                                                                if (matnha == "زهره") {
                                                                    currentScreen = "zohre"
                                                                    backap = false
                                                                }
                                                                if (matnha == "زمین") {
                                                                    currentScreen = "zamin"
                                                                    backap = false
                                                                }
                                                                if (matnha == "مریخ") {
                                                                    currentScreen = "merikh"
                                                                    backap = false
                                                                }
                                                                if (matnha == "مشتری") {
                                                                    currentScreen = "moshtari"
                                                                    backap = false
                                                                }
                                                                if (matnha == "زحل") {
                                                                    currentScreen = "zohal"
                                                                    backap = false
                                                                }
                                                                if (matnha == "اورانوس") {
                                                                    currentScreen = "uranos"
                                                                    backap = false
                                                                }
                                                                if (matnha == "نپتون") {
                                                                    currentScreen = "nepton"
                                                                    backap = false
                                                                }
                                                            },
                                                            colors = ButtonDefaults.buttonColors(
                                                                contentColor = Color.Transparent,
                                                                containerColor = Color.Transparent
                                                            )
                                                        ) {

                                                        }
                                                        Row() {
                                                            Column {
                                                                Spacer(
                                                                    modifier = Modifier.height(
                                                                        4.dp
                                                                    )
                                                                )
                                                                Text(
                                                                    "$matnha",
                                                                    color = Color.White,
                                                                    fontSize = 30.sp
                                                                    , style = TextStyle(
                                                                        shadow = Shadow(
                                                                            color = Color(0xFFFFFFFF),
                                                                            offset = Offset(0f ,0f)
                                                                            , blurRadius = 20f
                                                                        )
                                                                    )
                                                                )
                                                            }
                                                            Spacer(modifier = Modifier.width(15.dp))
                                                            Image(
                                                                painter = aksha,
                                                                contentDescription = null,
                                                                contentScale = ContentScale.Crop,
                                                                modifier = Modifier.size(50.dp)
                                                            )
                                                            Spacer(modifier = Modifier.width(20.dp))
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        Text("")
                                        Text("")
                                        Text("")
                                    }
                                }
                            }
                        }
                        var count by remember { mutableStateOf(0) }
                        IconButton(
                            onClick = { count++ },
                            modifier = Modifier
                                .size(70.dp)
                                .align(Alignment.BottomEnd)
                                .indication(interactionSource = remember { MutableInteractionSource() }
                                    , indication = null),
                            colors = IconButtonDefaults.iconButtonColors(
                                containerColor = Color(0xFF030A33)
                            )
                        ) {
                            if (count % 2 == 0) {
                                Icon(
                                    imageVector = Icons.Default.Favorite,
                                    contentDescription = null,
                                    modifier = Modifier.size(50.dp),
                                    tint = Color.Transparent
                                )
                                Icon(
                                    imageVector = Icons.Default.FavoriteBorder,
                                    contentDescription = null,
                                    modifier = Modifier.size(50.dp),
                                    tint = Color.White
                                )
                            }
                            if (count % 2 == 1) {
                                Icon(
                                    imageVector = Icons.Default.Favorite,
                                    contentDescription = null,
                                    modifier = Modifier.size(50.dp),
                                    tint = Color.White
                                )
                                Icon(
                                    imageVector = Icons.Default.FavoriteBorder,
                                    contentDescription = null,
                                    modifier = Modifier.size(50.dp),
                                    tint = Color.White
                                )
                            }
                        }
                    }
                }
            }
        }
    }
}
@Composable
fun Atarod(){
    Image(
        painter = painterResource(id = R.drawable.app_back),
        contentDescription = null,
        contentScale = ContentScale.Crop
    )
    when(currentScreen) {
        "atarod" -> {
            Column {
                Card(
                    modifier = Modifier
                        .fillMaxWidth()
                        .height(32.5.dp),
                    shape = RectangleShape,
                    colors = CardDefaults.cardColors(containerColor = Color(0xFF030A33))
                ) {
                }
                Column() {
                    Card(
                        modifier = Modifier
                            .fillMaxWidth()
                            .height(50.dp),
                        shape = RectangleShape,
                        colors = CardDefaults.cardColors(containerColor = Color(0xFF0707AD))
                    ) {
                        Row(modifier = Modifier.padding(10.dp)) {
                            IconButton(onClick = { currentScreen = "asli"
                                backap = true
                            },
                                colors = IconButtonDefaults.iconButtonColors(contentColor = Color.White)
                                , modifier = Modifier.indication(interactionSource = remember { MutableInteractionSource() }
                                    , indication = null)) {
                                Icon(
                                    imageVector = Icons.Outlined.ArrowBack,
                                    contentDescription = null,
                                    modifier = Modifier.size(40.dp)
                                )
                            }
                            IconButton(
                                onClick = {},
                                colors = IconButtonDefaults.iconButtonColors(contentColor = Color.White)
                                , modifier = Modifier.indication(interactionSource = remember { MutableInteractionSource() }
                                    , indication = null)
                            ) {
                                Icon(imageVector = Icons.Default.Info, contentDescription = null)
                            }
                            IconButton(
                                onClick = {},
                                colors = IconButtonDefaults.iconButtonColors(contentColor = Color.White)
                                , modifier = Modifier.indication(interactionSource = remember { MutableInteractionSource() }
                                    , indication = null)
                            ) {
                                Icon(imageVector = Icons.Default.Share, contentDescription = null)
                            }
                            Row(
                                modifier = Modifier.fillMaxWidth(),
                                horizontalArrangement = Arrangement.End,
                                verticalAlignment = Alignment.CenterVertically
                            ) {
                                Text("عطارد", fontSize = 20.sp, color = Color.White  , maxLines = 1 , fontWeight = FontWeight.ExtraBold)
                                IconButton(
                                    onClick = {expanded = true},
                                    modifier = Modifier.size(50.dp)
                                        .indication(interactionSource = remember { MutableInteractionSource() }
                                            , indication = null),
                                    colors = IconButtonDefaults.iconButtonColors(contentColor = Color.White)

                                ) {
                                    Icon(
                                        imageVector = Icons.Default.Menu,
                                        contentDescription = null
                                    )
                                }
                            }
                        }
                    }
                }

                var textatarod = listOf(
                    ": معرفی کلی\n" +
                            "\n" +
                            " کوچک\u200Cترین و نزدیک\u200Cترین سیاره به خورشید در منظومهٔ شمسی است؛ کمی بزرگ\u200C تر از ماه زمین " +
                            "\n" +
                            "فاصلهٔ متوسط آن از خورشید حدود ۰.۳۹ واحد نجومی (~۵۸ میلیون کیلومتر) است." +
                            " هر ۸۸ روز زمینی، یکبار به دور خورشید می\u200Cگردد و در هر ۵۹ روز یک\u200Cبار حول محورش می\u200Cچرخد\u202b." +
                            "\n" +
                            "\n" +
                            "\n" +
                            ": ساختار و ابعاد\n" +
                            "\n" +
                            "شعاع ~۲۴۴۰ کیلومتر دارد، یعنی ≈۳۸٪ قطر زمین. " +
                            "جرم آن ≈۳.۳×۱۰^۲۳ کیلوگرم (۵.۵٪ جرم زمین). " +
                            "دانسیته\u200Cاش ~۵.۴۳ گرم سانتی\u200Cمتر مکعب است (دومین دانسیته بعد زمین). " +
                            "هسته\u200Cای آهنی و نیمه\u200Cمایع دارد که شعاع هسته ~۲۰۷۴ کیلومتر (≈۸۵٪ شعاع سیاره) است\u202b." +
                            "\n" +
                            "\n" +
                            "\n" +
                            ": سطح و ویژگی\u200Cهای زمینی آن\n" +
                            "\n" +
                            "سطحی سنگی و پر از دهانه\u200Cهای برخوردی مثل ماه است؛ دهانه بزرگ کالوریس  قطر ~۱۵۵۰ کیلومتر دارد. " +
                            "و شواهد از فعالیت آتشفشانی باستانی (پوشش بازالت\u200Cهای سیل\u200Cگونی) حکایت دارند که حدود ۳.۵ میلیارد سال پیش بوده\u200Cاند\u202b." +
                            "\n" +
                            "\n" +
                            "\n" +
                            ": مدار و چرخش\n" +
                            "\n" +
                            "مدارش نسبت به خورشید کشیده شده است (بیضوی): فاصله از نزدیک\u200Cترین تا دورترین نقطه بین حدود ۴۶ تا ۷۰ میلیون کیلومتر تغییر می\u200Cکند. " +
                            "گردش به دور خورشید = ۸۸ روز زمینی، گردش حول محور = ۵۹ روز، و یک شبانه\u200Cروز برابر ~۱۷۶ روز زمین است\u202b." +
                            "\n" +
                            "\n" +
                            "\n" +
                            ": دما و شرایط سطح\n" +
                            "\n" +
                            "دمای روز ~۴۳۰ درجه سلسیوس (۸۰۰ درجه فارنهایت)، و در شب ~−۱۸۰ درجه سلسیوس (−۲۹۰ فارنهایت)، یعنی دامنه حرارتی ~۶۰۰ درجه سلسیوس است. در دهانه های قطبی که همیشه سایه اند احتمال وجود یخ هست\u202b." +
                            "\n" +
                            "\n" +
                            "\n" +
                            ": جو و میدان مغناطیسی\n" +
                            "\n" +
                            "یک اگزوسفر بسیار نادر شامل هیدروژن، هلیوم، اکسیژن، سدیم، پتاسیم، کلسیم و بخار آب دارد؛ فشار ≈۱۰^−۱۴ بار. " +
                            " میدان مغناطیسی ضعیفی با شدت ~۱٪ میدان زمین دارد، ناشی از دیناموی هسته ی آهنی\u202b." +
                            "\n" +
                            "\n" +
                            "\n" +
                            ": مأموریت\u200Cهای فضایی\n" +
                            "\n" +
                            "مارینر 10(1974): اولین عبور از عطارد و کشف میدان مغناطیسی. " +
                            " مسینجر (۲۰۱۱–۲۰۱۵): اولین مدارگرد، تمام سطح را نقشه\u200Cبرداری کرد، دما، ترکیب اتمسفر و میدان مغناطیسی را پایش کرد. " +
                            " بی پی کلومبا: مأموریت جاری برای تحلیل ساختار داخلی و تاریخچه ژئوشیمیایی عطارد\u202b." +
                            "\n" +
                            "\n" +
                            "\n" +
                            ": ترکیب شیمیایی و ساختاری داخلی\n" +
                            "\n" +
                            "هسته\u200Cی آهنی بزرگی با ترکیب آهن، نیکل، سیلیکون و احتمالاً گوگرد و کربن دارد. " +
                            "پوسته  و گوشته\u200Cای نسبتاً نازک (~۲۶–۳۵ کیلومتر) پوشیده شده با قشر بازالتی. " +
                            "احتمالاً یک لایه الماس (الماس\u200Cکرده) ~۱۰ مایل زیر پوسته دارد، ناشی از فرآیند بلوری شدن هسته و فشار شدید\u202b." +
                            "\n" +
                            "\n" +
                            "\n" +
                            ": ویژگی\u200Cهای خارق\u200Cالعاده\n" +
                            "\n" +
                            "دوران روزانه – سالانه عجیب: تناسب چرخش به مدار (نسبت ۳:۲) باعث می\u200Cشود زمان بین طلوع آفتاب تا طلوع بعدی برابر با دو سال عطارد باشد. " +
                            "نوسان زیاد درجه حرارت: گستره ~۶۰۰ سلسیوس بین روز و شب، بزرگترین تفاوت دمایی در بین سیارات. " +
                            "حضور آب در سایه\u200Cهای قطبی: با وجود گرما، یخ و در دهانه\u200Cهای سایه\u200Cدار قطبی وجود دارد. لاستفاده علمی از میدان مغناطیسی: مطالعه تعامل باد خورشیدی با میدان ضعیف و ایجاد شفق\u200Cهای پرتو ایکس\u202b."
                )
                val textmortabet =
                    listOf("زهره", "زمین", "مریخ", "مشتری", "زحل", "اورانوس", "نپتون")
                val imagemortabet = listOf(
                    painterResource(R.drawable.zohre),
                    painterResource(R.drawable.zamin),
                    painterResource(R.drawable.merikh),
                    painterResource(R.drawable.moshtari),
                    painterResource(R.drawable.zohal),
                    painterResource(R.drawable.uranos),
                    painterResource(R.drawable.nepton)
                )
                val tarkib = textmortabet.zip(imagemortabet)
                Column(
                    modifier = Modifier
                        .padding(25.dp)
                        .fillMaxSize()
                ) {
                    Box(modifier = Modifier.fillMaxSize())
                    {
                        LazyColumn(
                            horizontalAlignment = Alignment.CenterHorizontally
                        ) {
                            items(textatarod) { letter ->
                                Column(modifier = Modifier.padding(30.dp)) {
                                    Row {
                                        Image(
                                            painter = painterResource(id = R.drawable.atarod),
                                            contentDescription = null,
                                            contentScale = ContentScale.Crop,
                                            modifier = Modifier.size(100.dp)
                                        )
                                        Column {
                                            Text("")
                                            Row(
                                                modifier = Modifier.fillMaxWidth(),
                                                horizontalArrangement = Arrangement.End,
                                                verticalAlignment = Alignment.CenterVertically
                                            ) {
                                                Text(
                                                    "سیاره عطارد",
                                                    fontSize = 25.sp,
                                                    color = Color.White,
                                                    maxLines = 1
                                                    , style = TextStyle(
                                                        shadow = Shadow(
                                                            color = Color(0xFFFFFFFF),
                                                            offset = Offset(0f ,0f)
                                                            , blurRadius = 20f
                                                        )
                                                    )
                                                )
                                            }
                                        }
                                    }
                                }
                                Box(
                                    modifier = Modifier.fillMaxSize(),
                                    contentAlignment = Alignment.CenterStart,
                                ) {

                                    Column {
                                        Text(
                                            "$letter",
                                            fontSize = 20.sp,
                                            color = Color(0xFFFFFFFF),
                                            lineHeight = 32.sp,
                                            textAlign = TextAlign.Right
                                            , style = TextStyle(
                                                shadow = Shadow(
                                                    color = Color(0xFFFFFFFF),
                                                    offset = Offset(0f ,0f)
                                                    , blurRadius = 20f
                                                )
                                            )
                                        )
                                        Text("")
                                        Text("")
                                        Text("")
                                        Text(
                                            "موضوعات مرتبط",
                                            textAlign = TextAlign.Right,
                                            modifier = Modifier.fillMaxWidth(),
                                            fontSize = 30.sp,
                                            color = Color.White
                                            , style = TextStyle(
                                                shadow = Shadow(
                                                    color = Color(0xFFFFFFFF),
                                                    offset = Offset(0f ,0f)
                                                    , blurRadius = 20f
                                                )
                                            )
                                        )
                                        Text("")
                                        LazyRow(reverseLayout = true) {
                                            items(tarkib) { (matnha, aksha) ->
                                                Card(
                                                    modifier = Modifier
                                                        .width(250.dp)
                                                        .height(120.dp)
                                                        .padding(20.dp)
                                                        .clip(shape = RoundedCornerShape(100.dp)),
                                                    shape = RectangleShape,
                                                    colors = CardDefaults.cardColors(
                                                        containerColor = Color(
                                                            0xFF0707AD
                                                        )
                                                    )
                                                ) {
                                                    Box(
                                                        modifier = Modifier.fillMaxSize(),
                                                        contentAlignment = Alignment.CenterEnd
                                                    ) {
                                                        Image(
                                                            painter = painterResource(id = R.drawable.card),
                                                            contentScale = ContentScale.Crop,
                                                            contentDescription = null,
                                                            modifier = Modifier.fillMaxSize()
                                                        )
                                                        Button(
                                                            modifier = Modifier.fillMaxSize(
                                                            ).indication(interactionSource = remember { MutableInteractionSource() }
                                                                , indication = null)
                                                            , onClick = {
                                                                if (matnha == "عطارد") {
                                                                    currentScreen = "atarod"
                                                                    backap = false
                                                                }
                                                                if (matnha == "زهره") {
                                                                    currentScreen = "zohre"
                                                                    backap = false
                                                                }
                                                                if (matnha == "زمین") {
                                                                    currentScreen = "zamin"
                                                                    backap = false
                                                                }
                                                                if (matnha == "مریخ") {
                                                                    currentScreen = "merikh"
                                                                    backap = false
                                                                }
                                                                if (matnha == "مشتری") {
                                                                    currentScreen = "moshtari"
                                                                    backap = false
                                                                }
                                                                if (matnha == "زحل") {
                                                                    currentScreen = "zohal"
                                                                    backap = false
                                                                }
                                                                if (matnha == "اورانوس") {
                                                                    currentScreen = "uranos"
                                                                    backap = false
                                                                }
                                                                if (matnha == "نپتون") {
                                                                    currentScreen = "nepton"
                                                                    backap = false
                                                                }
                                                            }, colors = ButtonDefaults.buttonColors(
                                                                contentColor = Color.Transparent,
                                                                containerColor = Color.Transparent
                                                            )) {

                                                        }
                                                        Row() {
                                                            Column {
                                                                Spacer(modifier = Modifier.height(4.dp))
                                                                Text(
                                                                    "$matnha",
                                                                    color = Color.White,
                                                                    fontSize = 30.sp
                                                                    , style = TextStyle(
                                                                        shadow = Shadow(
                                                                            color = Color(0xFFFFFFFF),
                                                                            offset = Offset(0f ,0f)
                                                                            , blurRadius = 20f
                                                                        )
                                                                    )
                                                                )
                                                            }
                                                            Spacer(modifier = Modifier.width(15.dp))
                                                            Image(
                                                                painter = aksha,
                                                                contentDescription = null,
                                                                contentScale = ContentScale.Crop,
                                                                modifier = Modifier.size(50.dp)
                                                            )
                                                            Spacer(modifier = Modifier.width(20.dp))
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        Text("")
                                        Text("")
                                        Text("")
                                    }
                                }
                            }
                        }
                        var count by remember { mutableStateOf(0) }
                        IconButton(
                            onClick = { count++ },
                            modifier = Modifier
                                .size(70.dp)
                                .align(Alignment.BottomEnd)
                                .indication(interactionSource = remember { MutableInteractionSource() }
                                    , indication = null),
                            colors = IconButtonDefaults.iconButtonColors(
                                containerColor = Color(0xFF030A33)
                            )
                        ) {
                            if (count % 2 == 0) {
                                Icon(
                                    imageVector = Icons.Default.Favorite,
                                    contentDescription = null,
                                    modifier = Modifier.size(50.dp),
                                    tint = Color.Transparent
                                )
                                Icon(
                                    imageVector = Icons.Default.FavoriteBorder,
                                    contentDescription = null,
                                    modifier = Modifier.size(50.dp),
                                    tint = Color.White
                                )
                            }
                            if (count % 2 == 1) {
                                Icon(
                                    imageVector = Icons.Default.Favorite,
                                    contentDescription = null,
                                    modifier = Modifier.size(50.dp),
                                    tint = Color.White
                                )
                                Icon(
                                    imageVector = Icons.Default.FavoriteBorder,
                                    contentDescription = null,
                                    modifier = Modifier.size(50.dp),
                                    tint = Color.White
                                )
                            }
                        }
                    }
                }
            }
        }

    }
}
@Composable
fun Moshtari() {
    Image(
        painter = painterResource(id = R.drawable.app_back),
        contentScale = ContentScale.Crop,
        contentDescription = null
    )
    when (currentScreen) {
        "moshtari" -> {
            Column {
                Card(
                    modifier = Modifier
                        .fillMaxWidth()
                        .height(32.5.dp),
                    shape = RectangleShape,
                    colors = CardDefaults.cardColors(containerColor = Color(0xFF030A33))
                ) {
                }
                Column() {
                    Card(
                        modifier = Modifier
                            .fillMaxWidth()
                            .height(50.dp),
                        shape = RectangleShape,
                        colors = CardDefaults.cardColors(containerColor = Color(0xFF0707AD))
                    ) {
                        Row(modifier = Modifier.padding(10.dp)) {
                            IconButton(
                                onClick = { currentScreen = "asli"
                                    backap = true
                                },
                                colors = IconButtonDefaults.iconButtonColors(contentColor = Color.White),
                                modifier = Modifier.indication(interactionSource = remember { MutableInteractionSource() }
                                    , indication = null)
                            ) {
                                Icon(
                                    imageVector = Icons.Outlined.ArrowBack,
                                    contentDescription = null,
                                    modifier = Modifier.size(40.dp)
                                )
                            }
                            IconButton(
                                onClick = {},
                                colors = IconButtonDefaults.iconButtonColors(contentColor = Color.White),
                                modifier = Modifier.indication(interactionSource = remember { MutableInteractionSource() }
                                    , indication = null)
                            ) {
                                Icon(imageVector = Icons.Default.Info, contentDescription = null)
                            }
                            IconButton(
                                onClick = {},
                                colors = IconButtonDefaults.iconButtonColors(contentColor = Color.White),
                                modifier = Modifier.indication(interactionSource = remember { MutableInteractionSource() }
                                    , indication = null)
                            ) {
                                Icon(imageVector = Icons.Default.Share, contentDescription = null)
                            }
                            Row(
                                modifier = Modifier.fillMaxWidth(),
                                horizontalArrangement = Arrangement.End,
                                verticalAlignment = Alignment.CenterVertically
                            ) {
                                Text("مشتری", fontSize = 20.sp, color = Color.White  , maxLines = 1 , fontWeight = FontWeight.ExtraBold)
                                IconButton(
                                    onClick = {expanded = true},
                                    modifier = Modifier.size(50.dp)
                                        .indication(interactionSource = remember { MutableInteractionSource() }
                                            , indication = null),
                                    colors = IconButtonDefaults.iconButtonColors(contentColor = Color.White)
                                ) {
                                    Icon(
                                        imageVector = Icons.Default.Menu,
                                        contentDescription = null
                                    )
                                }
                            }
                        }
                    }
                }
                var textajupiter = listOf(
                    ": معرفی کلی\n" +
                            "\n" +
                            "پنجمین سیاره از خورشید و بزرگ‌ترین سیاره منظومه شمسی؛ به‌دلیل حجم عظیم و تأثیر گرانشی قوی، «پادشاه سیارات» نامیده می‌شود. " +
                            "فاصلهٔ متوسط از خورشید ≈ ۵.۲۰۳ واحد نجومی (~۷۷۸ میلیون کیلومتر). " +
                            "یک گردش کامل به دور خورشید ≈ ۴۳۳۲.۶ روز زمینی (~۱۲ سال) است و هر ≈۹٫۹ ساعت یک چرخش محوری انجام می‌دهد (سریع‌ترین چرخش در بین سیارات)\u202b." +
                            "\n" +
                            "\n" +
                            "\n" +
                            ": ساختار و ابعاد\n" +
                            "\n" +
                            "شعاع استوایی ≈ ۷۱۴۹۲ کیلومتر، شعاع متوسط ≈ ۶۹۹۱۱ کیلومتر (≈۱۱ برابر زمین). " +
                            "جرم ≈ ۱٫۸۹۸×۱۰^۲۷ کیلوگرم (~۳۱۸ برابر زمین). حجم آن بیش از ۱۳۰۰ برابر زمین است. " +
                            "چگالی میانگین ≈ ۱٫۳۲۶ گرم بر سانتی‌متر مکعب (کم‌تر از زمین). " +
                            "متشکل از هیدروژن و هلیوم در لایه‌ٔ خارجی؛ با عمق فشار زیاد، گازها به مایع فوق‌پرفشار تبدیل شده و احتمالا هسته‌ای سنگی/یخی در مرکز دارد\u202b." +
                            "\n" +
                            "\n" +
                            "\n" +
                            ": سطح و ویژگی‌های زمینی آن\n" +
                            "\n" +
                            "فاقد سطح جامد؛ پوشیده شده از ابرهای رنگی و نوارهای جو است. " +
                            "ابرها شامل آمونیاک، هیدروژن سولفید، بخار آب و غبار هستند. " +
                            "مهم‌ترین ساختار سطح‌نمای آن، طوفان عظیم «لکه سرخ بزرگ» است: طوفانی چرخشی با سرعت باد تا ۴۳۲ کیلومتر بر ساعت، بیش از دو تا سه برابر قطر زمین و حداقل از سال ۱۸۳۱ فعال است\u202b." +
                            "\n" +
                            "\n" +
                            "\n" +
                            ": مدار و چرخش\n" +
                            "\n" +
                            "مدار بیضوی با فاصلهٔ بین حدود ۷۴۰ تا ۸۱۶ میلیون کیلومتر از خورشید. " +
                            "چرخش سریع با سرعت ≈۱۲٫۶ کیلومتر بر ثانیه در مدار؛ گردش محوری حدود ۱۰ ساعت دارد\u202b." +
                            "\n" +
                            "\n" +
                            "\n" +
                            ": دما و شرایط جو\n" +
                            "\n" +
                            "دمای ابرها در بالای جو −۱۶۰ سلسیوس تا −۱۰۰؛ در عمق داخلی به گرما و فشار بالا می‌رسد. " +
                            "جو عظیم‌ترین ساختار اتمسفری منظومه شمسی را دارد؛ عمق ابرها تا ~۳۰۰۰ کیلومتر. " +
                            "نوارهای رنگی (بِلت و زون) ناشی از جریان‌های عمودی و افقی، همراه با توفان‌ها و رعدوبرق‌های عظیم هستند\u202b." +
                            "\n" +
                            "\n" +
                            "\n" +
                            ": جو و میدان مغناطیسی\n" +
                            "\n" +
                            "میدان مغناطیسی بسیار قوی (≈۴٫۱۷۰ گوس) ایجاد شده توسط هیدروژن فلزی در عمق، ۱۸۰۰۰ برابر میدان زمین است. " +
                            "مگنتوسفر عظیم (تا ~۷ میلیون کیلومتر) با تشعشعات قوی، به همراه شراره‌های قطبی\u202b." +
                            "\n" +
                            "\n" +
                            "\n" +
                            ": مأموریت‌های فضایی\n" +
                            "\n" +
                            "کاوشگرهای اولیه: پیونر و وویاگر ، سپس گالیلو (مدارگرد + کاوشگر). از ۲۰۱۶ به بررسی میدان‌های گرانشی، مغناطیسی، اتمسفر عمیق و قطب‌ها ادامه می‌دهد. " +
                            "مأموریت‌های آینده، برای بررسی سیستم قمرهای یخی اطراف مشتری برنامه‌ریزی شده‌اند\u202b." +
                            "\n" +
                            "\n" +
                            "\n" +
                            ": ترکیب شیمیایی و ساختاری داخلی\n" +
                            "\n" +
                            "لایه بیرونی: گاز هیدروژن و هلیوم. " +
                            "در عمق: هیدروژن مایع فوق‌پرفشار که رسانای الکتریکی است. " +
                            "هستهٔ داخلی احتمالا شامل مواد سنگی یخی (کربن، نیتروژن، اکسیژن و فلزات) است؛ ضخامت و ساختارش هنوز در تحقیق است\u202b." +
                            "\n" +
                            "\n" +
                            "\n" +
                            ": ویژگی‌های خارق‌العاده\n" +
                            "\n" +
                            "بزرگ‌ترین سیاره با حجم عظیم، سریع‌ترین چرخش. " +
                            "لکه سرخ بزرگ—طوفانی ششصد‌ساله با تغییرات شکل و اندازه همراه با لرزش ۹۰ روزه. " +
                            "وجود «مَش‌بال‌ها» (مانند تگرگ آمونیاکی) ثابت شده است؛ این فرآیند باعث حذف آمونیاک در ابرهای بالایی می‌شود. " +
                            "جو فوق‌العاده فعال با رعدوبرق‌های قدرتمند، طوفان‌های عظیم و گسلش‌های رنگی پیچیده. " +
                            "میدان مغناطیسی عظیم، ساختار مگنتوسفر پیچیده و شراره‌های قطبی بسیار فعال. " +
                            "وجود ۷۹ قمر تأیید شده؛ از جمله گانیمد بزرگ‌ترین قمر سامانه شمسی و چهار قمر گالیله‌ای مشهوری که مقاصدی برای بررسی‌های آینده‌اند. " +
                            "دارای حلقه‌های غبارآلود ضعیف؛ برخلاف زحل، مات هستند و از مواد قمرها ساته\u202b."
                )
                val textmortabet =
                    listOf("عطارد", "زهره", "زمین", "مریخ", "زحل", "اورانوس", "نپتون")
                val imagemortabet = listOf(
                    painterResource(R.drawable.atarod),
                    painterResource(R.drawable.zohre),
                    painterResource(R.drawable.zamin),
                    painterResource(R.drawable.merikh),
                    painterResource(R.drawable.zohal),
                    painterResource(R.drawable.uranos),
                    painterResource(R.drawable.nepton)
                )
                val tarkib = textmortabet.zip(imagemortabet)
                Column(
                    modifier = Modifier
                        .padding(25.dp)
                        .fillMaxSize()
                ) {
                    Box(modifier = Modifier.fillMaxSize())
                    {
                        LazyColumn(
                            horizontalAlignment = Alignment.CenterHorizontally
                        ) {
                            items(textajupiter) { letter ->
                                Column(modifier = Modifier.padding(30.dp)) {
                                    Row {
                                        Image(
                                            painter = painterResource(id = R.drawable.moshtari),
                                            contentDescription = null,
                                            contentScale = ContentScale.Crop,
                                            modifier = Modifier.size(100.dp)
                                        )
                                        Column {
                                            Text("")
                                            Row(
                                                modifier = Modifier.fillMaxWidth(),
                                                horizontalArrangement = Arrangement.End,
                                                verticalAlignment = Alignment.CenterVertically
                                            ) {
                                                Text("سیاره مشتری", fontSize = 25.sp, color = Color.White , style = TextStyle(
                                                    shadow = Shadow(
                                                        color = Color(0xFFFFFFFF),
                                                        offset = Offset(0f ,0f)
                                                        , blurRadius = 20f
                                                    )
                                                ), maxLines = 1
                                                )
                                            }
                                        }
                                    }
                                }
                                Box(
                                    modifier = Modifier.fillMaxSize(),
                                    contentAlignment = Alignment.CenterStart,
                                ) {

                                    Column {
                                        Text(
                                            "$letter",
                                            fontSize = 20.sp,
                                            color = Color(0xFFFFFFFF),
                                            lineHeight = 32.sp,
                                            textAlign = TextAlign.Right
                                            , style = TextStyle(
                                                shadow = Shadow(
                                                    color = Color(0xFFFFFFFF),
                                                    offset = Offset(0f ,0f)
                                                    , blurRadius = 20f
                                                )
                                            )
                                        )
                                        Text("")
                                        Text("")
                                        Text("")
                                        Text(
                                            "موضوعات مرتبط",
                                            textAlign = TextAlign.Right,
                                            modifier = Modifier.fillMaxWidth(),
                                            fontSize = 30.sp,
                                            color = Color.White
                                            , style = TextStyle(
                                                shadow = Shadow(
                                                    color = Color(0xFFFFFFFF),
                                                    offset = Offset(0f ,0f)
                                                    , blurRadius = 20f
                                                )
                                            )
                                        )
                                        Text("")
                                        LazyRow(reverseLayout = true) {
                                            items(tarkib) { (matnha, aksha) ->
                                                Card(
                                                    modifier = Modifier
                                                        .width(250.dp)
                                                        .height(120.dp)
                                                        .padding(20.dp)
                                                        .clip(shape = RoundedCornerShape(100.dp)),
                                                    shape = RectangleShape,
                                                    colors = CardDefaults.cardColors(
                                                        containerColor = Color(0xFF0707AD)
                                                    )
                                                ) {
                                                    Box(
                                                        modifier = Modifier.fillMaxSize(),
                                                        contentAlignment = Alignment.CenterEnd
                                                    ) {
                                                        Image(
                                                            painter = painterResource(id = R.drawable.card),
                                                            contentScale = ContentScale.Crop,
                                                            contentDescription = null,
                                                            modifier = Modifier.fillMaxSize()
                                                        )
                                                        Button(
                                                            modifier = Modifier.fillMaxSize(
                                                            ).indication(indication = null , interactionSource = remember { MutableInteractionSource() }),
                                                            onClick = {
                                                                if (matnha == "عطارد") {
                                                                    currentScreen = "atarod"
                                                                    backap = false
                                                                }
                                                                if (matnha == "زهره") {
                                                                    currentScreen = "zohre"
                                                                    backap = false
                                                                }
                                                                if (matnha == "زمین") {
                                                                    currentScreen = "zamin"
                                                                    backap = false
                                                                }
                                                                if (matnha == "مریخ") {
                                                                    currentScreen = "merikh"
                                                                    backap = false
                                                                }
                                                                if (matnha == "مشتری") {
                                                                    currentScreen = "moshtari"
                                                                    backap = false
                                                                }
                                                                if (matnha == "زحل") {
                                                                    currentScreen = "zohal"
                                                                    backap = false
                                                                }
                                                                if (matnha == "اورانوس") {
                                                                    currentScreen = "uranos"
                                                                    backap = false
                                                                }
                                                                if (matnha == "نپتون") {
                                                                    currentScreen = "nepton"
                                                                    backap = false
                                                                }
                                                            },
                                                            colors = ButtonDefaults.buttonColors(
                                                                contentColor = Color.Transparent,
                                                                containerColor = Color.Transparent
                                                            )
                                                        ) {

                                                        }
                                                        Row() {
                                                            Column {
                                                                Spacer(
                                                                    modifier = Modifier.height(
                                                                        4.dp
                                                                    )
                                                                )
                                                                Text(
                                                                    "$matnha",
                                                                    color = Color.White,
                                                                    fontSize = 30.sp
                                                                    , style = TextStyle(
                                                                        shadow = Shadow(
                                                                            color = Color(0xFFFFFFFF),
                                                                            offset = Offset(0f ,0f)
                                                                            , blurRadius = 20f
                                                                        )
                                                                    )
                                                                )
                                                            }
                                                            Spacer(modifier = Modifier.width(15.dp))
                                                            Image(
                                                                painter = aksha,
                                                                contentDescription = null,
                                                                contentScale = ContentScale.Crop,
                                                                modifier = Modifier.size(50.dp)
                                                            )
                                                            Spacer(modifier = Modifier.width(20.dp))
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        Text("")
                                        Text("")
                                        Text("")
                                    }
                                }
                            }
                        }
                        var count by remember { mutableStateOf(0) }
                        IconButton(
                            onClick = { count++ },
                            modifier = Modifier
                                .size(70.dp)
                                .align(Alignment.BottomEnd)
                                .indication(indication = null , interactionSource = remember { MutableInteractionSource() }),
                            colors = IconButtonDefaults.iconButtonColors(
                                containerColor = Color(0xFF030A33)
                            )
                        ) {
                            if (count % 2 == 0) {
                                Icon(
                                    imageVector = Icons.Default.Favorite,
                                    contentDescription = null,
                                    modifier = Modifier.size(50.dp),
                                    tint = Color.Transparent
                                )
                                Icon(
                                    imageVector = Icons.Default.FavoriteBorder,
                                    contentDescription = null,
                                    modifier = Modifier.size(50.dp),
                                    tint = Color.White
                                )
                            }
                            if (count % 2 == 1) {
                                Icon(
                                    imageVector = Icons.Default.Favorite,
                                    contentDescription = null,
                                    modifier = Modifier.size(50.dp),
                                    tint = Color.White
                                )
                                Icon(
                                    imageVector = Icons.Default.FavoriteBorder,
                                    contentDescription = null,
                                    modifier = Modifier.size(50.dp),
                                    tint = Color.White
                                )
                            }
                        }
                    }
                }
            }
        }
    }
}


@Composable
fun Zohre(){
    Image(
        painter = painterResource(id = R.drawable.app_back),
        contentScale = ContentScale.Crop,
        contentDescription = null
    )
    when(currentScreen) {
        "zohre" -> {
            Column {
                Card(
                    modifier = Modifier
                        .fillMaxWidth()
                        .height(32.5.dp),
                    shape = RectangleShape,
                    colors = CardDefaults.cardColors(containerColor = Color(0xFF030A33))
                ) {
                }
                Column() {
                    Card(
                        modifier = Modifier
                            .fillMaxWidth()
                            .height(50.dp),
                        shape = RectangleShape,
                        colors = CardDefaults.cardColors(containerColor = Color(0xFF0707AD))
                    ) {
                        Row(modifier = Modifier.padding(10.dp)) {
                            IconButton(onClick = { currentScreen = "asli"
                                backap = true
                            },
                                colors = IconButtonDefaults.iconButtonColors(contentColor = Color.White)
                                , modifier = Modifier.indication(indication = null ,
                                    interactionSource = remember { MutableInteractionSource() })) {
                                Icon(
                                    imageVector = Icons.Outlined.ArrowBack,
                                    contentDescription = null,
                                    modifier = Modifier.size(40.dp)
                                )
                            }
                            IconButton(
                                onClick = {},
                                colors = IconButtonDefaults.iconButtonColors(contentColor = Color.White)
                                , modifier = Modifier.indication(indication = null ,
                                    interactionSource = remember { MutableInteractionSource() })
                            ) {
                                Icon(imageVector = Icons.Default.Info, contentDescription = null)
                            }
                            IconButton(
                                onClick = {},
                                colors = IconButtonDefaults.iconButtonColors(contentColor = Color.White)
                                , modifier = Modifier.indication(indication = null ,
                                    interactionSource = remember { MutableInteractionSource() })
                            ) {
                                Icon(imageVector = Icons.Default.Share, contentDescription = null)
                            }
                            Row(
                                modifier = Modifier.fillMaxWidth(),
                                horizontalArrangement = Arrangement.End,
                                verticalAlignment = Alignment.CenterVertically
                            ) {
                                Text("زهره", fontSize = 20.sp, color = Color.White  , maxLines = 1 , fontWeight = FontWeight.ExtraBold)
                                IconButton(
                                    onClick = {expanded = true},
                                    modifier = Modifier.size(50.dp).indication(indication = null ,
                                        interactionSource = remember { MutableInteractionSource() }),
                                    colors = IconButtonDefaults.iconButtonColors(contentColor = Color.White)

                                ) {
                                    Icon(
                                        imageVector = Icons.Default.Menu,
                                        contentDescription = null
                                    )
                                }
                            }
                        }
                    }
                    var textazohre = listOf(
                        ": معرفی کلی\n" +
                                "\n" +
                                " دومین سیاره نزدیک به خورشید و هم‌اندازه‌ترین سیاره با زمین در منظومه شمسی است؛ به‌همین دلیل اغلب \"خواهر زمین\" نامیده می‌شود." +
                                "فاصلهٔ متوسط آن از خورشید حدود ۰.۷۲ واحد نجومی (~۱۰۸ میلیون کیلومتر) است. " +
                                "هر ۲۲۵ روز زمینی یکبار به دور خورشید می‌گردد اما گردش خود به دور محورش بسیار آهسته و در جهت معکوس (حرکت رجعی) است؛ یک دور چرخش محوری ≈۲۴۳ روز زمین\u202b." +
                                "\n" +
                                "\n" +
                                "\n" +
                                ": ساختار و ابعاد\n" +
                                "\n" +
                                "شعاع ~۶۰۵۲ کیلومتر (≈۹۵٪ شعاع زمین) و جرم ≈۴.۸۷×۱۰^۲۴ کیلوگرم (≈۸۲٪ جرم زمین) دارد. " +
                                "چگالی میانگین ≈۵.۲۴ گرم بر سانتی‌متر مکعب است. " +
                                "هسته\u200Cای آهنی دارد که احتمالاً نیمه‌مایع است، با قطر ~۳۰۰۰ کیلومتر، و اطراف آن را گوشته‌ای سنگی فرا گرفته است\u202b." +
                                "\n" +
                                "\n" +
                                "\n" +
                                ": سطح و ویژگی\u200Cهای زمینی آن\n" +
                                "\n" +
                                "سطح زهره عمدتاً از دشت‌های آتشفشانی، گنبدهای گدازه و فلات‌های بلند تشکیل شده است. " +
                                "بزرگ‌ترین ساختار آتشفشانی آن، ماات مونز، بیش از ۸ کیلومتر ارتفاع دارد. " +
                                "دهانه‌های برخوردی نسبتاً کمی دارد که نشان‌دهنده جوان بودن سطح آن (~۳۰۰–۵۰۰ میلیون سال) است\u202b." +
                                "\n" +
                                "\n" +
                                "\n" +
                                ": مدار و چرخش\n" +
                                "\n" +
                                "مدارش تقریباً دایره‌ای است با فاصلهٔ نسبتاً ثابت از خورشید (~۱۰۸ میلیون کیلومتر). " +
                                "گردش به دور خورشید = ۲۲۵ روز، گردش حول محور = ۲۴۳ روز در جهت معکوس، و یک روز خورشیدی (طلوع تا طلوع) برابر ~۱۱۷ روز زمینی است\u202b." +
                                "\n" +
                                "\n" +
                                "\n" +
                                ": دما و شرایط سطح\n" +
                                "\n" +
                                "دمای سطح ~۴۶۵ درجه سلسیوس (~۸۷۰ درجه فارنهایت) است، حتی گرم‌تر از عطارد به‌دلیل اثر گلخانه‌ای شدید. " +
                                "تغییر دما بین شب و روز ناچیز است. فشار سطحی حدود ۹۲ برابر فشار جو زمین است؛ معادل فشار در عمق ۹۰۰ متری اقیانوس\u202b." +
                                "\n" +
                                "\n" +
                                "\n" +
                                ": جو و میدان مغناطیسی\n" +
                                "\n" +
                                "جو ضخیم، متشکل از ~۹۶.۵٪ دی‌اکسید کربن و ~۳.۵٪ نیتروژن. ابرهای گوگردی و اسید سولفوریک در ارتفاعات وجود دارند که نور خورشید را بازتاب می‌دهند. " +
                                "فاقد میدان مغناطیسی داخلی قوی است، ولی تعامل میان جو و باد خورشیدی میدان مغناطیسی القایی ضعیفی ایجاد می‌کند\u202b." +
                                "\n" +
                                "\n" +
                                "\n" +
                                ": مأموریت\u200Cهای فضایی\n" +
                                "\n" +
                                "ونراها (اتحاد جماهیر شوروی): نخستین فرودها بر سطح زهره در دهه ۷۰ و ۸۰ میلادی. " +
                                "ماژلان (ناسا ، ۱۹۹۰): نقشه‌برداری راداری کامل از سطح. " +
                                "آکاتسوکی (ژاپن): مأموریت جاری برای مطالعه جو و تغییرات اقلیمی. " +
                                "مأموریت‌های آینده مثل VERITAS و EnVision به‌دنبال نقشه‌برداری دقیق‌تر و تحلیل ساختار زمین‌شناسی زهره‌اند\u202b." +
                                "\n" +
                                "\n" +
                                "\n" +
                                ": ترکیب شیمیایی و ساختاری داخلی\n" +
                                "\n" +
                                "هسته‌ای آهنی و سنگین، به‌احتمال زیاد ترکیبی از آهن و نیکل دارد. " +
                                "گوشته‌ای سیلیکاتی با عناصر سبکی مثل منیزیم و اکسیژن، و پوسته‌ای نسبتاً نازک از بازالت تشکیل دهنده سطح است. " +
                                "اگرچه هنوز الماس کشف نشده، ولی گرما و فشار سطحی آن شرایط لازم برای شکل‌گیری برخی ترکیبات عجیب را فراهم می‌کنند\u202b." +
                                "\n" +
                                "\n" +
                                "\n" +
                                ": ویژگی\u200Cهای خارق\u200Cالعاده\n" +
                                "\n" +
                                "چرخش معکوس (رجعی): برخلاف دیگر سیارات، خورشید از غرب طلوع می‌کند. " +
                                "اثر گلخانه‌ای شدید: جو ضخیم باعث به‌دام افتادن گرما و رسیدن دما به بالاترین میزان در منظومه شمسی شده است. " +
                                "وجود باران اسید سولفوریک در ابرها (که به‌سطح نمی‌رسد)، و احتمال رعدوبرق‌های ناشی از فعالیت‌های جوی شدید. " +
                                "درخشش زیاد در آسمان شب: زهره روشن‌ترین جرم آسمانی پس از ماه است و با چشم غیرمسلح قابل رؤیت است\u202b."
                    )
                    val textmortabet =
                        listOf("عطارد", "زمین", "مریخ", "مشتری", "زحل", "اورانوس", "نپتون")
                    val imagemortabet = listOf(
                        painterResource(R.drawable.atarod),
                        painterResource(R.drawable.zamin),
                        painterResource(R.drawable.merikh),
                        painterResource(R.drawable.moshtari),
                        painterResource(R.drawable.zohal),
                        painterResource(R.drawable.uranos),
                        painterResource(R.drawable.nepton)
                    )
                    val tarkib = textmortabet.zip(imagemortabet)
                    Column(
                        modifier = Modifier
                            .padding(25.dp)
                            .fillMaxSize()
                    ) {
                        Box(modifier = Modifier.fillMaxSize())
                        {
                            LazyColumn(
                                horizontalAlignment = Alignment.CenterHorizontally
                            ) {
                                items(textazohre) { letter ->
                                    Column(modifier = Modifier.padding(30.dp)) {
                                        Row {
                                            Image(
                                                painter = painterResource(id = R.drawable.zohre),
                                                contentDescription = null,
                                                contentScale = ContentScale.Crop,
                                                modifier = Modifier.size(100.dp)
                                            )
                                            Column {
                                                Text("")
                                                Row(
                                                    modifier = Modifier.fillMaxWidth(),
                                                    horizontalArrangement = Arrangement.End,
                                                    verticalAlignment = Alignment.CenterVertically
                                                ) {
                                                    Text(
                                                        "سیاره زهره",
                                                        fontSize = 25.sp,
                                                        color = Color.White,
                                                        maxLines = 1
                                                        , style = TextStyle(
                                                            shadow = Shadow(
                                                                color = Color(0xFFFFFFFF),
                                                                offset = Offset(0f ,0f)
                                                                , blurRadius = 20f
                                                            )
                                                        )
                                                    )
                                                }
                                            }
                                        }
                                    }
                                    Box(
                                        modifier = Modifier.fillMaxSize(),
                                        contentAlignment = Alignment.CenterStart,
                                    ) {

                                        Column {
                                            Text(
                                                "$letter",
                                                fontSize = 20.sp,
                                                color = Color(0xFFFFFFFF),
                                                lineHeight = 32.sp,
                                                textAlign = TextAlign.Right
                                                , style = TextStyle(
                                                    shadow = Shadow(
                                                        color = Color(0xFFFFFFFF),
                                                        offset = Offset(0f ,0f)
                                                        , blurRadius = 20f
                                                    )
                                                )
                                            )
                                            Text("")
                                            Text("")
                                            Text("")
                                            Text(
                                                "موضوعات مرتبط",
                                                textAlign = TextAlign.Right,
                                                modifier = Modifier.fillMaxWidth(),
                                                fontSize = 30.sp,
                                                color = Color.White
                                                , style = TextStyle(
                                                    shadow = Shadow(
                                                        color = Color(0xFFFFFFFF),
                                                        offset = Offset(0f ,0f)
                                                        , blurRadius = 20f
                                                    )
                                                )
                                            )
                                            Text("")
                                            LazyRow(reverseLayout = true) {
                                                items(tarkib) { (matnha, aksha) ->
                                                    Card(
                                                        modifier = Modifier
                                                            .width(250.dp)
                                                            .height(120.dp)
                                                            .padding(20.dp)
                                                            .clip(shape = RoundedCornerShape(100.dp)),
                                                        shape = RectangleShape,
                                                        colors = CardDefaults.cardColors(
                                                            containerColor = Color(0xFF0707AD)
                                                        )
                                                    ) {
                                                        Box(
                                                            modifier = Modifier.fillMaxSize(),
                                                            contentAlignment = Alignment.CenterEnd
                                                        ) {
                                                            Image(
                                                                painter = painterResource(id = R.drawable.card),
                                                                contentScale = ContentScale.Crop,
                                                                contentDescription = null,
                                                                modifier = Modifier.fillMaxSize()
                                                            )
                                                            Button(
                                                                modifier = Modifier.fillMaxSize(
                                                                ).indication(indication = null ,
                                                                    interactionSource = remember { MutableInteractionSource() }),
                                                                onClick = {
                                                                    if (matnha == "عطارد") {
                                                                        currentScreen = "atarod"
                                                                        backap = false
                                                                    }
                                                                    if (matnha == "زهره") {
                                                                        currentScreen = "zohre"
                                                                        backap = false
                                                                    }
                                                                    if (matnha == "زمین") {
                                                                        currentScreen = "zamin"
                                                                        backap = false
                                                                    }
                                                                    if (matnha == "مریخ") {
                                                                        currentScreen = "merikh"
                                                                        backap = false
                                                                    }
                                                                    if (matnha == "مشتری") {
                                                                        currentScreen = "moshtari"
                                                                        backap = false
                                                                    }
                                                                    if (matnha == "زحل") {
                                                                        currentScreen = "zohal"
                                                                        backap = false
                                                                    }
                                                                    if (matnha == "اورانوس") {
                                                                        currentScreen = "uranos"
                                                                        backap = false
                                                                    }
                                                                    if (matnha == "نپتون") {
                                                                        currentScreen = "nepton"
                                                                        backap = false
                                                                    }
                                                                },
                                                                colors = ButtonDefaults.buttonColors(
                                                                    contentColor = Color.Transparent,
                                                                    containerColor = Color.Transparent
                                                                )) {

                                                            }
                                                            Row() {
                                                                Column {
                                                                    Spacer(
                                                                        modifier = Modifier.height(
                                                                            4.dp
                                                                        )
                                                                    )
                                                                    Text(
                                                                        "$matnha",
                                                                        color = Color.White,
                                                                        fontSize = 30.sp
                                                                        , style = TextStyle(
                                                                            shadow = Shadow(
                                                                                color = Color(0xFFFFFFFF),
                                                                                offset = Offset(0f ,0f)
                                                                                , blurRadius = 20f
                                                                            )
                                                                        )
                                                                    )
                                                                }
                                                                Spacer(modifier = Modifier.width(15.dp))
                                                                Image(
                                                                    painter = aksha,
                                                                    contentDescription = null,
                                                                    contentScale = ContentScale.Crop,
                                                                    modifier = Modifier.size(50.dp)
                                                                )
                                                                Spacer(modifier = Modifier.width(20.dp))
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            Text("")
                                            Text("")
                                            Text("")
                                        }
                                    }
                                }
                            }
                            var count by remember { mutableStateOf(0) }
                            IconButton(
                                onClick = { count++ },
                                modifier = Modifier
                                    .size(70.dp)
                                    .align(Alignment.BottomEnd)
                                    .indication(indication = null ,
                                        interactionSource = remember { MutableInteractionSource() }),
                                colors = IconButtonDefaults.iconButtonColors(
                                    containerColor = Color(0xFF030A33)
                                )
                            ) {
                                if (count % 2 == 0) {
                                    Icon(
                                        imageVector = Icons.Default.Favorite,
                                        contentDescription = null,
                                        modifier = Modifier.size(50.dp),
                                        tint = Color.Transparent
                                    )
                                    Icon(
                                        imageVector = Icons.Default.FavoriteBorder,
                                        contentDescription = null,
                                        modifier = Modifier.size(50.dp),
                                        tint = Color.White
                                    )
                                }
                                if (count % 2 == 1) {
                                    Icon(
                                        imageVector = Icons.Default.Favorite,
                                        contentDescription = null,
                                        modifier = Modifier.size(50.dp),
                                        tint = Color.White
                                    )
                                    Icon(
                                        imageVector = Icons.Default.FavoriteBorder,
                                        contentDescription = null,
                                        modifier = Modifier.size(50.dp),
                                        tint = Color.White
                                    )
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}
@Composable
fun Merikh(){
    Image(
        painter = painterResource(id = R.drawable.app_back),
        contentScale = ContentScale.Crop,
        contentDescription = null
    )
    when(currentScreen) {
        "merikh" -> {
            Column {
                Card(
                    modifier = Modifier
                        .fillMaxWidth()
                        .height(32.5.dp),
                    shape = RectangleShape,
                    colors = CardDefaults.cardColors(containerColor = Color(0xFF030A33))
                ) {
                }
                Column(){
                    Card(
                        modifier = Modifier
                            .fillMaxWidth()
                            .height(50.dp),
                        shape = RectangleShape,
                        colors = CardDefaults.cardColors(containerColor = Color(0xFF0707AD))
                    ) {
                        Row(modifier = Modifier.padding(10.dp)) {
                            IconButton(onClick = {currentScreen = "asli"
                                backap = true
                            } , colors = IconButtonDefaults.iconButtonColors(contentColor = Color.White)
                                , modifier = Modifier.indication(indication = null ,
                                    interactionSource = remember { MutableInteractionSource() })) {
                                Icon(imageVector = Icons.Outlined.ArrowBack, contentDescription = null , modifier = Modifier.size(40.dp))
                            }
                            IconButton(
                                onClick = {},
                                colors = IconButtonDefaults.iconButtonColors(contentColor = Color.White)
                                , modifier = Modifier.indication(indication = null ,
                                    interactionSource = remember { MutableInteractionSource() })
                            ) {
                                Icon(imageVector = Icons.Default.Info, contentDescription = null)
                            }
                            IconButton(
                                onClick = {},
                                colors = IconButtonDefaults.iconButtonColors(contentColor = Color.White),
                                modifier = Modifier.indication(indication = null ,
                                    interactionSource = remember { MutableInteractionSource() })
                            ) {
                                Icon(imageVector = Icons.Default.Share, contentDescription = null)
                            }
                            Row(
                                modifier = Modifier.fillMaxWidth(),
                                horizontalArrangement = Arrangement.End,
                                verticalAlignment = Alignment.CenterVertically
                            ) {
                                Text("مریخ", fontSize = 20.sp, color = Color.White  , maxLines = 1 , fontWeight = FontWeight.ExtraBold)
                                IconButton(onClick = {expanded = true},
                                    modifier = Modifier.size(50.dp)
                                        .indication(indication = null ,
                                            interactionSource = remember { MutableInteractionSource() }),
                                    colors = IconButtonDefaults.iconButtonColors(contentColor = Color.White)) {
                                    Icon(imageVector = Icons.Default.Menu, contentDescription = null)
                                }
                            }
                        }
                    }
                }
                var textamars = listOf(": معرفی کلی\n" +
                        "\n" +
                        "چهارمین سیاره از خورشید، معروف به «سیاره سرخ» به‌دلیل رنگ متمایل به قرمز سطح آن (ناشی از اکسید آهن). " +
                        "یکی از مورد توجه‌ترین سیارات برای مطالعات اخترزیست‌شناسی و مأموریت‌های آیندهٔ انسانی." +
                        "فاصلهٔ متوسط از خورشید ≈۱.۵ واحد نجومی (~۲۲۷.۹ میلیون کیلومتر). " +
                        "هر ۶۸۷ روز زمینی یکبار به دور خورشید می‌گردد و هر ~۲۴.۶ ساعت یک دور کامل به دور محور خود می‌چرخد\u202b." +
                        "\n" +
                        "\n" +
                        "\n" +
                        ": ساختار و ابعاد\n" +
                        "\n" +
                        "شعاع میانگین ~۳۳۹۰ کیلومتر، قطر استوایی ~۶۷۹۲ کیلومتر. " +
                        "جرم کل ≈۶.۴۲×۱۰^۲۳ کیلوگرم (~۱۰.۷٪ جرم زمین). " +
                        "چگالی میانگین ~۳.۹۳ گرم بر سانتی‌متر مکعب. " +
                        "هسته‌ای احتمالی از آهن، نیکل و گوگرد با شعاع ~۱۷۹۴ کیلومتر؛ گوشته و پوسته سیلیکاتی دارد\u202b." +
                        "\n" +
                        "\n" +
                        "\n" +
                        ": سطح و ویژگی‌های زمینی آن\n" +
                        "\n" +
                        "سطح خشک و سنگی، با گرد قرمز رنگ پوشیده شده. " +
                        "ویژگی‌های شاخص: کوه عظیم اُلِمپوس (بزرگ‌ترین آتشفشان منظومه شمسی با ارتفاع ~۲۱.۹ کیلومتر)، " +
                        "دره‌ٔ Valles Marineris (طول ~۴۰۰۰ کیلومتر، عمق ~۷ کیلومتر)، و دشت‌های قطبی یخ‌زده. " +
                        "شواهدی از رودخانه‌ها و دریاچه‌های باستانی. " +
                        "فعالیت‌های زمین‌شناسی قدیمی اما فعلاً غیرفعال\u202b." +
                        "\n" +
                        "\n" +
                        "\n" +
                        ": مدار و چرخش\n" +
                        "\n" +
                        "مدار مریخ بیضوی‌تر از زمین؛ فاصلهٔ آن از خورشید بین ~۲۰۶ تا ~۲۴۹ میلیون کیلومتر متغیر است. " +
                        "انحراف محوری ≈۲۵.۲ درجه (نزدیک به زمین) که باعث ایجاد فصل‌ها می‌شود. " +
                        "سال مریخی ≈۶۸۷ روز زمینی، و هر شبانه‌روز مریخی («سُل») ≈۲۴ ساعت و ۳۹ دقیقه است\u202b." +
                        "\n" +
                        "\n" +
                        "\n" +
                        ": دما و شرایط سطح\n" +
                        "\n" +
                        "میانگین دمای سطح ≈−۶۳ درجه سلسیوس. " +
                        "بیشینه ثبت‌شده ~۲۰ و کمینه ~−۱۴۳ درجه سلسیوس. " +
                        "تغییرات دما در روز و شب بسیار شدید است. " +
                        "به‌دلیل جو نازک، ظرفیت نگهداری گرما پایین است. " +
                        "وجود طوفان‌های غباری عظیم که گاه سطح کل سیاره را می‌پوشانند\u202b." +
                        "\n" +
                        "\n" +
                        "\n" +
                        ": جو و میدان مغناطیسی\n" +
                        "\n" +
                        "جو بسیار نازک با فشار سطحی ~۰.۶٪ زمین؛ " +
                        "ترکیب: ~۹۵٪ CO₂، ~۲.۷٪ نیتروژن، ~۱.۶٪ آرگون، مقادیر جزئی از اکسیژن و بخار آب. " +
                        "فاقد میدان مغناطیسی جهانی، اما نواحی مغناطیسی محلی در پوسته یافت شده‌اند. " +
                        "جو مریخ قادر به محافظت کامل از پرتوهای کیهانی نیست\u202b." +
                        "\n" +
                        "\n" +
                        "\n" +
                        ": مأموریت‌های فضایی\n" +
                        "\n" +
                        "بیش از ۵۰ مأموریت فضایی از سوی ناسا و روس‌کاسموس. " +
                        "مریخ‌نوردهای مشهور: سوجورنر و اسپریت. " +
                        "اهداف: بررسی ژئولوژی، اقلیم، شواهد آب و حیات، آماده‌سازی سفر انسانی\u202b." +
                        "\n" +
                        "\n" +
                        "\n" +
                        ": ترکیب شیمیایی و ساختاری داخلی\n" +
                        "\n" +
                        "پوسته (ضخامت ~۵۰ کیلومتر): بازالت و سیلیکات‌های آهن-منیزیم. " +
                        "گوشته سیلیکاتی با عناصر آهن، منیزیم، و سیلیکون تا عمق ~۱۵۰۰ کیلومتر. " +
                        "هسته مرکزی احتمالی از آهن، نیکل و گوگرد، به‌طور کامل یا نیمه‌مایع. " +
                        "فاقد لایه دینامویی فعال؛ بنابراین میدان مغناطیسی جهانی ندارد\u202b." +
                        "\n" +
                        "\n" +
                        "\n" +
                        ": ویژگی‌های خارق‌العاده\n" +
                        "\n" +
                        "بزرگ‌ترین کوه و یکی از بزرگ‌ترین دره‌های منظومه شمسی. " +
                        "وجود یخ‌آب در قطبین و احتمال وجود آب مایع زیرزمینی. " +
                        "وجود شواهد زمین‌شناسی از رودها و دریاچه‌های باستانی. " +
                        "دو قمر کوچک: فوبوس و دیموس (احتمالاً سیارک‌های اسیرشده). " +
                        "جو نازک و طوفان‌های سراسری. " +
                        "هدف اصلی برای سکونت‌پذیری انسان و جستجوی حیات میکروبی\u202b."
                )
                val textmortabet =
                    listOf("عطارد", "زهره", "زمین", "مشتری", "زحل", "اورانوس", "نپتون")
                val imagemortabet = listOf(
                    painterResource(R.drawable.atarod),
                    painterResource(R.drawable.zohre),
                    painterResource(R.drawable.zamin),
                    painterResource(R.drawable.moshtari),
                    painterResource(R.drawable.zohal),
                    painterResource(R.drawable.uranos),
                    painterResource(R.drawable.nepton)
                )
                val tarkib = textmortabet.zip(imagemortabet)
                Column(
                    modifier = Modifier
                        .padding(25.dp)
                        .fillMaxSize()
                ) {
                    Box(modifier = Modifier.fillMaxSize())
                    {
                        LazyColumn(
                            horizontalAlignment = Alignment.CenterHorizontally
                        ) {
                            items(textamars) { letter ->
                                Column(modifier = Modifier.padding(30.dp)) {
                                    Row {
                                        Image(painter = painterResource(id = R.drawable.merikh)
                                            , contentDescription = null , contentScale = ContentScale.Crop
                                            , modifier = Modifier.size(100.dp))
                                        Column {
                                            Text("")
                                            Row(modifier = Modifier.fillMaxWidth()
                                                ,horizontalArrangement = Arrangement.End
                                                , verticalAlignment = Alignment.CenterVertically) {
                                                Text("سیاره مریخ" , fontSize = 25.sp  , color = Color.White
                                                    , style = TextStyle(
                                                        shadow = Shadow(
                                                            color = Color(0xFFFFFFFF),
                                                            offset = Offset(0f ,0f)
                                                            , blurRadius = 20f
                                                        )
                                                    ), maxLines = 1
                                                )
                                            }
                                        }
                                    }
                                }
                                Box(
                                    modifier = Modifier.fillMaxSize(),
                                    contentAlignment = Alignment.CenterStart,
                                ) {
                                    Column {
                                        Text(
                                            "$letter",
                                            fontSize = 20.sp,
                                            color = Color(0xFFFFFFFF),
                                            lineHeight = 32.sp,
                                            textAlign = TextAlign.Right
                                            , style = TextStyle(
                                                shadow = Shadow(
                                                    color = Color(0xFFFFFFFF),
                                                    offset = Offset(0f ,0f)
                                                    , blurRadius = 20f
                                                )
                                            )
                                        )
                                        Text("")
                                        Text("")
                                        Text("")
                                        Text(
                                            "موضوعات مرتبط",
                                            textAlign = TextAlign.Right,
                                            modifier = Modifier.fillMaxWidth(),
                                            fontSize = 30.sp,
                                            color = Color.White
                                            , style = TextStyle(
                                                shadow = Shadow(
                                                    color = Color(0xFFFFFFFF),
                                                    offset = Offset(0f ,0f)
                                                    , blurRadius = 20f
                                                )
                                            )
                                        )
                                        Text("")
                                        LazyRow(reverseLayout = true) {
                                            items(tarkib) { (matnha, aksha) ->
                                                Card(
                                                    modifier = Modifier
                                                        .width(250.dp)
                                                        .height(120.dp)
                                                        .padding(20.dp)
                                                        .clip(shape = RoundedCornerShape(100.dp)),
                                                    shape = RectangleShape,
                                                    colors = CardDefaults.cardColors(
                                                        containerColor = Color(
                                                            0xFF0707AD
                                                        )
                                                    )
                                                ) {
                                                    Box(
                                                        modifier = Modifier.fillMaxSize(),
                                                        contentAlignment = Alignment.CenterEnd
                                                    ) {
                                                        Image(
                                                            painter = painterResource(id = R.drawable.card),
                                                            contentScale = ContentScale.Crop,
                                                            contentDescription = null,
                                                            modifier = Modifier.fillMaxSize()
                                                        )
                                                        Button(
                                                            modifier = Modifier.fillMaxSize(
                                                            ).indication(indication = null ,
                                                                interactionSource = remember { MutableInteractionSource() }), onClick = {
                                                                if (matnha == "عطارد") {
                                                                    currentScreen = "atarod"
                                                                    backap = false
                                                                }
                                                                if (matnha == "زهره") {
                                                                    currentScreen = "zohre"
                                                                    backap = false
                                                                }
                                                                if (matnha == "زمین") {
                                                                    currentScreen = "zamin"
                                                                    backap = false
                                                                }
                                                                if (matnha == "مریخ") {
                                                                    currentScreen = "merikh"
                                                                    backap = false
                                                                }
                                                                if (matnha == "مشتری") {
                                                                    currentScreen = "moshtari"
                                                                    backap = false
                                                                }
                                                                if (matnha == "زحل") {
                                                                    currentScreen = "zohal"
                                                                    backap = false
                                                                }
                                                                if (matnha == "اورانوس") {
                                                                    currentScreen = "uranos"
                                                                    backap = false
                                                                }
                                                                if (matnha == "نپتون") {
                                                                    currentScreen = "nepton"
                                                                    backap = false
                                                                }
                                                            }, colors = ButtonDefaults.buttonColors(
                                                                contentColor = Color.Transparent,
                                                                containerColor = Color.Transparent
                                                            )) {

                                                        }
                                                        Row() {
                                                            Column {
                                                                Spacer(modifier = Modifier.height(4.dp))
                                                                Text(
                                                                    "$matnha",
                                                                    color = Color.White,
                                                                    fontSize = 30.sp
                                                                    , style = TextStyle(
                                                                        shadow = Shadow(
                                                                            color = Color(0xFFFFFFFF),
                                                                            offset = Offset(0f ,0f)
                                                                            , blurRadius = 20f
                                                                        )
                                                                    )
                                                                )
                                                            }
                                                            Spacer(modifier = Modifier.width(15.dp))
                                                            Image(
                                                                painter = aksha,
                                                                contentDescription = null,
                                                                contentScale = ContentScale.Crop,
                                                                modifier = Modifier.size(50.dp)
                                                            )
                                                            Spacer(modifier = Modifier.width(20.dp))
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        Text("")
                                        Text("")
                                        Text("")
                                    }
                                }
                            }
                        }
                        var count by remember { mutableStateOf(0) }
                        IconButton(
                            onClick = { count++ },
                            modifier = Modifier
                                .size(70.dp)
                                .align(Alignment.BottomEnd)
                                .indication(indication = null ,
                                    interactionSource = remember { MutableInteractionSource() }),
                            colors = IconButtonDefaults.iconButtonColors(
                                containerColor = Color(0xFF030A33)
                            )
                        ) {
                            if (count % 2 == 0) {
                                Icon(
                                    imageVector = Icons.Default.Favorite,
                                    contentDescription = null,
                                    modifier = Modifier.size(50.dp),
                                    tint = Color.Transparent
                                )
                                Icon(
                                    imageVector = Icons.Default.FavoriteBorder,
                                    contentDescription = null,
                                    modifier = Modifier.size(50.dp),
                                    tint = Color.White
                                )
                            }
                            if (count % 2 == 1) {
                                Icon(
                                    imageVector = Icons.Default.Favorite,
                                    contentDescription = null,
                                    modifier = Modifier.size(50.dp),
                                    tint = Color.White
                                )
                                Icon(
                                    imageVector = Icons.Default.FavoriteBorder,
                                    contentDescription = null,
                                    modifier = Modifier.size(50.dp),
                                    tint = Color.White
                                )
                            }
                        }
                    }
                }
            }
        }
    }
}
@Composable
fun Uranos(){
    Image(
        painter = painterResource(id = R.drawable.app_back),
        contentScale = ContentScale.Crop,
        contentDescription = null
    )
    when(currentScreen) {
        "uranos" -> {
            Column {
                Card(
                    modifier = Modifier
                        .fillMaxWidth()
                        .height(32.5.dp),
                    shape = RectangleShape,
                    colors = CardDefaults.cardColors(containerColor = Color(0xFF030A33))
                ) {
                }
                Column(){
                    Card(
                        modifier = Modifier
                            .fillMaxWidth()
                            .height(50.dp),
                        shape = RectangleShape,
                        colors = CardDefaults.cardColors(containerColor = Color(0xFF0707AD))
                    ) {
                        Row(modifier = Modifier.padding(10.dp)) {
                            IconButton(onClick = {currentScreen = "asli"
                                backap = true
                            } , colors = IconButtonDefaults.iconButtonColors(contentColor = Color.White) ,
                                modifier = Modifier.indication(indication = null ,
                                    interactionSource = remember { MutableInteractionSource() })){
                                Icon(imageVector = Icons.Outlined.ArrowBack, contentDescription = null , modifier = Modifier.size(40.dp))
                            }
                            IconButton(
                                onClick = {},
                                colors = IconButtonDefaults.iconButtonColors(contentColor = Color.White),
                                modifier = Modifier.indication(indication = null ,
                                    interactionSource = remember { MutableInteractionSource() })
                            ) {
                                Icon(imageVector = Icons.Default.Info, contentDescription = null)
                            }
                            IconButton(
                                onClick = {},
                                colors = IconButtonDefaults.iconButtonColors(contentColor = Color.White),
                                modifier = Modifier.indication(indication = null ,
                                    interactionSource = remember { MutableInteractionSource() })
                            ) {
                                Icon(imageVector = Icons.Default.Share, contentDescription = null)
                            }
                            Row(
                                modifier = Modifier.fillMaxWidth(),
                                horizontalArrangement = Arrangement.End,
                                verticalAlignment = Alignment.CenterVertically
                            ) {
                                Text("اورانوس", fontSize = 20.sp, color = Color.White  , maxLines = 1 , fontWeight = FontWeight.ExtraBold)
                                IconButton(onClick = {expanded = true},
                                    modifier = Modifier.size(50.dp)
                                        .indication(indication = null ,
                                            interactionSource = remember { MutableInteractionSource() }),
                                    colors = IconButtonDefaults.iconButtonColors(contentColor = Color.White)) {
                                    Icon(imageVector = Icons.Default.Menu, contentDescription = null)
                                }
                            }
                        }
                    }
                }
                val textauranus = listOf(
                    ": معرفی کلی\n" +
                            "\n" +
                            "هفتمین سیاره از خورشید و یکی از دو سیاره یخی («ایس گینت») منظومه شمسی است؛ به دلیل رنگ فیروزه‌ای روشنش شناخته می‌شود. " +
                            "فاصلهٔ متوسط از خورشید ≈۱۹.۱۹ واحد نجومی (~۲٫۸۷۱ میلیارد کیلومتر). " +
                            "یک گردش مداری کامل ≈۸۴٫۰۹ سال زمینی و یک دوران چرخشی (روز) ≈۱۷ ساعت و ۱۴ دقیقه و ۵۲ ثانیه است، حدود ۲۸ ثانیه طولانی‌تر از برآورد قدیمی‌تری که بر اساس داده‌های وویاگر 2 بود\u202b." +
                            "\n" +
                            "\n" +
                            "\n" +
                            ": ساختار و ابعاد\n" +
                            "\n" +
                            "شعاع متوسط ≈۲۵٬۳۶۲ کیلومتر (~۴ برابر زمین)، شعاع استوایی ۲۵٬۵۵۹ و پلاری ۲۴٬۹۷۳ کیلومتر. " +
                            "جرم ≈۸٫۶۸×۱۰^۲۵ کیلوگرم (~۱۴٫۵ برابر زمین) و چگالی میانگین ~۱٫۳۲۷ گرم بر سانتی‌متر مکعب. " +
                            "بنا به مدل‌های ساختاری، دارای هسته‌ای سنگی یخی، پوشیده در غشای بزرگ از مواد یخی (آب، آمونیاک، متان)، و لایه بیرونی گازی از هیدروژن و هلیوم\u202b." +
                            "\n" +
                            "\n" +
                            "\n" +
                            ": سطح و ویژگی‌های ظاهری\n" +
                            "\n" +
                            "فاقد سطح جامد؛ رنگ فیروزه‌ای از جذب نور قرمز توسط متان در جو است. " +
                            "ابرهای مختلف در لایه‌های جو تشکیل شده‌اند: به‌ویژه متان، آمونیاک، آب و هیدروسولفید آمونیوم در سطوح متفاوت فشار. " +
                            "دمای میانگین بسیار پایین، حداقل ≈۴۹–۵۳ کلوین (≈−۲۲۴ سلسیوس)، کمترین در میان سیارات\u202b." +
                            "\n" +
                            "\n" +
                            "\n" +
                            ": چرخش و مدار\n" +
                            "\n" +
                            "اورانوس به‌طرز منحصر‌به‌فردی روی یک‌پهلو (با انحراف ≈۹۷٫۷۷°) می‌چرخد؛ گویی روی زمین تاب می‌خورد. " +
                            "مدار تقریبی دایره‌ای با دامنهٔ فاصله از خورشید بین ~۱۹٫۱۹ ± ۰٫۵ واحد نجومی\u202b." +
                            "\n" +
                            "\n" +
                            "\n" +
                            ": جو و میدان مغناطیسی\n" +
                            "\n" +
                            "ترکیب جو: ~۸۳٪ هیدروژن، ۱۵٪ هلیوم، و ~۲٫۳٪ متان همراه با گازهای فرعی مانند بخار آب، آمونیاک و هیدروسولفید آمونیوم. " +
                            "جو دارای سه لایه اصلی: تروپوسفر، استراتوسفر و ترموسفر اگزوسفر؛ فاقد مزوسفر است. " +
                            "میدان مغناطیسی ناهمگون، تقریباً ۵۰ برابر زمین، با محور مغناطیسی منحرف و جابجا از مرکز سیاره. " +
                            "مگنتوسفر گسترده همراه با شفق‌های قطبی رادیویی، یو وی و ای وی ثبت شده است\u202b." +
                            "\n" +
                            "\n" +
                            "\n" +
                            ": مأموریت‌های فضایی\n" +
                            "\n" +
                            "تنها سفینهٔ فضایی که تاکنون از نزدیک عبور کرده، وویاگر 2 در سال ۱۹۸۶ بود. " +
                            "در آوریل ۲۰۲۵، پدیدهٔ گذر ستاره پشت اورانوس بررسی شد تا چگالی و دمای بالایی جو یادگیری شود و مسیر مأموریت‌های آینده مانند موسه باز شود. " +
                            "پیشنهادهایی برای ماموریت اوربیتر توسط ای اس ای (موسه پرتاب‌شده در ۲۰۲۶، رسیدن در ۲۰۴۴–۴۹) در حال بررسی هستند\u202b." +
                            "\n" +
                            "\n" +
                            "\n" +
                            ": ویژگی‌های خارق‌العاده\n" +
                            "\n" +
                            "چرخش غریب‌فهم روی یک پهلو باعث وقوع فصل‌های شدید (۴۲ سال شب و ۴۲ سال روز در قطب‌ها). " +
                            "جو یخی سرد‌ترین جو سیارات را دارد (حدود −۲۲۴ سلسیوس). " +
                            "میدان مغناطیسی منحصر‌به‌فرد و شفق‌های قطبی فعال همراه با واکنش‌های آی وی و یو وی. " +
                            "قمر بزرگ میراندا دارای شانس بالایی برای وجود آب زیرسطحی است—احتمال اقیانوس در زیر پوسته یخی. " +
                            "وجود حلقه‌ها و سیستم قمرهایی منحصر‌به‌فرد، همراه با پویاشناسی پیچیده‌ای دارد. " +
                            "ماه جدید نشان‌دهنده‌ی پویا بودن سیستم قمرهای کوچک و ساختار دینامیکی در حال شکل‌گیری است\u202b."
                )
                val textmortabet =
                    listOf("عطارد", "زهره", "زمین", "مریخ", "مشتری", "زحل", "نپتون")
                val imagemortabet = listOf(
                    painterResource(R.drawable.atarod),
                    painterResource(R.drawable.zohre),
                    painterResource(R.drawable.zamin),
                    painterResource(R.drawable.merikh),
                    painterResource(R.drawable.moshtari),
                    painterResource(R.drawable.zohal),
                    painterResource(R.drawable.nepton)
                )
                val tarkib = textmortabet.zip(imagemortabet)
                Column(
                    modifier = Modifier
                        .padding(25.dp)
                        .fillMaxSize()
                ) {
                    Box(modifier = Modifier.fillMaxSize())
                    {
                        LazyColumn(
                            horizontalAlignment = Alignment.CenterHorizontally
                        ) {
                            items(textauranus) { letter ->
                                Column(modifier = Modifier.padding(30.dp)) {
                                    Row {
                                        Image(painter = painterResource(id = R.drawable.uranos)
                                            , contentDescription = null , contentScale = ContentScale.Crop
                                            , modifier = Modifier.size(100.dp))
                                        Column {
                                            Text("")
                                            Row(modifier = Modifier.fillMaxWidth()
                                                ,horizontalArrangement = Arrangement.End
                                                , verticalAlignment = Alignment.CenterVertically) {
                                                Text("سیاره اورانوس" , fontSize = 25.sp  , color = Color.White
                                                    , style = TextStyle(
                                                        shadow = Shadow(
                                                            color = Color(0xFFFFFFFF),
                                                            offset = Offset(0f ,0f)
                                                            , blurRadius = 20f
                                                        )
                                                    ) , maxLines = 1
                                                )
                                            }
                                        }
                                    }
                                }
                                Box(
                                    modifier = Modifier.fillMaxSize(),
                                    contentAlignment = Alignment.CenterStart,
                                ) {
                                    Column {
                                        Text(
                                            "$letter",
                                            fontSize = 20.sp,
                                            color = Color(0xFFFFFFFF),
                                            lineHeight = 32.sp,
                                            textAlign = TextAlign.Right
                                            , style = TextStyle(
                                                shadow = Shadow(
                                                    color = Color(0xFFFFFFFF),
                                                    offset = Offset(0f ,0f)
                                                    , blurRadius = 20f
                                                )
                                            )
                                        )
                                        Text("")
                                        Text("")
                                        Text("")
                                        Text(
                                            "موضوعات مرتبط",
                                            textAlign = TextAlign.Right,
                                            modifier = Modifier.fillMaxWidth(),
                                            fontSize = 30.sp,
                                            color = Color.White
                                            , style = TextStyle(
                                                shadow = Shadow(
                                                    color = Color(0xFFFFFFFF),
                                                    offset = Offset(0f ,0f)
                                                    , blurRadius = 20f
                                                )
                                            )
                                        )
                                        Text("")
                                        LazyRow(reverseLayout = true) {
                                            items(tarkib) { (matnha, aksha) ->
                                                Card(
                                                    modifier = Modifier
                                                        .width(250.dp)
                                                        .height(120.dp)
                                                        .padding(20.dp)
                                                        .clip(shape = RoundedCornerShape(100.dp)),
                                                    shape = RectangleShape,
                                                    colors = CardDefaults.cardColors(
                                                        containerColor = Color(
                                                            0xFF0707AD
                                                        )
                                                    )
                                                ) {
                                                    Box(
                                                        modifier = Modifier.fillMaxSize(),
                                                        contentAlignment = Alignment.CenterEnd
                                                    ) {
                                                        Image(
                                                            painter = painterResource(id = R.drawable.card),
                                                            contentScale = ContentScale.Crop,
                                                            contentDescription = null,
                                                            modifier = Modifier.fillMaxSize()
                                                        )
                                                        Button(
                                                            modifier = Modifier.fillMaxSize(
                                                            ).indication(indication = null ,
                                                                interactionSource = remember { MutableInteractionSource() }), onClick = {
                                                                if (matnha == "عطارد") {
                                                                    currentScreen = "atarod"
                                                                    backap = false
                                                                }
                                                                if (matnha == "زهره") {
                                                                    currentScreen = "zohre"
                                                                    backap = false
                                                                }
                                                                if (matnha == "زمین") {
                                                                    currentScreen = "zamin"
                                                                    backap = false
                                                                }
                                                                if (matnha == "مریخ") {
                                                                    currentScreen = "merikh"
                                                                    backap = false
                                                                }
                                                                if (matnha == "مشتری") {
                                                                    currentScreen = "moshtari"
                                                                    backap = false
                                                                }
                                                                if (matnha == "زحل") {
                                                                    currentScreen = "zohal"
                                                                    backap = false
                                                                }
                                                                if (matnha == "اورانوس") {
                                                                    currentScreen = "uranos"
                                                                    backap = false
                                                                }
                                                                if (matnha == "نپتون") {
                                                                    currentScreen = "nepton"
                                                                    backap = false
                                                                }
                                                            }, colors = ButtonDefaults.buttonColors(
                                                                contentColor = Color.Transparent,
                                                                containerColor = Color.Transparent
                                                            )) {

                                                        }
                                                        Row() {
                                                            Column {
                                                                Spacer(modifier = Modifier.height(4.dp))
                                                                Text(
                                                                    "$matnha",
                                                                    color = Color.White,
                                                                    fontSize = 30.sp
                                                                    , style = TextStyle(
                                                                        shadow = Shadow(
                                                                            color = Color(0xFFFFFFFF),
                                                                            offset = Offset(0f ,0f)
                                                                            , blurRadius = 20f
                                                                        )
                                                                    )
                                                                )
                                                            }
                                                            Spacer(modifier = Modifier.width(15.dp))
                                                            Image(
                                                                painter = aksha,
                                                                contentDescription = null,
                                                                contentScale = ContentScale.Crop,
                                                                modifier = Modifier.size(50.dp)
                                                            )
                                                            Spacer(modifier = Modifier.width(20.dp))
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        Text("")
                                        Text("")
                                        Text("")
                                    }
                                }
                            }
                        }
                        var count by remember { mutableStateOf(0) }
                        IconButton(
                            onClick = { count++ },
                            modifier = Modifier
                                .size(70.dp)
                                .align(Alignment.BottomEnd)
                                .indication(indication = null ,
                                    interactionSource = remember { MutableInteractionSource() }),
                            colors = IconButtonDefaults.iconButtonColors(
                                containerColor = Color(0xFF030A33)
                            )
                        ) {
                            if (count % 2 == 0) {
                                Icon(
                                    imageVector = Icons.Default.Favorite,
                                    contentDescription = null,
                                    modifier = Modifier.size(50.dp),
                                    tint = Color.Transparent
                                )
                                Icon(
                                    imageVector = Icons.Default.FavoriteBorder,
                                    contentDescription = null,
                                    modifier = Modifier.size(50.dp),
                                    tint = Color.White
                                )
                            }
                            if (count % 2 == 1) {
                                Icon(
                                    imageVector = Icons.Default.Favorite,
                                    contentDescription = null,
                                    modifier = Modifier.size(50.dp),
                                    tint = Color.White
                                )
                                Icon(
                                    imageVector = Icons.Default.FavoriteBorder,
                                    contentDescription = null,
                                    modifier = Modifier.size(50.dp),
                                    tint = Color.White
                                )
                            }
                        }
                    }
                }
            }
        }
    }
}
@Composable
fun Nepton(){
    Image(
        painter = painterResource(id = R.drawable.app_back),
        contentScale = ContentScale.Crop,
        contentDescription = null
    )
    when(currentScreen) {
        "nepton" -> {
            Column {
                Card(
                    modifier = Modifier
                        .fillMaxWidth()
                        .height(32.5.dp),
                    shape = RectangleShape,
                    colors = CardDefaults.cardColors(containerColor = Color(0xFF030A33))
                ) {
                }
                Column(){
                    Card(
                        modifier = Modifier
                            .fillMaxWidth()
                            .height(50.dp),
                        shape = RectangleShape,
                        colors = CardDefaults.cardColors(containerColor = Color(0xFF0707AD))
                    ) {
                        Row(modifier = Modifier.padding(10.dp)) {
                            IconButton(onClick = {currentScreen = "asli"
                                backap = true
                            } , colors = IconButtonDefaults.iconButtonColors(contentColor = Color.White)
                                , modifier = Modifier.indication(indication = null ,
                                    interactionSource = remember { MutableInteractionSource() })){
                                Icon(imageVector = Icons.Outlined.ArrowBack, contentDescription = null , modifier = Modifier.size(40.dp))
                            }
                            IconButton(
                                onClick = {},
                                colors = IconButtonDefaults.iconButtonColors(contentColor = Color.White),
                                modifier = Modifier.indication(indication = null ,
                                    interactionSource = remember { MutableInteractionSource() })
                            ) {
                                Icon(imageVector = Icons.Default.Info, contentDescription = null)
                            }
                            IconButton(
                                onClick = {},
                                colors = IconButtonDefaults.iconButtonColors(contentColor = Color.White),
                                modifier = Modifier.indication(indication = null ,
                                    interactionSource = remember { MutableInteractionSource() })
                            ) {
                                Icon(imageVector = Icons.Default.Share, contentDescription = null)
                            }
                            Row(
                                modifier = Modifier.fillMaxWidth(),
                                horizontalArrangement = Arrangement.End,
                                verticalAlignment = Alignment.CenterVertically
                            ) {
                                Text("نپتون", fontSize = 20.sp, color = Color.White  , maxLines = 1 , fontWeight = FontWeight.ExtraBold)
                                IconButton(onClick = {expanded = true},
                                    modifier = Modifier.size(50.dp)
                                        .indication(indication = null ,
                                            interactionSource = remember { MutableInteractionSource() }),
                                    colors = IconButtonDefaults.iconButtonColors(contentColor = Color.White)) {
                                    Icon(imageVector = Icons.Default.Menu, contentDescription = null)
                                }
                            }
                        }
                    }
                }
                val textneptune = listOf(
                    ": معرفی کلی\n" +
                            "\n" +
                            "نپتون هشتمین و دورترین سیارهٔ شناخته‌شدهٔ منظومه شمسی از خورشید است؛ یکی از دو سیارهٔ یخی همراه با اورانوس. " +
                            "به خاطر رنگ آبی تیره‌اش شناخته می‌شود که ناشی از متان و ترکیبات دیگر در جو آن است. " +
                            "فاصلهٔ متوسط از خورشید ≈ ۳۰.۰۷ واحد نجومی (~۴.۵ میلیارد کیلومتر). " +
                            "یک گردش مداری کامل ≈ ۱۶۴.۸ سال زمینی طول می‌کشد، و دوران محوری (روز نپتونی) ≈ ۱۶ ساعت و ۶ دقیقه است\u202b." +
                            "\n" +
                            "\n" +
                            "\n" +
                            ": ساختار و ابعاد\n" +
                            "\n" +
                            "شعاع متوسط ≈ ۲۴٬۶۲۲ کیلومتر (حدود ۳.۹ برابر زمین)، با شعاع استوایی ≈ ۲۴٬۷۶۴ و پلاری ≈ ۲۴٬۳۴۱ کیلومتر. " +
                            "جرم ≈ ۱.۰۲×۱۰^۲۶ کیلوگرم (≈ ۱۷ برابر زمین). " +
                            "چگالی میانگین ≈ ۱.۶۳۸ گرم بر سانتی‌متر مکعب. " +
                            "ساختار داخلی شامل هسته‌ای از سنگ و یخ، لایه میانی از آب، آمونیاک و متان مایع، و پوشش بیرونی گازی متشکل از هیدروژن، هلیوم و متان\u202b." +
                            "\n" +
                            "\n" +
                            "\n" +
                            ": سطح و ویژگی‌های ظاهری\n" +
                            "\n" +
                            "" +
                            "رنگ آبی تیره به دلیل جذب نور قرمز توسط متان و ترکیبات ناشناخته دیگر است. " +
                            "طوفان‌ها و لکه‌های تاریک بزرگ، مشابه لکه سرخ مشتری، در جو دیده می‌شوند. " +
                            "بادهایی با سرعت بسیار زیاد (تا ۲۱۰۰ کیلومتر بر ساعت) سریع‌ترین در منظومه شمسی هستند\u202b." +
                            "\n" +
                            "\n" +
                            "\n" +
                            ": جو و شرایط جوی\n" +
                            "\n" +
                            "جو نپتون شامل ≈ ۸۰٪ هیدروژن، ≈ ۱۹٪ هلیوم و ≈ ۱.۵٪ متان است. " +
                            "دارای سه لایه: تروپوسفر، استراتوسفر و ترموسفر؛ مزوسفر مشخص ندارد. " +
                            "دمای سطح فوقانی ≈ ۵۵–۷۲ کلوین (حدود −۲۱۸ تا −۲۰۱ سلسیوس). " +
                            "جو دارای ویژگی‌های پویای شدید، لکه‌های تاریک، ابرهای یخی متان و طوفان‌های عظیم است\u202b." +
                            "\n" +
                            "\n" +
                            "\n" +
                            ": چرخش و مدار\n" +
                            "\n" +
                            "مدار نپتون بیضوی کم‌انحراف و تقریباً دایره‌ای است. " +
                            "فاصله از خورشید بین ۲۹.۸ تا ۳۰.۳ واحد نجومی. " +
                            "دورهٔ چرخش محوری ≈ ۱۶.۱ ساعت، با انحراف محوری ≈ ۲۸.۳۲ درجه؛ فصولی مشابه زمین اما بسیار طولانی‌تر دارد\u202b." +
                            "\n" +
                            "\n" +
                            "\n" +
                            ": میدان مغناطیسی و مگنتوسفر\n" +
                            "\n" +
                            "میدان مغناطیسی قوی و پیچیده با شیب زیاد نسبت به محور چرخش (≈۴۷ درجه) و جابجایی از مرکز سیاره دارد. " +
                            "شدت میدان مغناطیسی ≈ ۲۷ برابر زمین است. " +
                            "مگنتوسفر گسترده‌ای دارد که تا فاصلهٔ زیادی در فضا کشیده شده، همراه با شفق‌های قطبی در طول موج‌های یو وی و رادیویی\u202b." +
                            "\n" +
                            "\n" +
                            "\n" +
                            ": حلقه‌ها\n" +
                            "\n" +
                            "نپتون دارای ۶ حلقه باریک و کم‌نور است: حلقه‌های آدامز، لِوِریه، گاله، لَسِل، آراگو، و حلقهٔ درونی. " +
                            "اغلب از ذرات غباری تیره و آلی تشکیل شده‌اند، بسیار نازک و با پایداری نسبی پایین. " +
                            "توسط وویاگر 2 در سال ۱۹۸۹ کشف شدند. برخی حلقه‌ها دارای قوس‌های غلیظی هستند که برخلاف پیش‌بینی‌ها پراکنده نمی‌شوند\u202b." +
                            "\n" +
                            "\n" +
                            "\n" +
                            ": قمرها\n" +
                            "\n" +
                            "دارای ۱۴ قمر شناخته‌شده است. " +
                            "بزرگ‌ترین قمر، تريتون (Triton)، دارای حرکت معکوس و احتمالا شکارشده از کمربند کوئیپر است. " +
                            "تريتون قطری ≈ ۲۷۰۷ کیلومتر دارد و احتمال وجود اقیانوس زیرسطحی در آن وجود دارد. " +
                            "سطح تريتون پوشیده از نیتروژن یخ‌زده است و چشمه‌های یخی فعال دارد. " +
                            "قمرهای دیگر شامل نایاد، تالاسا، دسپینا، گالاتئا، لاریسه، پروتئوس و... هستند. " +
                            "آخرین قمر تأییدشده (هیپوکمپ) در ۲۰۱۳ توسط تلسکوپ فضایی هابل کشف شد\u202b." +
                            "\n" +
                            "\n" +
                            "\n" +
                            ": مأموریت‌های فضایی\n" +
                            "\n" +
                            "تنها مأموریت عبوری: فضاپیمای وویاگر 2 در ۲۵ اوت ۱۹۸۹ از فاصله ~۴۹۵۰ کیلومتری سطح ابرها عبور کرد. " +
                            "تصاویر و داده‌های ارزشمندی درباره جو، حلقه‌ها و قمرها ثبت کرد. " +
                            "در حال حاضر هیچ مأموریت فعالی به نپتون وجود ندارد. " +
                            "پیشنهادهایی برای ارسال مأموریت‌هایی مانند تریدنت (پیشنهاد ناسا) و مأموریت مداری به نپتون و تريتون در دست بررسی هستند\u202b." +
                            "\n" +
                            "\n" +
                            "\n" +
                            ": ترکیب شیمیایی و ساختار داخلی\n" +
                            "\n" +
                            "جو: بیشتر هیدروژن و هلیوم، با متان، آب، آمونیاک، اتان، استیلن و سایر گازهای اثرگذار بر رنگ و رفتار جوی. " +
                            "لایهٔ داخلی از یخ‌های فشرده و سیلیکات‌ها، همراه با هستهٔ احتمالی سنگی به جرم ۱.۲ تا ۱.۵ برابر زمین. " +
                            "وجود گرمای داخلی قوی که بیش از ۲ برابر انرژی دریافتی از خورشید را بازتاب می‌دهد\u202b." +
                            "\n" +
                            "\n" +
                            "\n" +
                            ": ویژگی‌های خارق‌العاده\n" +
                            "\n" +
                            "بادهای فوق‌سریع تا ۲۱۰۰ کیلومتر بر ساعت؛ سریع‌ترین در منظومه شمسی. " +
                            "طوفان‌های غول‌آسا و لکه‌های تاریک مانند لکه تاریک بزرگ. " +
                            "چرخش سریع (روز ≈ ۱۶.۱ ساعت) با دمای سطح بسیار پایین (≈ −۲۱۸ سلسیوس). " +
                            "قمر تريتون با حرکت معکوس و پتانسیل اقیانوس زیرسطحی. " +
                            "میدان مغناطیسی چرخیده و نامتقارن همراه با شفق‌های فرا‌بنفش. " +
                            "حلقه‌های ضعیف و ناپایدار با قوس‌هایی ناشناخته. " +
                            "گرمای داخلی مرموز با منشاء ناشناخته\u202b."
                )
                val textmortabet =
                    listOf("عطارد", "زهره", "زمین", "مریخ", "مشتری", "زحل", "اورانوس")
                val imagemortabet = listOf(
                    painterResource(R.drawable.atarod),
                    painterResource(R.drawable.zohre),
                    painterResource(R.drawable.zamin),
                    painterResource(R.drawable.merikh),
                    painterResource(R.drawable.moshtari),
                    painterResource(R.drawable.zohal),
                    painterResource(R.drawable.uranos)
                )
                val tarkib = textmortabet.zip(imagemortabet)
                Column(
                    modifier = Modifier
                        .padding(25.dp)
                        .fillMaxSize()
                ) {
                    Box(modifier = Modifier.fillMaxSize())
                    {
                        LazyColumn(
                            horizontalAlignment = Alignment.CenterHorizontally
                        ) {
                            items(textneptune) { letter ->
                                Column(modifier = Modifier.padding(30.dp)) {
                                    Row {
                                        Image(painter = painterResource(id = R.drawable.nepton)
                                            , contentDescription = null , contentScale = ContentScale.Crop
                                            , modifier = Modifier.size(100.dp))
                                        Column {
                                            Text("")
                                            Row(modifier = Modifier.fillMaxWidth()
                                                ,horizontalArrangement = Arrangement.End
                                                , verticalAlignment = Alignment.CenterVertically) {
                                                Text("سیاره نپتون" , fontSize = 25.sp  , color = Color.White, style = TextStyle(
                                                    shadow = Shadow(
                                                        color = Color(0xFFFFFFFF),
                                                        offset = Offset(0f ,0f)
                                                        , blurRadius = 20f
                                                    )
                                                ), maxLines = 1
                                                )
                                            }
                                        }
                                    }
                                }
                                Box(
                                    modifier = Modifier.fillMaxSize(),
                                    contentAlignment = Alignment.CenterStart,
                                ) {
                                    Column {
                                        Text(
                                            "$letter",
                                            fontSize = 20.sp,
                                            color = Color(0xFFFFFFFF),
                                            lineHeight = 32.sp,
                                            textAlign = TextAlign.Right
                                            , style = TextStyle(
                                                shadow = Shadow(
                                                    color = Color(0xFFFFFFFF),
                                                    offset = Offset(0f ,0f)
                                                    , blurRadius = 20f
                                                )
                                            )
                                        )
                                        Text("")
                                        Text("")
                                        Text("")
                                        Text(
                                            "موضوعات مرتبط",
                                            textAlign = TextAlign.Right,
                                            modifier = Modifier.fillMaxWidth(),
                                            fontSize = 30.sp,
                                            color = Color.White
                                            , style = TextStyle(
                                                shadow = Shadow(
                                                    color = Color(0xFFFFFFFF),
                                                    offset = Offset(0f ,0f)
                                                    , blurRadius = 20f
                                                )
                                            )
                                        )
                                        Text("")
                                        LazyRow(reverseLayout = true) {
                                            items(tarkib) { (matnha, aksha) ->
                                                Card(
                                                    modifier = Modifier
                                                        .width(250.dp)
                                                        .height(120.dp)
                                                        .padding(20.dp)
                                                        .clip(shape = RoundedCornerShape(100.dp)),
                                                    shape = RectangleShape,
                                                    colors = CardDefaults.cardColors(
                                                        containerColor = Color(
                                                            0xFF0707AD
                                                        )
                                                    )
                                                ) {
                                                    Box(
                                                        modifier = Modifier.fillMaxSize(),
                                                        contentAlignment = Alignment.CenterEnd
                                                    ) {
                                                        Image(
                                                            painter = painterResource(id = R.drawable.card),
                                                            contentScale = ContentScale.Crop,
                                                            contentDescription = null,
                                                            modifier = Modifier.fillMaxSize()
                                                        )
                                                        Button(
                                                            modifier = Modifier.fillMaxSize(
                                                            ).indication(indication = null ,
                                                                interactionSource = remember { MutableInteractionSource() }), onClick = {
                                                                if (matnha == "عطارد") {
                                                                    currentScreen = "atarod"
                                                                    backap = false
                                                                }
                                                                if (matnha == "زهره") {
                                                                    currentScreen = "zohre"
                                                                    backap = false
                                                                }
                                                                if (matnha == "زمین") {
                                                                    currentScreen = "zamin"
                                                                    backap = false
                                                                }
                                                                if (matnha == "مریخ") {
                                                                    currentScreen = "merikh"
                                                                    backap = false
                                                                }
                                                                if (matnha == "مشتری") {
                                                                    currentScreen = "moshtari"
                                                                    backap = false
                                                                }
                                                                if (matnha == "زحل") {
                                                                    currentScreen = "zohal"
                                                                    backap = false
                                                                }
                                                                if (matnha == "اورانوس") {
                                                                    currentScreen = "uranos"
                                                                    backap = false
                                                                }
                                                                if (matnha == "نپتون") {
                                                                    currentScreen = "nepton"
                                                                    backap = false
                                                                }
                                                            }, colors = ButtonDefaults.buttonColors(
                                                                contentColor = Color.Transparent,
                                                                containerColor = Color.Transparent
                                                            )) {

                                                        }
                                                        Row() {
                                                            Column {
                                                                Spacer(modifier = Modifier.height(4.dp))
                                                                Text(
                                                                    "$matnha",
                                                                    color = Color.White,
                                                                    fontSize = 30.sp
                                                                    , style = TextStyle(
                                                                        shadow = Shadow(
                                                                            color = Color(0xFFFFFFFF),
                                                                            offset = Offset(0f ,0f)
                                                                            , blurRadius = 20f
                                                                        )
                                                                    )
                                                                )
                                                            }
                                                            Spacer(modifier = Modifier.width(15.dp))
                                                            Image(
                                                                painter = aksha,
                                                                contentDescription = null,
                                                                contentScale = ContentScale.Crop,
                                                                modifier = Modifier.size(50.dp)
                                                            )
                                                            Spacer(modifier = Modifier.width(20.dp))
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        Text("")
                                        Text("")
                                        Text("")
                                    }
                                }
                            }
                        }
                        var count by remember { mutableStateOf(0) }
                        IconButton(
                            onClick = { count++ },
                            modifier = Modifier
                                .size(70.dp)
                                .align(Alignment.BottomEnd)
                                .indication(indication = null ,
                                    interactionSource = remember { MutableInteractionSource() }),
                            colors = IconButtonDefaults.iconButtonColors(
                                containerColor = Color(0xFF030A33)
                            )
                        ) {
                            if (count % 2 == 0) {
                                Icon(
                                    imageVector = Icons.Default.Favorite,
                                    contentDescription = null,
                                    modifier = Modifier.size(50.dp),
                                    tint = Color.Transparent
                                )
                                Icon(
                                    imageVector = Icons.Default.FavoriteBorder,
                                    contentDescription = null,
                                    modifier = Modifier.size(50.dp),
                                    tint = Color.White
                                )
                            }
                            if (count % 2 == 1) {
                                Icon(
                                    imageVector = Icons.Default.Favorite,
                                    contentDescription = null,
                                    modifier = Modifier.size(50.dp),
                                    tint = Color.White
                                )
                                Icon(
                                    imageVector = Icons.Default.FavoriteBorder,
                                    contentDescription = null,
                                    modifier = Modifier.size(50.dp),
                                    tint = Color.White
                                )
                            }
                        }
                    }
                }
            }
        }
    }
}

























//ستارگان

















@Composable
fun Sun(){
    Image(
        painter = painterResource(id = R.drawable.app_back),
        contentScale = ContentScale.Crop,
        contentDescription = null
    )
    when(currentScreen) {
        "sun" -> {
            Column {
                Card(
                    modifier = Modifier
                        .fillMaxWidth()
                        .height(32.5.dp),
                    shape = RectangleShape,
                    colors = CardDefaults.cardColors(containerColor = Color(0xFF030A33))
                ) {
                }
                Column(){
                    Card(
                        modifier = Modifier
                            .fillMaxWidth()
                            .height(50.dp),
                        shape = RectangleShape,
                        colors = CardDefaults.cardColors(containerColor = Color(0xFF0707AD))
                    ) {
                        Row(modifier = Modifier.padding(10.dp)) {
                            IconButton(onClick = {currentScreen = "asli1"
                                backap = true
                            } , colors = IconButtonDefaults.iconButtonColors(contentColor = Color.White)
                                , modifier = Modifier.indication(indication = null ,
                                    interactionSource = remember { MutableInteractionSource() })){
                                Icon(imageVector = Icons.Outlined.ArrowBack, contentDescription = null , modifier = Modifier.size(40.dp))
                            }
                            IconButton(
                                onClick = {},
                                colors = IconButtonDefaults.iconButtonColors(contentColor = Color.White),
                                modifier = Modifier.indication(indication = null ,
                                    interactionSource = remember { MutableInteractionSource() })
                            ) {
                                Icon(imageVector = Icons.Default.Info, contentDescription = null)
                            }
                            IconButton(
                                onClick = {},
                                colors = IconButtonDefaults.iconButtonColors(contentColor = Color.White),
                                modifier = Modifier.indication(indication = null ,
                                    interactionSource = remember { MutableInteractionSource() })
                            ) {
                                Icon(imageVector = Icons.Default.Share, contentDescription = null)
                            }
                            Row(
                                modifier = Modifier.fillMaxWidth(),
                                horizontalArrangement = Arrangement.End,
                                verticalAlignment = Alignment.CenterVertically
                            ) {
                                Text("خورشیدی", fontSize = 20.sp, color = Color.White  , maxLines = 1 , fontWeight = FontWeight.ExtraBold)
                                IconButton(onClick = {expanded = true},
                                    modifier = Modifier.size(50.dp)
                                        .indication(indication = null ,
                                            interactionSource = remember { MutableInteractionSource() }),
                                    colors = IconButtonDefaults.iconButtonColors(contentColor = Color.White)) {
                                    Icon(imageVector = Icons.Default.Menu, contentDescription = null)
                                }
                            }
                        }
                    }
                }


                var textsetareghan = listOf(": معرفی کلی\n" +
                        "\n" +
                        "ستارگان خورشیدی یا ستارگان نوع جی (مثل خورشید) ستارگان رشته اصلی هستند با جرم حدود ۰.۸–۱.۲ جرم خورشید، دمای سطح ~۵۷۸۰ کلوین و طول عمر چند میلیارد سال. خورشید به‌عنوان نمونه‌ای بومی، ستاره‌ای نوع جی2وی است و حدود ۴.۶ میلیارد سال عمر دارد، در نیمه‌ی اول مسیر خود در رشته‌ی اصلی قرار دارد\u202b." +
                        "\n" +
                        "\n" +
                        "\n" +
                        ": ساختار و ابعاد داخلی\n" +
                        "\n" +
                        "هسته: از مرکز تا ~۰.۲ شعاع خورشید (~۱۴۰,۰۰۰ کیلومتر)، دما ≈۱۵ میلیون کلوین، چگالی ≈۱۵۰٬۰۰۰ کیلوگرم متر مکعب، فشار ~۲.۶×۱۰^7 گیگاپاسکال. حدود ۳۴٪ جرم خورشید را دربر دارد و بیشتر انرژی از طریق زنجیره پروتون-پروتون و سی ان او تولید می‌کند. " +
                        "ناحیه تابشی: از ~۰.۲ تا ~۰.۷ شعاع خورشیدی؛ انرژی از طریق فوتون‌ها انتقال می‌یابد. دما از ~۷ میلیون به ~۲ میلیون کاهش می‌یابد و چگالی از ~۲۰٬۰۰۰ کیلوگرم متر مکعب به ~۲۰۰ کیلوگرم متر مکعب می‌رسد. " +
                        "ناحیه گذار: لایه‌ای باریک بین ناحیه تابشی و همرفتی که مکانیزم ژنراتور مغناطیسی را سبب می‌شود. " +
                        "ناحیه همرفتی: از ~۰.۷ تا سطح خورشید (≈۵۰۰٬۰۰۰ کیلومتر ضخامت)، همرفت و جریان‌های بزرگ انتقال انرژی را بر عهده دارند؛ ایجاد دانه‌دانه‌های خورشیدی می‌کنند\u202b." +
                        "\n" +
                        "\n" +
                        "\n" +
                        ": جو و ویژگی‌های سطحی\n" +
                        "\n" +
                        "فوتوسفر: ضخامت حدود ۲۵۰–۴۰۰ کیلومتر؛ دما ≈۵۷۸۰ کلوین (در مرکز) و چگالی ~۰.۲ گرم متر مکعب (~۱۰⁻⁴ کیلوگرم متر مکعب). لکه‌های خورشیدی دمای ~۳۸۰۰ کلوین در مرکز را دارند. " +
                        "کروموسفیر: بالای فوتوسفر تا ~۱۶۰۰ کیلومتر ضخامت با دمای صعودی تا ~۲۵٬۰۰۰ کلوین؛ قابل مشاهده فقط در کسوف یا ابزار خاص. " +
                        "منطقه گذار & کرونا: دمای تا چند میلیون کلوین (۱–۲ میلیون کلوین معمولاً)؛ کرونا گرم‌تر از فوتوسفر است و دما برخلاف انتظار افزایش می‌یابد. " +
                        "بادی خورشیدی و هلیوسفر: پلاسمای باردار از کرونا خارج شده، فضای اطراف خورشید را پوشش می‌دهد تا حدود ۱۲۰ واحد نجومی؛ نقش کلیدی در ایجاد شفق‌ها و تعامل با فضای میان‌ستاره‌ای دارد\u202b." +
                        "\n" +
                        "\n" +
                        "\n" +
                        ": ترکیب شیمیایی و عناصر سنگین\n" +
                        "\n" +
                        "خورشید حدود ۷۴٫۹٪ هیدروژن، ۲۳٫۸٪ هلیوم، و ~۱٫۴٪ “فلزات” دارد (عناصر سنگینتر) در سطح فوتوسفر؛ فلزات شامل اکسیژن، کربن، نئون، آهن و سیلیکون هستند. " +
                        "برای هر میلیون اتم هیدروژن: ≈۹۸٬۰۰۰ هلیوم، ۸۵۰ اکسیژن، ۳۶۰ کربن، ۱۲۰ نئون، ۱۱۰ نیتروژن، ۴۰ منیزیم، ۳۵ آهن/سیلیکون\u202b." +
                        "\n" +
                        "\n" +
                        "\n" +
                        ": چرخش، عمر و تکاملی\n" +
                        "\n" +
                        "دوره چرخش به دور خود ≈۶۰۹ ساعت (~۲۵٫۴۴ روز در استوای ۱۶°) و کج‌شدگی محوری ~۷٫۲۵° نسبت به دایره البروج. " +
                        "طول عمر کلی در رشته‌ی اصلی ≈۱۰ میلیارد سال؛ خورشید در حدود ۴٫۶ میلیارد سال سن دارد و حدود ۵ میلیارد سال دیگر در این مرحله خواهد ماند. " +
                        "روشنایی در طول زمان نزدیک به ۳۰٪ افزایش یافته و نرخ افزایش فعلی ~۱٪ در هر صد میلیون سال است\u202b." +
                        "\n" +
                        "\n" +
                        "\n" +
                        ": ویژگی‌های مغناطیسی و فعالیت سطح\n" +
                        "\n" +
                        "میدان مغناطیسی پیچیده خورشید منجر به پدیده‌هایی مثل لکه‌های خورشیدی، شراره‌ها و پرتاب جرم تاجی می‌شود. دوره فعالیت خورشیدی ≈۱۱ سال است و چرخه مغناطیسی کل ≈۲۲ سال می‌باشد. " +
                        "جریان‌های ریز در ناحیه همرفتی و لایه تاکوکلاین نقش مهمی در تولید میدان دارند\u202b." +
                        "\n" +
                        "\n" +
                        "\n" +
                        ": مأموریت‌ها و روش‌های رصد\n" +
                        "\n" +
                        "مأموریت‌های مهم مثل: سوهو سولار و پارکر و... مدام ساختار داخلی خورشید، باد خورشیدی، میدان مغناطیسی و دینامیک سطح را پایش می‌کنند. " +
                        "هلیوسیزمولژی و نجوم ارتعاشی با استفاده از داده‌های کپلر و پلاتو برای بررسی ساختار داخلی ستارگان خورشیدی دیگر و مطالعه مدهای پی و جی کاربرد دارد\u202b." +
                        "\n" +
                        "\n" +
                        "\n" +
                        ": ویژگی‌های برجسته\n" +
                        "\n" +
                        "خورشید نمونه‌ای نرمال از یک ستاره‌ی رشته اصلی است؛ جرم، دما و ترکیب شیمیایی‌اش به‌عنوان مرجع برای بررسی سایر ستارگان و سیارات به‌کار می‌رود. " +
                        "میدان مغناطیسی فعال آن، چرخه‌ها و تغییرپذیری‌های سطحی‌اش اثرات مستقیم بر آب‌وهوای فضا و تکنولوژی زمین دارد. " +
                        "استقرار زندگی روی زمین وابسته به تعادلی دقیق از انرژی، ترکیب شیمیایی و ثبات چند میلیارد ساله خورشید بوده است. " +
                        " با ترکیب داده‌های ساختار داخلی، ترکیب و تحولات، مدل خورشیدی استاندارد همچنان مرجع اصلی نجومی است\u202b."
                )
                val textmortabet =
                    listOf("پرنور و مشهور", "غول و ابرغول", "کوتوله و داغ", "نوترونی و انفجاری", "متغیر و خاص", "مناطق ستاره زایی", "اصول نظری")
                val imagemortabet = listOf(
                    painterResource(R.drawable.starlite),
                    painterResource(R.drawable.bigstar),
                    painterResource(R.drawable.starlittle),
                    painterResource(R.drawable.starnetrun),
                    painterResource(R.drawable.starvarible),
                    painterResource(R.drawable.starnebula),
                    painterResource(R.drawable.starnazari)
                )
                val tarkib = textmortabet.zip(imagemortabet)
                Column(
                    modifier = Modifier
                        .padding(25.dp)
                        .fillMaxSize()
                ) {
                    Box(modifier = Modifier.fillMaxSize())
                    {
                        LazyColumn(
                            horizontalAlignment = Alignment.CenterHorizontally
                        ) {
                            items(textsetareghan) { letter ->
                                Column(modifier = Modifier.padding(30.dp)) {
                                    Row {
                                        Image(painter = painterResource(id = R.drawable.sun)
                                            , contentDescription = null , contentScale = ContentScale.Crop
                                            , modifier = Modifier.size(100.dp))
                                        Column {
                                            Text("")
                                            Row(modifier = Modifier.fillMaxWidth()
                                                ,horizontalArrangement = Arrangement.End
                                                , verticalAlignment = Alignment.CenterVertically) {
                                                Text("ستارگان خورشیدی" , fontSize = 20.sp  , color = Color.White , style = TextStyle(
                                                    shadow = Shadow(
                                                        color = Color(0xFFFFFFFF),
                                                        offset = Offset(0f ,0f)
                                                        , blurRadius = 20f
                                                    )
                                                ) , maxLines = 1)
                                            }
                                        }
                                    }
                                }
                                Box(
                                    modifier = Modifier.fillMaxSize(),
                                    contentAlignment = Alignment.CenterStart,
                                ) {
                                    Column {
                                        Text(
                                            "$letter",
                                            fontSize = 20.sp,
                                            color = Color(0xFFFFFFFF),
                                            lineHeight = 32.sp,
                                            textAlign = TextAlign.Right
                                            , style = TextStyle(
                                                shadow = Shadow(
                                                    color = Color(0xFFFFFFFF),
                                                    offset = Offset(0f ,0f)
                                                    , blurRadius = 20f
                                                )
                                            )
                                        )
                                        Text("")
                                        Text("")
                                        Text("")
                                        Text(
                                            "موضوعات مرتبط",
                                            textAlign = TextAlign.Right,
                                            modifier = Modifier.fillMaxWidth(),
                                            fontSize = 30.sp,
                                            color = Color.White
                                            , style = TextStyle(
                                                shadow = Shadow(
                                                    color = Color(0xFFFFFFFF),
                                                    offset = Offset(0f ,0f)
                                                    , blurRadius = 20f
                                                )
                                            )
                                        )
                                        Text("")
                                        LazyRow(reverseLayout = true) {
                                            items(tarkib) { (matnha, aksha) ->
                                                Card(
                                                    modifier = Modifier
                                                        .width(250.dp)
                                                        .height(120.dp)
                                                        .padding(20.dp)
                                                        .clip(shape = RoundedCornerShape(100.dp)),
                                                    shape = RectangleShape,
                                                    colors = CardDefaults.cardColors(
                                                        containerColor = Color(
                                                            0xFF0707AD
                                                        )
                                                    )
                                                ) {
                                                    Box(
                                                        modifier = Modifier.fillMaxSize(),
                                                        contentAlignment = Alignment.CenterEnd
                                                    ) {
                                                        Image(
                                                            painter = painterResource(id = R.drawable.card),
                                                            contentScale = ContentScale.Crop,
                                                            contentDescription = null,
                                                            modifier = Modifier.fillMaxSize()
                                                        )
                                                        Button(
                                                            modifier = Modifier.fillMaxSize(
                                                            ).indication(indication = null ,
                                                                interactionSource = remember { MutableInteractionSource() }), onClick = {
                                                                if (matnha == "خورشیدی") {
                                                                    currentScreen = "sun"
                                                                    backap = false
                                                                }
                                                                if (matnha == "پرنور و مشهور") {
                                                                    currentScreen = "starlite"
                                                                    backap = false
                                                                }
                                                                if (matnha == "غول و ابرغول") {
                                                                    currentScreen = "starbig"
                                                                    backap = false
                                                                }
                                                                if (matnha == "کوتوله و داغ") {
                                                                    currentScreen = "starlittle"
                                                                    backap = false
                                                                }
                                                                if (matnha == "نوترونی و انفجاری") {
                                                                    currentScreen = "starnetron"
                                                                    backap = false
                                                                }
                                                                if (matnha == "متغیر و خاص") {
                                                                    currentScreen = "starvarible"
                                                                    backap = false
                                                                }
                                                                if (matnha == "مناطق ستاره زایی") {
                                                                    currentScreen = "starnebula"
                                                                    backap = false
                                                                }
                                                                if (matnha == "اصول نظری") {
                                                                    currentScreen = "starnazari"
                                                                    backap = false
                                                                }
                                                            }, colors = ButtonDefaults.buttonColors(
                                                                contentColor = Color.Transparent,
                                                                containerColor = Color.Transparent
                                                            )) {
                                                        }
                                                        Row() {
                                                            Spacer(modifier = Modifier.width(10.dp))
                                                            Column {
                                                                Spacer(modifier = Modifier.height(9.dp))
                                                                Text(
                                                                    "$matnha",
                                                                    color = Color.White,
                                                                    fontSize = 20.sp
                                                                    , style = TextStyle(
                                                                        shadow = Shadow(
                                                                            color = Color(0xFFFFFFFF),
                                                                            offset = Offset(0f ,0f)
                                                                            , blurRadius = 20f
                                                                        )
                                                                    )
                                                                )
                                                            }
                                                            Spacer(modifier = Modifier.width(15.dp))
                                                            Image(
                                                                painter = aksha,
                                                                contentDescription = null,
                                                                contentScale = ContentScale.Crop,
                                                                modifier = Modifier.size(50.dp)
                                                            )
                                                            Spacer(modifier = Modifier.width(15.dp))
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        Text("")
                                        Text("")
                                        Text("")
                                    }
                                }
                            }
                        }
                        var count by remember { mutableStateOf(0) }
                        IconButton(
                            onClick = { count++ },
                            modifier = Modifier
                                .size(70.dp)
                                .align(Alignment.BottomEnd)
                                .indication(indication = null ,
                                    interactionSource = remember { MutableInteractionSource() }),
                            colors = IconButtonDefaults.iconButtonColors(
                                containerColor = Color(0xFF030A33)
                            )
                        ) {
                            if (count % 2 == 0) {
                                Icon(
                                    imageVector = Icons.Default.Favorite,
                                    contentDescription = null,
                                    modifier = Modifier.size(50.dp),
                                    tint = Color.Transparent
                                )
                                Icon(
                                    imageVector = Icons.Default.FavoriteBorder,
                                    contentDescription = null,
                                    modifier = Modifier.size(50.dp),
                                    tint = Color.White
                                )
                            }
                            if (count % 2 == 1) {
                                Icon(
                                    imageVector = Icons.Default.Favorite,
                                    contentDescription = null,
                                    modifier = Modifier.size(50.dp),
                                    tint = Color.White
                                )
                                Icon(
                                    imageVector = Icons.Default.FavoriteBorder,
                                    contentDescription = null,
                                    modifier = Modifier.size(50.dp),
                                    tint = Color.White
                                )
                            }
                        }
                    }
                }
            }
        }
    }
}

@Composable
fun Starlite(){
    Image(
        painter = painterResource(id = R.drawable.app_back),
        contentScale = ContentScale.Crop,
        contentDescription = null
    )
    when(currentScreen) {
        "starlite" -> {
            Column {
                Card(
                    modifier = Modifier
                        .fillMaxWidth()
                        .height(32.5.dp),
                    shape = RectangleShape,
                    colors = CardDefaults.cardColors(containerColor = Color(0xFF030A33))
                ) {
                }
                Column(){
                    Card(
                        modifier = Modifier
                            .fillMaxWidth()
                            .height(50.dp),
                        shape = RectangleShape,
                        colors = CardDefaults.cardColors(containerColor = Color(0xFF0707AD))
                    ) {
                        Row(modifier = Modifier.padding(10.dp)) {
                            IconButton(onClick = {currentScreen = "asli1"
                                backap = true
                            } , colors = IconButtonDefaults.iconButtonColors(contentColor = Color.White)
                                , modifier = Modifier.indication(indication = null ,
                                    interactionSource = remember { MutableInteractionSource() })){
                                Icon(imageVector = Icons.Outlined.ArrowBack, contentDescription = null , modifier = Modifier.size(40.dp))
                            }
                            IconButton(
                                onClick = {},
                                colors = IconButtonDefaults.iconButtonColors(contentColor = Color.White),
                                modifier = Modifier.indication(indication = null ,
                                    interactionSource = remember { MutableInteractionSource() })
                            ) {
                                Icon(imageVector = Icons.Default.Info, contentDescription = null)
                            }
                            IconButton(
                                onClick = {},
                                colors = IconButtonDefaults.iconButtonColors(contentColor = Color.White),
                                modifier = Modifier.indication(indication = null ,
                                    interactionSource = remember { MutableInteractionSource() })
                            ) {
                                Icon(imageVector = Icons.Default.Share, contentDescription = null)
                            }
                            Row(
                                modifier = Modifier.fillMaxWidth(),
                                horizontalArrangement = Arrangement.End,
                                verticalAlignment = Alignment.CenterVertically
                            ) {
                                Text("پرنور و مشهور", fontSize = 20.sp, color = Color.White  , maxLines = 1 , fontWeight = FontWeight.ExtraBold)
                                IconButton(onClick = {expanded = true},
                                    modifier = Modifier.size(50.dp)
                                        .indication(indication = null ,
                                            interactionSource = remember { MutableInteractionSource() }),
                                    colors = IconButtonDefaults.iconButtonColors(contentColor = Color.White)) {
                                    Icon(imageVector = Icons.Default.Menu, contentDescription = null)
                                }
                            }
                        }
                    }
                }


                var textsetareghanepornoor = listOf(": معرفی کلی\n" +
                        "\n" +
                        "ستارگان پرنور و مشهور شامل درخشان‌ترین و تأثیرگذارترین ستارگان قابل مشاهده در آسمان شب هستند. این ستارگان معمولاً جرم بالا، درخشندگی زیاد، فاصله کم یا ترکیبی از آن‌ها را دارند. برخی از آن‌ها در مرحله‌های پایانی عمر خود قرار دارند (ابرغول‌ها یا غول‌های قرمز)، برخی در رشته اصلی‌اند، و برخی دیگر پیش‌ستاره یا حتی باقی‌مانده ستاره‌ای هستند. معروف‌ترین آن‌ها شامل شعرای یمانی (سِیریوس)، شباهنگ، آنتارس، بیت‌الجبّار، دبران، قلب‌الاسد، سماک اعزل، سهیل، رجل‌الجبار و شباهنگ هستند\u202b." +
                        "\n" +
                        "\n" +
                        "\n" +
                        ": ویژگی‌های فیزیکی و نوری\n" +
                        "\n" +
                        "بیشتر این ستارگان دارای جرم بالا (از ۱ تا ۲۰ برابر خورشید)، دمای سطح از ~۳۰۰۰ تا ~۳۰٬۰۰۰ کلوین و قدر ظاهری بین ~-۱٫۴ (مثل شعرای یمانی) تا ~+۱٫۵ هستند. " +
                        "رنگ آن‌ها بسته به دما از آبی، سفید، زرد تا قرمز متغیر است. " +
                        "طیف‌های آن‌ها از نوع‌های مختلف بوده و طیف‌نگاری آن‌ها اطلاعاتی درباره ترکیب، دما، گرانش سطحی و سرعت چرخش فراهم می‌کند. " +
                        "مثلاً: شعرای یمانی، بیت‌الجبّار، آنتارس، دبران، قلب‌الاسد\u202b." +
                        "\n" +
                        "\n" +
                        "\n" +
                        ": فاصله، اندازه و درخشندگی\n" +
                        "\n" +
                        "فاصله آن‌ها از زمین متنوع است: از ۸٫۶ سال نوری (شعرای یمانی) تا بیش از ۶۰۰ سال نوری (مثل بیت‌الجبار). " +
                        "شعاع برخی از آن‌ها تا صدها برابر شعاع خورشید می‌رسد (مثل آنتارس ~۶۸۰ برابر خورشید). " +
                        "درخشندگی آن‌ها بین چند ده تا صدها هزار برابر خورشید است؛ بیت‌الجبار ~۱۲۰٬۰۰۰، آنتارس ~۱۰٬۰۰۰، دبران ~۵۰۰ برابر خورشید\u202b." +
                        "\n" +
                        "\n" +
                        "\n" +
                        ": مرحله‌های تکامل و وضعیت کنونی\n" +
                        "\n" +
                        "برخی مانند دبران در مرحله غول قرمز قرار دارند (ستاره‌ای در حال انبساط پس از اتمام هیدروژن مرکزی). " +
                        "ستارگانی مثل شعرای یمانی هنوز در رشته اصلی هستند. بیت‌الجبار در مرحله ابرغول آبی پیش از ابرنواختر است. " +
                        "آنتارس در مراحل پایانی عمر خود به‌عنوان ابرغول سرخ قرار دارد و انتظار می‌رود در چند میلیون سال آینده به ابرنواختر تبدیل شود\u202b." +
                        "\n" +
                        "\n" +
                        "\n" +
                        ": اهمیت فرهنگی، رصدی و تاریخی\n" +
                        "\n" +
                        "این ستارگان از دوران باستان در اسطوره‌ها، نجوم قدیم و هدایت دریایی اهمیت داشتند. " +
                        "برای مثال، سهیل در تقویم عربی و ایرانی تعیین‌کننده زمان برداشت محصول بود. " +
                        "شعرای یمانی در مصر باستان نشانه طغیان نیل بود. " +
                        "صورت‌های فلکی معروفی مانند جبار، ثور، اسد، عقرب ستارگان شاخصی را شامل می‌شوند\u202b." +
                        "\n" +
                        "\n" +
                        "\n" +
                        ": ترکیب شیمیایی و داده‌های طیفی\n" +
                        "\n" +
                        "طیف‌سنجی این ستارگان اطلاعاتی درباره وجود عناصر سنگین مانند آهن، کلسیم، منیزیم و سدیم می‌دهد. " +
                        "برای ستارگان غول‌پیکر، خطوط طیفی پهن‌تر و نشانه‌هایی از فرآیندهای همجوشی داخلی مشاهده می‌شود. " +
                        "برخی از آن‌ها دارای خطوط H آلفا قوی یا جذب و انتشار شدید هستند که به فعالیت‌های سطحی و توده‌ای اشاره دارد\u202b." +
                        "\n" +
                        "\n" +
                        "\n" +
                        ": حرکت، سرعت شعاعی و منظومه‌ها\n" +
                        "\n" +
                        "برخی از این ستارگان بخشی از منظومه‌های دوتایی یا چندتایی هستند (مثل شعرای یمانی). " +
                        "سرعت شعاعی آن‌ها از طریق افست دوپلر تعیین شده و ممکن است مثبت (دورشونده) یا منفی (نزدیک‌شونده) باشد. " +
                        "حرکت خاص ستارگان پرنوری که نزدیک‌اند بیشتر دیده می‌شود، مثل حرکت سالانه شعرای یمانی\u202b." +
                        "\n" +
                        "\n" +
                        "\n" +
                        ": مأموریت‌های فضایی و ابزارهای بررسی\n" +
                        "\n" +
                        "ماهواره‌هایی مثل گایا فاصله، حرکت، رنگ و روشنایی این ستارگان را با دقت میلی‌ثانیه قوسی اندازه‌گیری می‌کنند. " +
                        "تلسکوپ‌هایی چون هابل، اسپیتزر و جیمز وب داده‌هایی از طیف مادون قرمز و فرابنفش فراهم کرده‌اند. " +
                        "با استفاده از تداخل‌سنجی اندازه زاویه‌ای و ساختار سطحی برخی ستارگان مانند بیت‌الجبار و آنتارس بررسی شده‌اند\u202b." +
                        "\n" +
                        "\n" +
                        "\n" +
                        ": ویژگی‌های خاص و اثرات کیهانی\n" +
                        "\n" +
                        "این ستارگان با نور بسیار زیاد در تشکیل سحابی‌ها، بادهای ستاره‌ای، غنی‌سازی محیط میان‌ستاره‌ای با عناصر سنگین نقش دارند. " +
                        "ابرغول‌هایی مثل آنتارس و بیت‌الجبار می‌توانند پس از انفجار ابرنواختری به ستاره نوترونی یا سیاه‌چاله تبدیل شوند. " +
                        "درخشندگی زیاد آن‌ها مرجع کالیبراسیون طیفی و نوری برای سایر ستارگان و کهکشان‌هاست. " +
                        "برخی از آن‌ها دارای شواهدی از دیسک‌های گازی و غباری پیرامونی هستند، که ممکن است نشان‌دهنده شکل‌گیری سیارات باشند\u202b."
                )
                val textmortabet =
                    listOf("خورشیدی", "غول و ابرغول", "کوتوله و داغ", "نوترونی و انفجاری", "متغیر و خاص", "مناطق ستاره زایی", "اصول نظری")
                val imagemortabet = listOf(
                    painterResource(R.drawable.sun),
                    painterResource(R.drawable.bigstar),
                    painterResource(R.drawable.starlittle),
                    painterResource(R.drawable.starnetrun),
                    painterResource(R.drawable.starvarible),
                    painterResource(R.drawable.starnebula),
                    painterResource(R.drawable.starnazari)
                )
                val tarkib = textmortabet.zip(imagemortabet)
                Column(
                    modifier = Modifier
                        .padding(25.dp)
                        .fillMaxSize()
                ) {
                    Box(modifier = Modifier.fillMaxSize())
                    {
                        LazyColumn(
                            horizontalAlignment = Alignment.CenterHorizontally
                        ) {
                            items(textsetareghanepornoor) { letter ->
                                Column(modifier = Modifier.padding(30.dp)) {
                                    Row {
                                        Image(painter = painterResource(id = R.drawable.starlite)
                                            , contentDescription = null , contentScale = ContentScale.Crop
                                            , modifier = Modifier.size(100.dp))
                                        Column {
                                            Text("")
                                            Row(modifier = Modifier.fillMaxWidth()
                                                ,horizontalArrangement = Arrangement.End
                                                , verticalAlignment = Alignment.CenterVertically) {
                                                Text("ستارگان پرنور و مشهور" , fontSize = 20.sp  , color = Color.White , style = TextStyle(
                                                    shadow = Shadow(
                                                        color = Color(0xFFFFFFFF),
                                                        offset = Offset(0f ,0f)
                                                        , blurRadius = 20f
                                                    )
                                                ), maxLines = 1)
                                            }
                                        }
                                    }
                                }
                                Box(
                                    modifier = Modifier.fillMaxSize(),
                                    contentAlignment = Alignment.CenterStart,
                                ) {
                                    Column {
                                        Text(
                                            "$letter",
                                            fontSize = 20.sp,
                                            color = Color(0xFFFFFFFF),
                                            lineHeight = 32.sp,
                                            textAlign = TextAlign.Right
                                            , style = TextStyle(
                                                shadow = Shadow(
                                                    color = Color(0xFFFFFFFF),
                                                    offset = Offset(0f ,0f)
                                                    , blurRadius = 20f
                                                )
                                            )
                                        )
                                        Text("")
                                        Text("")
                                        Text("")
                                        Text(
                                            "موضوعات مرتبط",
                                            textAlign = TextAlign.Right,
                                            modifier = Modifier.fillMaxWidth(),
                                            fontSize = 30.sp,
                                            color = Color.White
                                            , style = TextStyle(
                                                shadow = Shadow(
                                                    color = Color(0xFFFFFFFF),
                                                    offset = Offset(0f ,0f)
                                                    , blurRadius = 20f
                                                )
                                            )
                                        )
                                        Text("")
                                        LazyRow(reverseLayout = true) {
                                            items(tarkib) { (matnha, aksha) ->
                                                Card(
                                                    modifier = Modifier
                                                        .width(250.dp)
                                                        .height(120.dp)
                                                        .padding(20.dp)
                                                        .clip(shape = RoundedCornerShape(100.dp)),
                                                    shape = RectangleShape,
                                                    colors = CardDefaults.cardColors(
                                                        containerColor = Color(
                                                            0xFF0707AD
                                                        )
                                                    )
                                                ) {
                                                    Box(
                                                        modifier = Modifier.fillMaxSize(),
                                                        contentAlignment = Alignment.CenterEnd
                                                    ) {
                                                        Image(
                                                            painter = painterResource(id = R.drawable.card),
                                                            contentScale = ContentScale.Crop,
                                                            contentDescription = null,
                                                            modifier = Modifier.fillMaxSize()
                                                        )
                                                        Button(
                                                            modifier = Modifier.fillMaxSize(
                                                            ).indication(indication = null ,
                                                                interactionSource = remember { MutableInteractionSource() }), onClick = {
                                                                if (matnha == "خورشیدی") {
                                                                    currentScreen = "sun"
                                                                    backap = false
                                                                }
                                                                if (matnha == "پرنور و مشهور") {
                                                                    currentScreen = "starlite"
                                                                    backap = false
                                                                }
                                                                if (matnha == "غول و ابرغول") {
                                                                    currentScreen = "starbig"
                                                                    backap = false
                                                                }
                                                                if (matnha == "کوتوله و داغ") {
                                                                    currentScreen = "starlittle"
                                                                    backap = false
                                                                }
                                                                if (matnha == "نوترونی و انفجاری") {
                                                                    currentScreen = "starnetron"
                                                                    backap = false
                                                                }
                                                                if (matnha == "متغیر و خاص") {
                                                                    currentScreen = "starvarible"
                                                                    backap = false
                                                                }
                                                                if (matnha == "مناطق ستاره زایی") {
                                                                    currentScreen = "starnebula"
                                                                    backap = false
                                                                }
                                                                if (matnha == "اصول نظری") {
                                                                    currentScreen = "starnazari"
                                                                    backap = false
                                                                }
                                                            }, colors = ButtonDefaults.buttonColors(
                                                                contentColor = Color.Transparent,
                                                                containerColor = Color.Transparent
                                                            )) {
                                                        }
                                                        Row() {
                                                            Spacer(modifier = Modifier.width(10.dp))
                                                            Column {
                                                                Spacer(modifier = Modifier.height(9.dp))
                                                                Text(
                                                                    "$matnha",
                                                                    color = Color.White,
                                                                    fontSize = 20.sp
                                                                    , style = TextStyle(
                                                                        shadow = Shadow(
                                                                            color = Color(0xFFFFFFFF),
                                                                            offset = Offset(0f ,0f)
                                                                            , blurRadius = 20f
                                                                        )
                                                                    )
                                                                )
                                                            }
                                                            Spacer(modifier = Modifier.width(15.dp))
                                                            Image(
                                                                painter = aksha,
                                                                contentDescription = null,
                                                                contentScale = ContentScale.Crop,
                                                                modifier = Modifier.size(50.dp)
                                                            )
                                                            Spacer(modifier = Modifier.width(15.dp))
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        Text("")
                                        Text("")
                                        Text("")
                                    }
                                }
                            }
                        }
                        var count by remember { mutableStateOf(0) }
                        IconButton(
                            onClick = { count++ },
                            modifier = Modifier
                                .size(70.dp)
                                .align(Alignment.BottomEnd)
                                .indication(indication = null ,
                                    interactionSource = remember { MutableInteractionSource() }),
                            colors = IconButtonDefaults.iconButtonColors(
                                containerColor = Color(0xFF030A33)
                            )
                        ) {
                            if (count % 2 == 0) {
                                Icon(
                                    imageVector = Icons.Default.Favorite,
                                    contentDescription = null,
                                    modifier = Modifier.size(50.dp),
                                    tint = Color.Transparent
                                )
                                Icon(
                                    imageVector = Icons.Default.FavoriteBorder,
                                    contentDescription = null,
                                    modifier = Modifier.size(50.dp),
                                    tint = Color.White
                                )
                            }
                            if (count % 2 == 1) {
                                Icon(
                                    imageVector = Icons.Default.Favorite,
                                    contentDescription = null,
                                    modifier = Modifier.size(50.dp),
                                    tint = Color.White
                                )
                                Icon(
                                    imageVector = Icons.Default.FavoriteBorder,
                                    contentDescription = null,
                                    modifier = Modifier.size(50.dp),
                                    tint = Color.White
                                )
                            }
                        }
                    }
                }
            }
        }
    }
}

@Composable
fun Starbig(){
    Image(
        painter = painterResource(id = R.drawable.app_back),
        contentScale = ContentScale.Crop,
        contentDescription = null
    )
    when(currentScreen) {
        "starbig" -> {
            Column {
                Card(
                    modifier = Modifier
                        .fillMaxWidth()
                        .height(32.5.dp),
                    shape = RectangleShape,
                    colors = CardDefaults.cardColors(containerColor = Color(0xFF030A33))
                ) {
                }
                Column(){
                    Card(
                        modifier = Modifier
                            .fillMaxWidth()
                            .height(50.dp),
                        shape = RectangleShape,
                        colors = CardDefaults.cardColors(containerColor = Color(0xFF0707AD))
                    ) {
                        Row(modifier = Modifier.padding(10.dp)) {
                            IconButton(onClick = {currentScreen = "asli1"
                                backap = true
                            } , colors = IconButtonDefaults.iconButtonColors(contentColor = Color.White)
                                , modifier = Modifier.indication(indication = null ,
                                    interactionSource = remember { MutableInteractionSource() })){
                                Icon(imageVector = Icons.Outlined.ArrowBack, contentDescription = null , modifier = Modifier.size(40.dp))
                            }
                            IconButton(
                                onClick = {},
                                colors = IconButtonDefaults.iconButtonColors(contentColor = Color.White),
                                modifier = Modifier.indication(indication = null ,
                                    interactionSource = remember { MutableInteractionSource() })
                            ) {
                                Icon(imageVector = Icons.Default.Info, contentDescription = null)
                            }
                            IconButton(
                                onClick = {},
                                colors = IconButtonDefaults.iconButtonColors(contentColor = Color.White),
                                modifier = Modifier.indication(indication = null ,
                                    interactionSource = remember { MutableInteractionSource() })
                            ) {
                                Icon(imageVector = Icons.Default.Share, contentDescription = null)
                            }
                            Row(
                                modifier = Modifier.fillMaxWidth(),
                                horizontalArrangement = Arrangement.End,
                                verticalAlignment = Alignment.CenterVertically
                            ) {
                                Text("غول و ابرغول", fontSize = 20.sp, color = Color.White  , maxLines = 1 , fontWeight = FontWeight.ExtraBold)
                                IconButton(onClick = {expanded = true},
                                    modifier = Modifier.size(50.dp)
                                        .indication(indication = null ,
                                            interactionSource = remember { MutableInteractionSource() }),
                                    colors = IconButtonDefaults.iconButtonColors(contentColor = Color.White)) {
                                    Icon(imageVector = Icons.Default.Menu, contentDescription = null)
                                }
                            }
                        }
                    }
                }


                var textsetareghol = listOf(": معرفی کلی\n" +
                        "\n" +
                        "ستارگان غول و ابرغول ستارگانی بسیار بزرگ‌تر و درخشان‌تر از خورشید هستند که در مراحل پایانی زندگی قرار دارند. ستارگان غول معمولاً ۰٫۵ تا ۱۰ برابر جرم خورشید دارند و شعاع آن‌ها می‌تواند ده‌ها تا صدها برابر خورشید باشد. ستارگان ابرغول بسیار عظیم‌ترند و جرمی تا ۱۰۰ برابر خورشید و شعاعی تا هزار برابر آن دارند. آن‌ها درخشان‌ترین ستارگان شناخته‌شده هستند و طول عمر بسیار کوتاهی (میلیون‌ها سال) دارند\u202b." +
                        "\n" +
                        "\n" +
                        "\n" +
                        ": ساختار و لایه‌ها\n" +
                        "\n" +
                        "هسته: بسته به مرحلهٔ تکاملی، همجوشی هیدروژن، هلیوم یا عناصر سنگین‌تر (کربن، نئون، اکسیژن، سیلیکون و حتی آهن) در هسته انجام می‌شود. " +
                        "چگالی هسته می‌تواند به چند صد هزار کیلوگرم بر متر مکعب برسد و دما در برخی ابرغول‌ها تا بیش از ۳۰۰ میلیون کلوین افزایش یابد. " +
                        "لایه‌های بیرونی معمولاً با گسترش زیاد و چگالی کم همراه هستند که باعث حجم عظیم اما چگالی پایین ستاره می‌شود. " +
                        "پوشش‌های همرفتی گسترده منجر به تلاطم‌های شدید سطحی و افزایش فعالیت مغناطیسی می‌شوند\u202b." +
                        "\n" +
                        "\n" +
                        "\n" +
                        ": ویژگی‌های فیزیکی\n" +
                        "\n" +
                        "جرم: ستارگان غول معمولاً بین ۰٫۵ تا ۱۰ جرم خورشید، و ابرغول‌ها بین ۱۰ تا بیش از ۱۰۰ برابر جرم خورشید دارند. " +
                        "شعاع: از ده‌ها برابر (غول‌های سرخ) تا هزار برابر خورشید (ابرغول‌های سرد مانند بیتل‌جوس). " +
                        "درخشندگی: تا صدها هزار برابر خورشید؛ در مورد ابرغول‌های آبی و سفید می‌تواند به میلیون‌ها برابر برسد. " +
                        "دمای سطحی: بین ~۳۵۰۰ درجه کلوین (ابرغول‌های سرخ) تا بیش از ۵۰٬۰۰۰ درجه کلوین (ابرغول‌های آبی). " +
                        "چگالی میانگین در لایه‌های بیرونی ممکن است تا کمتر از ۰٫۰۰۰۱ کیلوگرم بر متر مکعب باشد\u202b." +
                        "\n" +
                        "\n" +
                        "\n" +
                        ": رنگ و طیف نوری\n" +
                        "\n" +
                        "رنگ وابسته به دمای سطح است: غول‌های سرخ → نارنجی/قرمز (۳۵۰۰–۴۵۰۰ کلوین)، غول‌های زرد → زرد/سفید (۵۰۰۰–۶۰۰۰ کلوین)، ابرغول‌های آبی → آبی/سفید (۲۰٬۰۰۰–۵۰٬۰۰۰ کلوین). " +
                        "طیف‌های جذبی پرخط دارند و اغلب نوسانات نوری ناشی از تغییرات سطحی یا تپش‌های داخلی دیده می‌شود. " +
                        "طیف برخی ابرغول‌ها مانند کارینا پیچیدگی بالایی دارد\u202b." +
                        "\n" +
                        "\n" +
                        "\n" +
                        ": تکامل و سرنوشت نهایی\n" +
                        "\n" +
                        "پس از اتمام همجوشی هیدروژن در هسته، به غول‌های سرخ یا آبی تبدیل می‌شوند. " +
                        "در مراحل نهایی، ابرغول‌ها می‌توانند دچار ابرنواختر نوع ۲ شوند. " +
                        "نتیجه نهایی بسته به جرم: ستاره نوترونی یا سیاه‌چاله. " +
                        "غول‌های کم‌جرم‌تر به سحابی سیاره‌ای و کوتوله سفید تبدیل می‌شوند\u202b." +
                        "\n" +
                        "\n" +
                        "\n" +
                        ": نمونه‌های مشهور\n" +
                        "\n" +
                        "بیتل‌جوس: ابرغول سرخ، شعاع ~۹۰۰ برابر خورشید، فاصله ~۶۴۰ سال نوری. " +
                        "آنتارس (قلب‌العقرب): ابرغول سرخ، دمای ~۳۸۰۰ کلوین، شعاع ~۷۰۰ برابر خورشید. " +
                        "ریگل: ابرغول آبی، دمای ~۱۲٬۰۰۰ کلوین، یکی از درخشان‌ترین ستارگان آسمان. " +
                        "وای‌وی سکستی: یکی از بزرگ‌ترین ستارگان شناخته‌شده با شعاعی تا ~۲۱۰۰ برابر خورشید\u202b." +
                        "\n" +
                        "\n" +
                        "\n" +
                        ": اهمیت کیهانی و رصدی\n" +
                        "\n" +
                        "ابرغول‌ها کارخانه‌های عناصر سنگین در کیهان‌اند. " +
                        "در طی فرایندهای همجوشی و ابرنواختر، عناصر سنگینی مانند آهن، نیکل و اورانیوم تولید می‌شود. " +
                        "رصد تغییرات نوری و طیفی آن‌ها در شناخت ساختار داخلی، تپش ستاره‌ای، و اختلالات مغناطیسی مؤثر است. " +
                        "تلسکوپ‌هایی مثل هابل، جیمز وب در پایش آن‌ها نقش دارند\u202b." +
                        "\n" +
                        "\n" +
                        "\n" +
                        ": مأموریت‌ها و مطالعات مهم\n" +
                        "\n" +
                        "پایش دقیق ابرغول‌ها در مأموریت‌هایی مانند گایا، کپلر، تِس، و تلسکوپ جیمز وب انجام می‌شود. " +
                        "پروژه‌هایی مانند آلما ساختارهای سطحی و بادهای ستاره‌ای را بررسی می‌کنند. " +
                        "مدل‌سازی‌های سه‌بعدی و شبیه‌سازی‌های اَبَرنواخترها کمک به درک سرنوشت نهایی این ستارگان می‌کند\u202b." +
                        "\n" +
                        "\n" +
                        "\n" +
                        ": ویژگی‌های خارق‌العاده\n" +
                        "\n" +
                        "درخشان‌ترین و عظیم‌ترین اجرام تک‌ستاره‌ای کیهان. " +
                        "بادهای ستاره‌ای شدید که منجر به از دست دادن جرم زیادی از پوسته می‌شود. " +
                        "دوره‌های ناپایداری شدید، تغییر اندازه، انفجارهای سطحی و درخشش‌های ناگهانی. " +
                        "منبع تولید عناصر سنگین کیهان و تأثیرگذار بر تکامل کهکشان‌ها. " +
                        "قابلیت تبدیل‌شدن به سیاه‌چاله یا ستاره نوترونی پس از انفجار ابرنواختری\u202b."
                )
                val textmortabet =
                    listOf("خورشیدی", "پرنور و مشهور", "کوتوله و داغ", "نوترونی و انفجاری", "متغیر و خاص", "مناطق ستاره زایی", "اصول نظری")
                val imagemortabet = listOf(
                    painterResource(R.drawable.sun),
                    painterResource(R.drawable.starlite),
                    painterResource(R.drawable.starlittle),
                    painterResource(R.drawable.starnetrun),
                    painterResource(R.drawable.starvarible),
                    painterResource(R.drawable.starnebula),
                    painterResource(R.drawable.starnazari)
                )
                val tarkib = textmortabet.zip(imagemortabet)
                Column(
                    modifier = Modifier
                        .padding(25.dp)
                        .fillMaxSize()
                ) {
                    Box(modifier = Modifier.fillMaxSize())
                    {
                        LazyColumn(
                            horizontalAlignment = Alignment.CenterHorizontally
                        ) {
                            items(textsetareghol) { letter ->
                                Column(modifier = Modifier.padding(30.dp)) {
                                    Row {
                                        Image(painter = painterResource(id = R.drawable.bigstar)
                                            , contentDescription = null , contentScale = ContentScale.Crop
                                            , modifier = Modifier.size(100.dp))
                                        Column {
                                            Text("")
                                            Row(modifier = Modifier.fillMaxWidth()
                                                ,horizontalArrangement = Arrangement.End
                                                , verticalAlignment = Alignment.CenterVertically) {
                                                Text("ستارگان غول و ابرغول" , fontSize = 20.sp  , color = Color.White , style = TextStyle(
                                                    shadow = Shadow(
                                                        color = Color(0xFFFFFFFF),
                                                        offset = Offset(0f ,0f)
                                                        , blurRadius = 20f
                                                    )
                                                ), maxLines = 1)
                                            }
                                        }
                                    }
                                }
                                Box(
                                    modifier = Modifier.fillMaxSize(),
                                    contentAlignment = Alignment.CenterStart,
                                ) {
                                    Column {
                                        Text(
                                            "$letter",
                                            fontSize = 20.sp,
                                            color = Color(0xFFFFFFFF),
                                            lineHeight = 32.sp,
                                            textAlign = TextAlign.Right
                                            , style = TextStyle(
                                                shadow = Shadow(
                                                    color = Color(0xFFFFFFFF),
                                                    offset = Offset(0f ,0f)
                                                    , blurRadius = 20f
                                                )
                                            )
                                        )
                                        Text("")
                                        Text("")
                                        Text("")
                                        Text(
                                            "موضوعات مرتبط",
                                            textAlign = TextAlign.Right,
                                            modifier = Modifier.fillMaxWidth(),
                                            fontSize = 30.sp,
                                            color = Color.White
                                            , style = TextStyle(
                                                shadow = Shadow(
                                                    color = Color(0xFFFFFFFF),
                                                    offset = Offset(0f ,0f)
                                                    , blurRadius = 20f
                                                )
                                            )
                                        )
                                        Text("")
                                        LazyRow(reverseLayout = true) {
                                            items(tarkib) { (matnha, aksha) ->
                                                Card(
                                                    modifier = Modifier
                                                        .width(250.dp)
                                                        .height(120.dp)
                                                        .padding(20.dp)
                                                        .clip(shape = RoundedCornerShape(100.dp)),
                                                    shape = RectangleShape,
                                                    colors = CardDefaults.cardColors(
                                                        containerColor = Color(
                                                            0xFF0707AD
                                                        )
                                                    )
                                                ) {
                                                    Box(
                                                        modifier = Modifier.fillMaxSize(),
                                                        contentAlignment = Alignment.CenterEnd
                                                    ) {
                                                        Image(
                                                            painter = painterResource(id = R.drawable.card),
                                                            contentScale = ContentScale.Crop,
                                                            contentDescription = null,
                                                            modifier = Modifier.fillMaxSize()
                                                        )
                                                        Button(
                                                            modifier = Modifier.fillMaxSize(
                                                            ).indication(indication = null ,
                                                                interactionSource = remember { MutableInteractionSource() }), onClick = {
                                                                if (matnha == "خورشیدی") {
                                                                    currentScreen = "sun"
                                                                    backap = false
                                                                }
                                                                if (matnha == "پرنور و مشهور") {
                                                                    currentScreen = "starlite"
                                                                    backap = false
                                                                }
                                                                if (matnha == "غول و ابرغول") {
                                                                    currentScreen = "starbig"
                                                                    backap = false
                                                                }
                                                                if (matnha == "کوتوله و داغ") {
                                                                    currentScreen = "starlittle"
                                                                    backap = false
                                                                }
                                                                if (matnha == "نوترونی و انفجاری") {
                                                                    currentScreen = "starnetron"
                                                                    backap = false
                                                                }
                                                                if (matnha == "متغیر و خاص") {
                                                                    currentScreen = "starvarible"
                                                                    backap = false
                                                                }
                                                                if (matnha == "مناطق ستاره زایی") {
                                                                    currentScreen = "starnebula"
                                                                    backap = false
                                                                }
                                                                if (matnha == "اصول نظری") {
                                                                    currentScreen = "starnazari"
                                                                    backap = false
                                                                }
                                                            }, colors = ButtonDefaults.buttonColors(
                                                                contentColor = Color.Transparent,
                                                                containerColor = Color.Transparent
                                                            )) {
                                                        }
                                                        Row() {
                                                            Spacer(modifier = Modifier.width(10.dp))
                                                            Column {
                                                                Spacer(modifier = Modifier.height(9.dp))
                                                                Text(
                                                                    "$matnha",
                                                                    color = Color.White,
                                                                    fontSize = 20.sp
                                                                    , style = TextStyle(
                                                                        shadow = Shadow(
                                                                            color = Color(0xFFFFFFFF),
                                                                            offset = Offset(0f ,0f)
                                                                            , blurRadius = 20f
                                                                        )
                                                                    )
                                                                )
                                                            }
                                                            Spacer(modifier = Modifier.width(15.dp))
                                                            Image(
                                                                painter = aksha,
                                                                contentDescription = null,
                                                                contentScale = ContentScale.Crop,
                                                                modifier = Modifier.size(50.dp)
                                                            )
                                                            Spacer(modifier = Modifier.width(15.dp))
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        Text("")
                                        Text("")
                                        Text("")
                                    }
                                }
                            }
                        }
                        var count by remember { mutableStateOf(0) }
                        IconButton(
                            onClick = { count++ },
                            modifier = Modifier
                                .size(70.dp)
                                .align(Alignment.BottomEnd)
                                .indication(indication = null ,
                                    interactionSource = remember { MutableInteractionSource() }),
                            colors = IconButtonDefaults.iconButtonColors(
                                containerColor = Color(0xFF030A33)
                            )
                        ) {
                            if (count % 2 == 0) {
                                Icon(
                                    imageVector = Icons.Default.Favorite,
                                    contentDescription = null,
                                    modifier = Modifier.size(50.dp),
                                    tint = Color.Transparent
                                )
                                Icon(
                                    imageVector = Icons.Default.FavoriteBorder,
                                    contentDescription = null,
                                    modifier = Modifier.size(50.dp),
                                    tint = Color.White
                                )
                            }
                            if (count % 2 == 1) {
                                Icon(
                                    imageVector = Icons.Default.Favorite,
                                    contentDescription = null,
                                    modifier = Modifier.size(50.dp),
                                    tint = Color.White
                                )
                                Icon(
                                    imageVector = Icons.Default.FavoriteBorder,
                                    contentDescription = null,
                                    modifier = Modifier.size(50.dp),
                                    tint = Color.White
                                )
                            }
                        }
                    }
                }
            }
        }
    }
}

@Composable
fun Starlittle(){
    Image(
        painter = painterResource(id = R.drawable.app_back),
        contentScale = ContentScale.Crop,
        contentDescription = null
    )
    when(currentScreen) {
        "starlittle" -> {
            Column {
                Card(
                    modifier = Modifier
                        .fillMaxWidth()
                        .height(32.5.dp),
                    shape = RectangleShape,
                    colors = CardDefaults.cardColors(containerColor = Color(0xFF030A33))
                ) {
                }
                Column(){
                    Card(
                        modifier = Modifier
                            .fillMaxWidth()
                            .height(50.dp),
                        shape = RectangleShape,
                        colors = CardDefaults.cardColors(containerColor = Color(0xFF0707AD))
                    ) {
                        Row(modifier = Modifier.padding(10.dp)) {
                            IconButton(onClick = {currentScreen = "asli1"
                                backap = true
                            } , colors = IconButtonDefaults.iconButtonColors(contentColor = Color.White)
                                , modifier = Modifier.indication(indication = null ,
                                    interactionSource = remember { MutableInteractionSource() })){
                                Icon(imageVector = Icons.Outlined.ArrowBack, contentDescription = null , modifier = Modifier.size(40.dp))
                            }
                            IconButton(
                                onClick = {},
                                colors = IconButtonDefaults.iconButtonColors(contentColor = Color.White),
                                modifier = Modifier.indication(indication = null ,
                                    interactionSource = remember { MutableInteractionSource() })
                            ) {
                                Icon(imageVector = Icons.Default.Info, contentDescription = null)
                            }
                            IconButton(
                                onClick = {},
                                colors = IconButtonDefaults.iconButtonColors(contentColor = Color.White),
                                modifier = Modifier.indication(indication = null ,
                                    interactionSource = remember { MutableInteractionSource() })
                            ) {
                                Icon(imageVector = Icons.Default.Share, contentDescription = null)
                            }
                            Row(
                                modifier = Modifier.fillMaxWidth(),
                                horizontalArrangement = Arrangement.End,
                                verticalAlignment = Alignment.CenterVertically
                            ) {
                                Text("کوتوله و داغ", fontSize = 20.sp, color = Color.White  , maxLines = 1 , fontWeight = FontWeight.ExtraBold)
                                IconButton(onClick = {expanded = true},
                                    modifier = Modifier.size(50.dp)
                                        .indication(indication = null ,
                                            interactionSource = remember { MutableInteractionSource() }),
                                    colors = IconButtonDefaults.iconButtonColors(contentColor = Color.White)) {
                                    Icon(imageVector = Icons.Default.Menu, contentDescription = null)
                                }
                            }
                        }
                    }
                }


                var textkootolehdagh = listOf(": معرفی کلی\n" +
                        "\n" +
                        "ستارگان کوتولهٔ داغ گروهی از ستارگان با جرم پایین تا متوسط هستند که دمای سطحی بسیار بالا (معمولاً بیش از ۲۰٬۰۰۰ درجه سلسیوس) دارند و از نظر ساختاری و سیر تکامل با دیگر انواع ستارگان تفاوت دارند. این دسته شامل کوتوله‌های سفید، کوتوله‌های زیرقزمری داغ، و کوتوله‌های هلیومی یا اس دی بی می‌شود. منشأ بیشتر آن‌ها از بقایای ستارگان غول‌پیکر یا ستارگان نزدیک به اتمام عمر در شاخهٔ افقی است. این ستارگان از جمله منابع فرابنفش شدید در کهکشان هستند و در خوشه‌های کروی، کهکشان‌های بیضوی و هالهٔ کهکشان‌ها یافت می‌شوند\u202b." +
                        "\n" +
                        "\n" +
                        "\n" +
                        ": ساختار و ویژگی‌های فیزیکی\n" +
                        "\n" +
                        "کوتوله‌های داغ معمولاً اندازه‌ای نزدیک به زمین دارند اما جرم آن‌ها بین ۰.۵ تا ۱.۴ برابر جرم خورشید است. چگالی بسیار بالا (میانگین ~۱٬۰۰۰٬۰۰۰ کیلوگرم بر متر مکعب)، و دمای سطحی بین ~۲۰٬۰۰۰ تا بیش از ۱۰۰٬۰۰۰ درجه کلوین دارند. ساختار درونی آن‌ها عمدتاً از کربن و اکسیژن یا هلیوم تشکیل شده و لایه‌ای نازک از هیدروژن یا هلیوم اطراف آن‌ها را پوشانده است. فشار داخلی ممکن است تا صدها میلیارد پاسکال برسد\u202b." +
                        "\n" +
                        "\n" +
                        "\n" +
                        ": انواع اصلی\n" +
                        "\n" +
                        "کوتوله‌های سفید: بقایای هستهٔ ستارگان معمولی پس از سوختن کامل. دمای سطحی بین ~۵٬۰۰۰ تا ~۱۰۰٬۰۰۰ درجه کلوین. فاقد همجوشی فعال، انرژی از طریق تابش حرارتی کاهش می‌یابد. " +
                        "کوتوله‌های زیرقزمری (زیرغول): ستارگان داغ و فشرده که از غول‌های قرمز به‌دلیل ازدست‌دادن جرم زیاد ایجاد شده‌اند. انواع مختلف آن‌ها پرانرژی، با دمای ~۲۵٬۰۰۰ تا ~۵۰٬۰۰۰ کلوین هستند. " +
                        "کوتوله‌های هلیومی: بقایای ستارگانی با جرم کم که قبل از همجوشی کربن خاموش می‌شوند و عمدتاً از هلیوم تشکیل شده‌اند. دما می‌تواند تا ~۴۰٬۰۰۰ کلوین برسد\u202b." +
                        "\n" +
                        "\n" +
                        "\n" +
                        ": رفتار طیفی و رنگ\n" +
                        "\n" +
                        "ستارگان کوتولهٔ داغ معمولاً در طیف نوری، فرابنفش شدید و گاهی پرتوهای ایکس تابش می‌کنند. رنگ آن‌ها معمولاً سفید مایل به آبی یا آبی روشن است. طبقه‌بندی طیفی آن‌ها شامل دی او، دی بی، دی ای، دی کیو و دی زد برای کوتوله‌های سفید و اس دی بی برای زیرقزمری‌ها است. در برخی از آن‌ها خطوط طیفی فلزات سنگین و یون‌های چندباره نیز دیده می‌شود که نشانهٔ دمای بسیار بالاست\u202b." +
                        "\n" +
                        "\n" +
                        "\n" +
                        ": منشأ و سیر تکامل\n" +
                        "\n" +
                        "کوتوله‌های داغ از پایان عمر ستارگان معمولی (مثل خورشید) یا در نتیجهٔ برهم‌کنش‌های دوتایی، انفجارهای نووای ناقص یا پدیده‌های باد ستاره‌ای ایجاد می‌شوند. بسیاری از کوتوله‌های اس دی بی ناشی از انتقال جرم در منظومه‌های دوتایی‌اند. کوتوله‌های سفید در پایان سیر تکامل خود با کاهش دما تبدیل به کوتوله‌های سیاه نظری می‌شوند که هنوز در عالم مشاهده نشده‌اند (زیرا زمان کافی نگذشته است)\u202b." +
                        "\n" +
                        "\n" +
                        "\n" +
                        ": دما، جرم و چگالی\n" +
                        "\n" +
                        "دمای سطح: معمولاً بین ~۲۰٬۰۰۰ تا ~۱۰۰٬۰۰۰ درجه کلوین. " +
                        "جرم: بین ~۰.۴ تا ~۱.۴ جرم خورشید (حد چاندراسخار ~۱.۴). " +
                        "چگالی: تا ~۱۰⁹ کیلوگرم بر متر مکعب (در کوتوله‌های سفید). " +
                        "شعاع معمولی: ~۷٬۰۰۰ تا ~۱۵٬۰۰۰ کیلومتر. " +
                        "در هسته‌هایشان فشارهای داخلی به صدها گیگاپاسکال می‌رسد\u202b." +
                        "\n" +
                        "\n" +
                        "\n" +
                        ": میدان مغناطیسی و فعالیت‌ها\n" +
                        "\n" +
                        "برخی از کوتوله‌های سفید دارای میدان مغناطیسی بسیار قوی (تا ~۱۰⁹ گاوس) هستند که منجر به اثر زیمان در طیف می‌شود. این میدان‌ها بر ساختار اتمی در سطح ستاره تأثیر گذاشته و در برخی موارد باعث شکل‌گیری سیستم‌های دوتایی پرتو ایکس می‌شوند. در کوتوله‌های داغ میدان مغناطیسی نقش مهمی در انتقال انرژی و ساختار سطحی دارد\u202b." +
                        "\n" +
                        "\n" +
                        "\n" +
                        ": روش‌های رصد و مأموریت‌ها\n" +
                        "\n" +
                        "مأموریت‌هایی مانند تلسکوپ فضایی هابل، کپلر، گایا اطلاعات زیادی دربارهٔ توزیع، دما، جرم و ترکیب طیفی این ستارگان فراهم کرده‌اند. در رصدخانه‌های فرابنفش و پرتو ایکس مانند روسات و چاندرا، بسیاری از کوتوله‌های داغ شناسایی شده‌اند. نجوم لرزه‌ای (آستروسایزمولوژی) برای بررسی ساختار درونی برخی از کوتوله‌های سفید کاربرد دارد\u202b." +
                        "\n" +
                        "\n" +
                        "\n" +
                        ": ویژگی‌های برجسته\n" +
                        "\n" +
                        "منابع تابش فرابنفش قوی در کهکشان. " +
                        "باقی‌مانده‌های بسیار پایدار با عمر بسیار طولانی. " +
                        "نشانگرهای مهمی از تاریخچهٔ ستاره‌ای و شیمیایی کهکشان. " +
                        "کوتوله‌های سفید نقش حیاتی در بررسی ابرنواخترهای نوع آی ای دارند. " +
                        "برخی از آن‌ها دارای سیارات بازمانده‌اند که از انفجارهای قبلی جان سالم به در برده‌اند\u202b."
                )
                val textmortabet =
                    listOf("خورشیدی", "پرنور و مشهور", "غول و ابرغول", "نوترونی و انفجاری", "متغیر و خاص", "مناطق ستاره زایی", "اصول نظری")
                val imagemortabet = listOf(
                    painterResource(R.drawable.sun),
                    painterResource(R.drawable.starlite),
                    painterResource(R.drawable.bigstar),
                    painterResource(R.drawable.starnetrun),
                    painterResource(R.drawable.starvarible),
                    painterResource(R.drawable.starnebula),
                    painterResource(R.drawable.starnazari)
                )
                val tarkib = textmortabet.zip(imagemortabet)
                Column(
                    modifier = Modifier
                        .padding(25.dp)
                        .fillMaxSize()
                ) {
                    Box(modifier = Modifier.fillMaxSize())
                    {
                        LazyColumn(
                            horizontalAlignment = Alignment.CenterHorizontally
                        ) {
                            items(textkootolehdagh) { letter ->
                                Column(modifier = Modifier.padding(30.dp)) {
                                    Row {
                                        Image(painter = painterResource(id = R.drawable.starlittle)
                                            , contentDescription = null , contentScale = ContentScale.Crop
                                            , modifier = Modifier.size(100.dp))
                                        Column {
                                            Text("")
                                            Row(modifier = Modifier.fillMaxWidth()
                                                ,horizontalArrangement = Arrangement.End
                                                , verticalAlignment = Alignment.CenterVertically) {
                                                Text("ستارگان کوتوله و داغ" , fontSize = 20.sp  , color = Color.White , style = TextStyle(
                                                    shadow = Shadow(
                                                        color = Color(0xFFFFFFFF),
                                                        offset = Offset(0f ,0f)
                                                        , blurRadius = 20f
                                                    )
                                                ), maxLines = 1)
                                            }
                                        }
                                    }
                                }
                                Box(
                                    modifier = Modifier.fillMaxSize(),
                                    contentAlignment = Alignment.CenterStart,
                                ) {
                                    Column {
                                        Text(
                                            "$letter",
                                            fontSize = 20.sp,
                                            color = Color(0xFFFFFFFF),
                                            lineHeight = 32.sp,
                                            textAlign = TextAlign.Right
                                            , style = TextStyle(
                                                shadow = Shadow(
                                                    color = Color(0xFFFFFFFF),
                                                    offset = Offset(0f ,0f)
                                                    , blurRadius = 20f
                                                )
                                            )
                                        )
                                        Text("")
                                        Text("")
                                        Text("")
                                        Text(
                                            "موضوعات مرتبط",
                                            textAlign = TextAlign.Right,
                                            modifier = Modifier.fillMaxWidth(),
                                            fontSize = 30.sp,
                                            color = Color.White
                                            , style = TextStyle(
                                                shadow = Shadow(
                                                    color = Color(0xFFFFFFFF),
                                                    offset = Offset(0f ,0f)
                                                    , blurRadius = 20f
                                                )
                                            )
                                        )
                                        Text("")
                                        LazyRow(reverseLayout = true) {
                                            items(tarkib) { (matnha, aksha) ->
                                                Card(
                                                    modifier = Modifier
                                                        .width(250.dp)
                                                        .height(120.dp)
                                                        .padding(20.dp)
                                                        .clip(shape = RoundedCornerShape(100.dp)),
                                                    shape = RectangleShape,
                                                    colors = CardDefaults.cardColors(
                                                        containerColor = Color(
                                                            0xFF0707AD
                                                        )
                                                    )
                                                ) {
                                                    Box(
                                                        modifier = Modifier.fillMaxSize(),
                                                        contentAlignment = Alignment.CenterEnd
                                                    ) {
                                                        Image(
                                                            painter = painterResource(id = R.drawable.card),
                                                            contentScale = ContentScale.Crop,
                                                            contentDescription = null,
                                                            modifier = Modifier.fillMaxSize()
                                                        )
                                                        Button(
                                                            modifier = Modifier.fillMaxSize(
                                                            ).indication(indication = null ,
                                                                interactionSource = remember { MutableInteractionSource() }), onClick = {
                                                                if (matnha == "خورشیدی") {
                                                                    currentScreen = "sun"
                                                                    backap = false
                                                                }
                                                                if (matnha == "پرنور و مشهور") {
                                                                    currentScreen = "starlite"
                                                                    backap = false
                                                                }
                                                                if (matnha == "غول و ابرغول") {
                                                                    currentScreen = "starbig"
                                                                    backap = false
                                                                }
                                                                if (matnha == "کوتوله و داغ") {
                                                                    currentScreen = "starlittle"
                                                                    backap = false
                                                                }
                                                                if (matnha == "نوترونی و انفجاری") {
                                                                    currentScreen = "starnetron"
                                                                    backap = false
                                                                }
                                                                if (matnha == "متغیر و خاص") {
                                                                    currentScreen = "starvarible"
                                                                    backap = false
                                                                }
                                                                if (matnha == "مناطق ستاره زایی") {
                                                                    currentScreen = "starnebula"
                                                                    backap = false
                                                                }
                                                                if (matnha == "اصول نظری") {
                                                                    currentScreen = "starnazari"
                                                                    backap = false
                                                                }
                                                            }, colors = ButtonDefaults.buttonColors(
                                                                contentColor = Color.Transparent,
                                                                containerColor = Color.Transparent
                                                            )) {
                                                        }
                                                        Row() {
                                                            Spacer(modifier = Modifier.width(10.dp))
                                                            Column {
                                                                Spacer(modifier = Modifier.height(9.dp))
                                                                Text(
                                                                    "$matnha",
                                                                    color = Color.White,
                                                                    fontSize = 20.sp
                                                                    , style = TextStyle(
                                                                        shadow = Shadow(
                                                                            color = Color(0xFFFFFFFF),
                                                                            offset = Offset(0f ,0f)
                                                                            , blurRadius = 20f
                                                                        )
                                                                    )
                                                                )
                                                            }
                                                            Spacer(modifier = Modifier.width(15.dp))
                                                            Image(
                                                                painter = aksha,
                                                                contentDescription = null,
                                                                contentScale = ContentScale.Crop,
                                                                modifier = Modifier.size(50.dp)
                                                            )
                                                            Spacer(modifier = Modifier.width(15.dp))
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        Text("")
                                        Text("")
                                        Text("")
                                    }
                                }
                            }
                        }
                        var count by remember { mutableStateOf(0) }
                        IconButton(
                            onClick = { count++ },
                            modifier = Modifier
                                .size(70.dp)
                                .align(Alignment.BottomEnd)
                                .indication(indication = null ,
                                    interactionSource = remember { MutableInteractionSource() }),
                            colors = IconButtonDefaults.iconButtonColors(
                                containerColor = Color(0xFF030A33)
                            )
                        ) {
                            if (count % 2 == 0) {
                                Icon(
                                    imageVector = Icons.Default.Favorite,
                                    contentDescription = null,
                                    modifier = Modifier.size(50.dp),
                                    tint = Color.Transparent
                                )
                                Icon(
                                    imageVector = Icons.Default.FavoriteBorder,
                                    contentDescription = null,
                                    modifier = Modifier.size(50.dp),
                                    tint = Color.White
                                )
                            }
                            if (count % 2 == 1) {
                                Icon(
                                    imageVector = Icons.Default.Favorite,
                                    contentDescription = null,
                                    modifier = Modifier.size(50.dp),
                                    tint = Color.White
                                )
                                Icon(
                                    imageVector = Icons.Default.FavoriteBorder,
                                    contentDescription = null,
                                    modifier = Modifier.size(50.dp),
                                    tint = Color.White
                                )
                            }
                        }
                    }
                }
            }
        }
    }
}


@Composable
fun Starnetron(){
    Image(
        painter = painterResource(id = R.drawable.app_back),
        contentScale = ContentScale.Crop,
        contentDescription = null
    )
    when(currentScreen) {
        "starnetron" -> {
            Column {
                Card(
                    modifier = Modifier
                        .fillMaxWidth()
                        .height(32.5.dp),
                    shape = RectangleShape,
                    colors = CardDefaults.cardColors(containerColor = Color(0xFF030A33))
                ) {
                }
                Column(){
                    Card(
                        modifier = Modifier
                            .fillMaxWidth()
                            .height(50.dp),
                        shape = RectangleShape,
                        colors = CardDefaults.cardColors(containerColor = Color(0xFF0707AD))
                    ) {
                        Row(modifier = Modifier.padding(10.dp)) {
                            IconButton(onClick = {currentScreen = "asli1"
                                backap = true
                            } , colors = IconButtonDefaults.iconButtonColors(contentColor = Color.White)
                                , modifier = Modifier.indication(indication = null ,
                                    interactionSource = remember { MutableInteractionSource() })){
                                Icon(imageVector = Icons.Outlined.ArrowBack, contentDescription = null , modifier = Modifier.size(40.dp))
                            }
                            IconButton(
                                onClick = {},
                                colors = IconButtonDefaults.iconButtonColors(contentColor = Color.White),
                                modifier = Modifier.indication(indication = null ,
                                    interactionSource = remember { MutableInteractionSource() })
                            ) {
                                Icon(imageVector = Icons.Default.Info, contentDescription = null)
                            }
                            IconButton(
                                onClick = {},
                                colors = IconButtonDefaults.iconButtonColors(contentColor = Color.White),
                                modifier = Modifier.indication(indication = null ,
                                    interactionSource = remember { MutableInteractionSource() })
                            ) {
                                Icon(imageVector = Icons.Default.Share, contentDescription = null)
                            }
                            Row(
                                modifier = Modifier.fillMaxWidth(),
                                horizontalArrangement = Arrangement.End,
                                verticalAlignment = Alignment.CenterVertically
                            ) {
                                Text("نوترونی و انفجاری", fontSize = 20.sp, color = Color.White  , maxLines = 1 , fontWeight = FontWeight.ExtraBold)
                                IconButton(onClick = {expanded = true},
                                    modifier = Modifier.size(50.dp)
                                        .indication(indication = null ,
                                            interactionSource = remember { MutableInteractionSource() }),
                                    colors = IconButtonDefaults.iconButtonColors(contentColor = Color.White)) {
                                    Icon(imageVector = Icons.Default.Menu, contentDescription = null)
                                }
                            }
                        }
                    }
                }


                var textsetarenutrononi = listOf(": معرفی کلی\n" +
                        "\n" +
                        "ستارگان نوترونی بقایای بسیار فشرده ستارگان پرجرم‌اند که پس از انفجار اَبَرنواختر در پایان زندگی یک ستاره بزرگ (با جرم اولیه ≈۸–۲۵ برابر خورشید) شکل می‌گیرند. چگالی آن‌ها بیش از چگالی هستهٔ اتم است؛ یک قاشق چای‌خوری از ماده‌شان می‌تواند میلیاردها تن وزن داشته باشد. سرعت چرخش آن‌ها از چند میلی‌ثانیه تا چند ثانیه متغیر است و برخی‌شان پال‌سار با پرتوهای رادیویی یا ایکس هستند\u202b." +
                        "\n" +
                        "\n" +
                        "\n" +
                        ": ساختار و ابعاد\n" +
                        "\n" +
                        "جرم معمول: ≈۱٫۱۹–۲٫۰۸ برابر جرم خورشید. رکوردها شامل ۱٫۱۹ برای جرم پایین‌، و ~۲٫۰۸ برای سنگین‌ترین داده شده‌اند. " +
                        "شعاع: ≈۱۰ تا ۱۵ کیلومتر. " +
                        "چگالی مرکزی: تا چند برابر چگالی هستهٔ اتم (>۱۰¹⁷ کیلوگرم بر متر مکعب)\u202b." +
                        "\n" +
                        "\n" +
                        "\n" +
                        ": مغناطیس و گردش\n" +
                        "\n" +
                        "میدان مغناطیسی سطح: معمولاً ≈۱۰¹¹–۱۰¹³ گاوس، در مگنتارها (مگنتور) تا ≈۱۰¹⁴–۱۰¹۵ گاوس. " +
                        "چرخش: پال‌سارها با دوره چرخش میلی‌ثانیه‌ای یا چند ثانیه‌ای (مگنتارها) هستند. " +
                        "پال‌سار میلی‌ثانیه‌ای: کوتاه‌ترین‌ها با دما و میدان ضعیف هستند\u202b." +
                        "\n" +
                        "\n" +
                        "\n" +
                        ": انواع و ویژگی‌های انفجاری\n" +
                        "\n" +
                        "پال‌سار چرخشی: میدان مغناطیسی قوی و پرتوهای رادیویی/ایکس تولید می‌کند. " +
                        "مگنتور: میدان خیلی قوی، انفجارهای ایکس/گاما پرتوافشان، کوتاه‌مدت فعال (≈۱۰٬۰۰۰ سال). " +
                        "پال‌سار میلی‌ثانیه‌ای: چرخش سریع، میدان ضعیف (با افزایش جرم از همدم دوتایی). " +
                        "ستارگان نوترونی جداشده با تابش گرمایی ضعیفِ ایکس، غالباً جوان یا درون سحابی باقی‌مانده‌اند\u202b." +
                        "\n" +
                        "\n" +
                        "\n" +
                        ": دما و خنک‌شدن\n" +
                        "\n" +
                        "دمای سطح اولیه: ≈۱۰⁶–۱۰⁷ درجه کلوین، با گذر میلیون‌ها سال تا ~۱۰⁵ کلوین سرد می‌شوند. " +
                        "اثرات میدان قوی و فرآیندهای ارف-اریسی باعث تغییر نحوه خنک‌شدن می‌شوند\u202b." +
                        "\n" +
                        "\n" +
                        "\n" +
                        ": پدیده‌های لرزه‌ای و انفجارهای سطحی\n" +
                        "\n" +
                        "زلزلهٔ ستاره‌ای: پیش از ادغام با سیاه‌چاله یا هنگام واکنش هسته، مشکلات سطح ایجاد و امواج شوک بسیار قوی گسیل می‌شود. " +
                        "انفجار حرارتی ایکس: در کوتوله‌های نوترونی اکتساب‌کننده ماده از همدم، انفجارهای حرارتی روی سطح رخ می‌دهد\u202b." +
                        "\n" +
                        "\n" +
                        "\n" +
                        ": منبع گرانش و امواج گرانشی\n" +
                        "\n" +
                        "برخورد دو نوترونی می‌تواند منجر به انفجار گاما و کِیلونووا شود که امواج گرانشی قابل آشکارسازی تولید می‌کند (مثل ۱۷۰۸۷۳ موج گرانشی). " +
                        "اندازه‌گیری‌های دقیق جرم و شعاع (با تاخیر شیپارو، نور ایکس و پال‌سار) حد بالایی جرم را به ~۲٫۱–۲٫۲ جرم خورشیدی نزدیک کرده‌اند\u202b." +
                        "\n" +
                        "\n" +
                        "\n" +
                        ": مأموریت‌ها و ابزارهای رصد\n" +
                        "\n" +
                        "فضابیمه‌هایی مانند نیسر، چاندرا و گایا نقش مهمی در شناسایی، ارسال، و بررسی ساختار و میدان‌های این اجرام دارند. " +
                        "آخرین کشف: در قراضه‌های یک ستارهٔ نوترونی پیدا کرده (در فاصله ~۱۶۰٬۰۰۰ سال نوری)، اولین شواهد مستقیم پس از چند دهه پیگیری\u202b." +
                        "\n" +
                        "\n" +
                        "\n" +
                        ": ویژگی‌های برجسته و نقش کیهانی\n" +
                        "\n" +
                        "چگالی فوق‌العاده بالا: تنها سیاه‌چاله‌ها از آن چگال‌ترند. " +
                        "میدان‌های مغناطیسی عظیم: تا ~۱۰¹۵ گاوس در مگنتورها. " +
                        "تولید پرتو رادیویی، ایکس و گاما؛ آزمایشگاهی طبیعی برای فیزیک ماده چگال و نسبیت عام. " +
                        "منبع عناصر سنگین در برخوردها و ابرنواخترها که بر تشکیل کهکشان‌ها اثر می‌گذارد. " +
                        "پال‌سارها ساعت‌های کیهانی با دقت شگفت‌آور هستند و در آزمایش نسبیت استفاده می‌شوند\u202b."
                )
                val textmortabet =
                    listOf("خورشیدی", "پرنور و مشهور", "غول و ابرغول", "کوتوله و داغ", "متغیر و خاص", "مناطق ستاره زایی", "اصول نظری")
                val imagemortabet = listOf(
                    painterResource(R.drawable.sun),
                    painterResource(R.drawable.starlite),
                    painterResource(R.drawable.bigstar),
                    painterResource(R.drawable.starlittle),
                    painterResource(R.drawable.starvarible),
                    painterResource(R.drawable.starnebula),
                    painterResource(R.drawable.starnazari)
                )
                val tarkib = textmortabet.zip(imagemortabet)
                Column(
                    modifier = Modifier
                        .padding(25.dp)
                        .fillMaxSize()
                ) {
                    Box(modifier = Modifier.fillMaxSize())
                    {
                        LazyColumn(
                            horizontalAlignment = Alignment.CenterHorizontally
                        ) {
                            items(textsetarenutrononi) { letter ->
                                Column(modifier = Modifier.padding(30.dp)) {
                                    Row {
                                        Image(painter = painterResource(id = R.drawable.starnetrun)
                                            , contentDescription = null , contentScale = ContentScale.Crop
                                            , modifier = Modifier.size(100.dp))
                                        Column {
                                            Text("")
                                            Row(modifier = Modifier.fillMaxWidth()
                                                ,horizontalArrangement = Arrangement.End
                                                , verticalAlignment = Alignment.CenterVertically) {
                                                Text("ستارگان نوترونی" , fontSize = 20.sp  , color = Color.White , style = TextStyle(
                                                    shadow = Shadow(
                                                        color = Color(0xFFFFFFFF),
                                                        offset = Offset(0f ,0f)
                                                        , blurRadius = 20f
                                                    )
                                                ), maxLines = 1)
                                            }
                                        }
                                    }
                                }
                                Box(
                                    modifier = Modifier.fillMaxSize(),
                                    contentAlignment = Alignment.CenterStart,
                                ) {
                                    Column {
                                        Text(
                                            "$letter",
                                            fontSize = 20.sp,
                                            color = Color(0xFFFFFFFF),
                                            lineHeight = 32.sp,
                                            textAlign = TextAlign.Right
                                            , style = TextStyle(
                                                shadow = Shadow(
                                                    color = Color(0xFFFFFFFF),
                                                    offset = Offset(0f ,0f)
                                                    , blurRadius = 20f
                                                )
                                            )
                                        )
                                        Text("")
                                        Text("")
                                        Text("")
                                        Text(
                                            "موضوعات مرتبط",
                                            textAlign = TextAlign.Right,
                                            modifier = Modifier.fillMaxWidth(),
                                            fontSize = 30.sp,
                                            color = Color.White
                                            , style = TextStyle(
                                                shadow = Shadow(
                                                    color = Color(0xFFFFFFFF),
                                                    offset = Offset(0f ,0f)
                                                    , blurRadius = 20f
                                                )
                                            )
                                        )
                                        Text("")
                                        LazyRow(reverseLayout = true) {
                                            items(tarkib) { (matnha, aksha) ->
                                                Card(
                                                    modifier = Modifier
                                                        .width(250.dp)
                                                        .height(120.dp)
                                                        .padding(20.dp)
                                                        .clip(shape = RoundedCornerShape(100.dp)),
                                                    shape = RectangleShape,
                                                    colors = CardDefaults.cardColors(
                                                        containerColor = Color(
                                                            0xFF0707AD
                                                        )
                                                    )
                                                ) {
                                                    Box(
                                                        modifier = Modifier.fillMaxSize(),
                                                        contentAlignment = Alignment.CenterEnd
                                                    ) {
                                                        Image(
                                                            painter = painterResource(id = R.drawable.card),
                                                            contentScale = ContentScale.Crop,
                                                            contentDescription = null,
                                                            modifier = Modifier.fillMaxSize()
                                                        )
                                                        Button(
                                                            modifier = Modifier.fillMaxSize(
                                                            ).indication(indication = null ,
                                                                interactionSource = remember { MutableInteractionSource() }), onClick = {
                                                                if (matnha == "خورشیدی") {
                                                                    currentScreen = "sun"
                                                                    backap = false
                                                                }
                                                                if (matnha == "پرنور و مشهور") {
                                                                    currentScreen = "starlite"
                                                                    backap = false
                                                                }
                                                                if (matnha == "غول و ابرغول") {
                                                                    currentScreen = "starbig"
                                                                    backap = false
                                                                }
                                                                if (matnha == "کوتوله و داغ") {
                                                                    currentScreen = "starlittle"
                                                                    backap = false
                                                                }
                                                                if (matnha == "نوترونی و انفجاری") {
                                                                    currentScreen = "starnetron"
                                                                    backap = false
                                                                }
                                                                if (matnha == "متغیر و خاص") {
                                                                    currentScreen = "starvarible"
                                                                    backap = false
                                                                }
                                                                if (matnha == "مناطق ستاره زایی") {
                                                                    currentScreen = "starnebula"
                                                                    backap = false
                                                                }
                                                                if (matnha == "اصول نظری") {
                                                                    currentScreen = "starnazari"
                                                                    backap = false
                                                                }
                                                            }, colors = ButtonDefaults.buttonColors(
                                                                contentColor = Color.Transparent,
                                                                containerColor = Color.Transparent
                                                            )) {
                                                        }
                                                        Row() {
                                                            Spacer(modifier = Modifier.width(10.dp))
                                                            Column {
                                                                Spacer(modifier = Modifier.height(9.dp))
                                                                Text(
                                                                    "$matnha",
                                                                    color = Color.White,
                                                                    fontSize = 20.sp
                                                                    , style = TextStyle(
                                                                        shadow = Shadow(
                                                                            color = Color(0xFFFFFFFF),
                                                                            offset = Offset(0f ,0f)
                                                                            , blurRadius = 20f
                                                                        )
                                                                    )
                                                                )
                                                            }
                                                            Spacer(modifier = Modifier.width(15.dp))
                                                            Image(
                                                                painter = aksha,
                                                                contentDescription = null,
                                                                contentScale = ContentScale.Crop,
                                                                modifier = Modifier.size(50.dp)
                                                            )
                                                            Spacer(modifier = Modifier.width(15.dp))
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        Text("")
                                        Text("")
                                        Text("")
                                    }
                                }
                            }
                        }
                        var count by remember { mutableStateOf(0) }
                        IconButton(
                            onClick = { count++ },
                            modifier = Modifier
                                .size(70.dp)
                                .align(Alignment.BottomEnd)
                                .indication(indication = null ,
                                    interactionSource = remember { MutableInteractionSource() }),
                            colors = IconButtonDefaults.iconButtonColors(
                                containerColor = Color(0xFF030A33)
                            )
                        ) {
                            if (count % 2 == 0) {
                                Icon(
                                    imageVector = Icons.Default.Favorite,
                                    contentDescription = null,
                                    modifier = Modifier.size(50.dp),
                                    tint = Color.Transparent
                                )
                                Icon(
                                    imageVector = Icons.Default.FavoriteBorder,
                                    contentDescription = null,
                                    modifier = Modifier.size(50.dp),
                                    tint = Color.White
                                )
                            }
                            if (count % 2 == 1) {
                                Icon(
                                    imageVector = Icons.Default.Favorite,
                                    contentDescription = null,
                                    modifier = Modifier.size(50.dp),
                                    tint = Color.White
                                )
                                Icon(
                                    imageVector = Icons.Default.FavoriteBorder,
                                    contentDescription = null,
                                    modifier = Modifier.size(50.dp),
                                    tint = Color.White
                                )
                            }
                        }
                    }
                }
            }
        }
    }
}

@Composable
fun Starvarible(){
    Image(
        painter = painterResource(id = R.drawable.app_back),
        contentScale = ContentScale.Crop,
        contentDescription = null
    )
    when(currentScreen) {
        "starvarible" -> {
            Column {
                Card(
                    modifier = Modifier
                        .fillMaxWidth()
                        .height(32.5.dp),
                    shape = RectangleShape,
                    colors = CardDefaults.cardColors(containerColor = Color(0xFF030A33))
                ) {
                }
                Column(){
                    Card(
                        modifier = Modifier
                            .fillMaxWidth()
                            .height(50.dp),
                        shape = RectangleShape,
                        colors = CardDefaults.cardColors(containerColor = Color(0xFF0707AD))
                    ) {
                        Row(modifier = Modifier.padding(10.dp)) {
                            IconButton(onClick = {currentScreen = "asli1"
                                backap = true
                            } , colors = IconButtonDefaults.iconButtonColors(contentColor = Color.White)
                                , modifier = Modifier.indication(indication = null ,
                                    interactionSource = remember { MutableInteractionSource() })){
                                Icon(imageVector = Icons.Outlined.ArrowBack, contentDescription = null , modifier = Modifier.size(40.dp))
                            }
                            IconButton(
                                onClick = {},
                                colors = IconButtonDefaults.iconButtonColors(contentColor = Color.White),
                                modifier = Modifier.indication(indication = null ,
                                    interactionSource = remember { MutableInteractionSource() })
                            ) {
                                Icon(imageVector = Icons.Default.Info, contentDescription = null)
                            }
                            IconButton(
                                onClick = {},
                                colors = IconButtonDefaults.iconButtonColors(contentColor = Color.White),
                                modifier = Modifier.indication(indication = null ,
                                    interactionSource = remember { MutableInteractionSource() })
                            ) {
                                Icon(imageVector = Icons.Default.Share, contentDescription = null)
                            }
                            Row(
                                modifier = Modifier.fillMaxWidth(),
                                horizontalArrangement = Arrangement.End,
                                verticalAlignment = Alignment.CenterVertically
                            ) {
                                Text("متغیر و خاص", fontSize = 20.sp, color = Color.White  , maxLines = 1 , fontWeight = FontWeight.ExtraBold)
                                IconButton(onClick = {expanded = true},
                                    modifier = Modifier.size(50.dp)
                                        .indication(indication = null ,
                                            interactionSource = remember { MutableInteractionSource() }),
                                    colors = IconButtonDefaults.iconButtonColors(contentColor = Color.White)) {
                                    Icon(imageVector = Icons.Default.Menu, contentDescription = null)
                                }
                            }
                        }
                    }
                }


                var textsetaremotaghayerva = listOf(": معرفی کلی\n" +
                        "\n" +
                        "ستارگان متغیر و خاص دسته‌ای از ستارگان هستند که درخشندگی آن‌ها در بازه‌های زمانی مختلف تغییر می‌کند. این تغییرات می‌توانند ناشی از فرآیندهای داخلی (مثل تپش یا فوران) یا عوامل بیرونی (مثل گرفت یا چرخش) باشند. برخی از مشهورترین زیرگونه‌ها شامل ستارگان تپنده (مثل سفی، لیاره)، ستارگان انفجاری/کاتاکلیسمیک (مثل نوواها، ابرنواخترها)، ستارگان گرفت‌شونده (مانند الگل)، و ستارگان طیفی یا مغناطیسی خاص (مثل نسل ای ام، ای پی) هستند\u202b." +
                        "\n" +
                        "\n" +
                        "\n" +
                        ": طبقه‌بندی کلی\n" +
                        "\n" +
                        "متغیرهای درونی: تغییر در درخشندگی ناشی از تغییرات فیزیکی ستاره است. دو گروه اصلی: " +
                        "ستارگان تپنده: سپهید ها، میرا و ال پی وی ها (متغیرهای دوره‌بلند) که دوره‌ای از چند ساعت تا صدها روز دارند و به‌خاطر انبساط و انقباض انرژی و درخشندگی‌شان تغییر می‌کند. " +
                        "متغیرهای فورانی/کاتاکلیسمیک: شامل نوواها، کوتوله‌های نووا، و ابرنواخترهای نوع آی ای و آی آی هستند که در سیستم‌های دوتایی فوران‌های عظیم تولید می‌کنند. " +
                        "متغیرهای بیرونی: تغییرات ظاهری در روشنایی دارد، بدون تغییر ذاتی؛ مثل ستارگان گرفت‌شونده یا چرخشی با لکه‌های سطحی. " +
                        "ستارگان خاص طیفی/مغناطیسی: مانند ای ام و ای پی با میدان مغناطیسی قوی و ترکیب شیمیایی غیرمعمول که باعث تغییرات طیفی دوره‌ای می‌شوند\u202b." +
                        "\n" +
                        "\n" +
                        "\n" +
                        ": نمونه‌های مشهور و ویژگی‌ها\n" +
                        "\n" +
                        "ستارگان تپنده با دوره ۱–۱۳۵ روز، درخشندگی بالا و رابطه دوره–درخشندگی که آن‌ها را به شمع استاندارد در تعیین فاصله تبدیل کرده‌است؛ " +
                        "کوتاه‌دوره (~۰٫۰۵–۱٫۲ روز)، قدر کم‌دامنه (~۰٫۳–۲ مقدار قدر) و کاربرد برای اندازه‌گیری فاصله در کهکشان راه‌شیری. " +
                        "میرا ها: غول‌های سرخ تپنده با دوره‌های ~۸۰–۱۰۰۰ روز و دامنه‌‌های نوری بزرگ (>۲٫۵ قدر). " +
                        "ستارگان داغ (طیف بی2–بی3)، دوره ۰٫۱–۰٫۳ روز، دامنه ~۰٫۰۱–۰٫۳ قدر، ناشی از مکانیزم کپا روی آهن در دمای داخلی ~۲۰۰٬۰۰۰ کلوین. " +
                        "نوواها: سیستم‌های دوتایی با کوتوله سفید که هر چند ده سال فورانی عظیم دارند؛ افزایش درخشندگی ۷–۱۶ قدر در چند روز. " +
                        "ابرنواخترها: فوران‌هایی فوق‌العاده (دامنه تا ~۲۰ قدر)، ناشی از انفجار پایانی ابرغول‌ها یا کوتوله‌های سفید بستر چاندرسخار (نوع آی ای). " +
                        "ستارگان گرفت‌شونده (مثل الگل): تغییرات دوره‌ای در نور زمانی که یک ستاره از مقابل دیگری می‌گذرد. " +
                        "ستارگان طیفی/مغناطیسی خاص: لکه‌های فلزی و میدان مغناطیسی قوی (صدها تا هزارها گاوس)، تغییرات طیفی دوره‌ای\u202b." +
                        "\n" +
                        "\n" +
                        "\n" +
                        ": کاربردها و اهمیت علمی\n" +
                        "\n" +
                        "به‌عنوان چراغ‌های استاندارد برای تعیین فاصله کیهانی کاربرد دارند (تا میلیون‌ها سال نوری). " +
                        "بررسی نورسنجی و طیف‌نگاری این ستارگان، ابزارهایی برای بررسی ساختار داخلی، جرم، ترکیب شیمیایی و دینامیک هستند. " +
                        "نوواها و ابرنواخترها اطلاعاتی درباره انتقال جرم، تشکیل عناصر سنگین و تکامل فیلم جرم دارند؛ نوع آی ای نقش کلیدی در سنجش شتاب انبساط کائنات دارد. " +
                        "ستارگان خاص مانند ای پی، ای ام آزمایشگاه‌هایی برای مطالعه تأثیر میدان مغناطیسی و انتشار تابشی دقیق هستند\u202b." +
                        "\n" +
                        "\n" +
                        "\n" +
                        ": روش‌های رصد و مأموریت‌ها\n" +
                        "\n" +
                        "تلسکوپ‌های فضایی مانند گایا، کپلر و تس شناسایی و طبقه‌بندی بیش از صد هزار ستاره متغیر را با الگوریتم‌های ماشین لرنینگ انجام داده‌اند؛ مثلاً ۷۲٬۰۰۰ متغیر دوره‌. " +
                        "پروژه‌هایی مانند اساس_اس ان و اگله در ثبت میلیون‌ها منحنی نوری مشارکت دارد. " +
                        "رصدهای دقیق در طیف و چندباند (فرابنفش، نوری، مادون‌قرمز) برای تحلیل دقیق متغیرها کاربرد دارد؛ مثلاً نورسنجی سی سی دی و طیف‌سنجی در رصدخانه‌های زمینی/فضایی\u202b." +
                        "\n" +
                        "\n" +
                        "\n" +
                        ": ویژگی‌های برجسته\n" +
                        "\n" +
                        "بسیار متنوع: از دوره‌های میلی‌ثانیه تا چند صد سال و دامنه‌ نوری از هزارم قدر تا قدر. " +
                        "کلید فاصله‌سنجی: رابطه دوره–درخشندگی کفید مسیر کیهان‌سنجی را باز کرده‌است. " +
                        "مقیاس کیهانی و تشکیل عنصر: نوواها و ابرنواخترها عناصر سنگین و انرژی زیادی تولید می‌کنند. " +
                        "آزمایشگاه فیزیک چگال و میدان: ستارگان مغناطیسی خاص نمونه زنده‌ای برای مطالعه فیزیک پلاسماست. " +
                        "فناوری: داده‌های زمان‌سنجی و طیفی آن‌ها پایه سامانه‌های خودکار تحلیل داده نجومی هستند\u202b."
                )
                val textmortabet =
                    listOf("خورشیدی", "پرنور و مشهور", "غول و ابرغول", "کوتوله و داغ", "نوترونی و انفجاری", "مناطق ستاره زایی", "اصول نظری")
                val imagemortabet = listOf(
                    painterResource(R.drawable.sun),
                    painterResource(R.drawable.starlite),
                    painterResource(R.drawable.bigstar),
                    painterResource(R.drawable.starlittle),
                    painterResource(R.drawable.starnetrun),
                    painterResource(R.drawable.starnebula),
                    painterResource(R.drawable.starnazari)
                )
                val tarkib = textmortabet.zip(imagemortabet)
                Column(
                    modifier = Modifier
                        .padding(25.dp)
                        .fillMaxSize()
                ) {
                    Box(modifier = Modifier.fillMaxSize())
                    {
                        LazyColumn(
                            horizontalAlignment = Alignment.CenterHorizontally
                        ) {
                            items(textsetaremotaghayerva) { letter ->
                                Column(modifier = Modifier.padding(30.dp)) {
                                    Row {
                                        Image(painter = painterResource(id = R.drawable.starvarible)
                                            , contentDescription = null , contentScale = ContentScale.Crop
                                            , modifier = Modifier.size(100.dp))
                                        Column {
                                            Text("")
                                            Row(modifier = Modifier.fillMaxWidth()
                                                ,horizontalArrangement = Arrangement.End
                                                , verticalAlignment = Alignment.CenterVertically) {
                                                Text("ستارگان متغیر و خاص" , fontSize = 20.sp  , color = Color.White , style = TextStyle(
                                                    shadow = Shadow(
                                                        color = Color(0xFFFFFFFF),
                                                        offset = Offset(0f ,0f)
                                                        , blurRadius = 20f
                                                    )
                                                ), maxLines = 1)
                                            }
                                        }
                                    }
                                }
                                Box(
                                    modifier = Modifier.fillMaxSize(),
                                    contentAlignment = Alignment.CenterStart,
                                ) {
                                    Column {
                                        Text(
                                            "$letter",
                                            fontSize = 20.sp,
                                            color = Color(0xFFFFFFFF),
                                            lineHeight = 32.sp,
                                            textAlign = TextAlign.Right
                                            , style = TextStyle(
                                                shadow = Shadow(
                                                    color = Color(0xFFFFFFFF),
                                                    offset = Offset(0f ,0f)
                                                    , blurRadius = 20f
                                                )
                                            )
                                        )
                                        Text("")
                                        Text("")
                                        Text("")
                                        Text(
                                            "موضوعات مرتبط",
                                            textAlign = TextAlign.Right,
                                            modifier = Modifier.fillMaxWidth(),
                                            fontSize = 30.sp,
                                            color = Color.White
                                            , style = TextStyle(
                                                shadow = Shadow(
                                                    color = Color(0xFFFFFFFF),
                                                    offset = Offset(0f ,0f)
                                                    , blurRadius = 20f
                                                )
                                            )
                                        )
                                        Text("")
                                        LazyRow(reverseLayout = true) {
                                            items(tarkib) { (matnha, aksha) ->
                                                Card(
                                                    modifier = Modifier
                                                        .width(250.dp)
                                                        .height(120.dp)
                                                        .padding(20.dp)
                                                        .clip(shape = RoundedCornerShape(100.dp)),
                                                    shape = RectangleShape,
                                                    colors = CardDefaults.cardColors(
                                                        containerColor = Color(
                                                            0xFF0707AD
                                                        )
                                                    )
                                                ) {
                                                    Box(
                                                        modifier = Modifier.fillMaxSize(),
                                                        contentAlignment = Alignment.CenterEnd
                                                    ) {
                                                        Image(
                                                            painter = painterResource(id = R.drawable.card),
                                                            contentScale = ContentScale.Crop,
                                                            contentDescription = null,
                                                            modifier = Modifier.fillMaxSize()
                                                        )
                                                        Button(
                                                            modifier = Modifier.fillMaxSize(
                                                            ).indication(indication = null ,
                                                                interactionSource = remember { MutableInteractionSource() }), onClick = {
                                                                if (matnha == "خورشیدی") {
                                                                    currentScreen = "sun"
                                                                    backap = false
                                                                }
                                                                if (matnha == "پرنور و مشهور") {
                                                                    currentScreen = "starlite"
                                                                    backap = false
                                                                }
                                                                if (matnha == "غول و ابرغول") {
                                                                    currentScreen = "starbig"
                                                                    backap = false
                                                                }
                                                                if (matnha == "کوتوله و داغ") {
                                                                    currentScreen = "starlittle"
                                                                    backap = false
                                                                }
                                                                if (matnha == "نوترونی و انفجاری") {
                                                                    currentScreen = "starnetron"
                                                                    backap = false
                                                                }
                                                                if (matnha == "متغیر و خاص") {
                                                                    currentScreen = "starvarible"
                                                                    backap = false
                                                                }
                                                                if (matnha == "مناطق ستاره زایی") {
                                                                    currentScreen = "starnebula"
                                                                    backap = false
                                                                }
                                                                if (matnha == "اصول نظری") {
                                                                    currentScreen = "starnazari"
                                                                    backap = false
                                                                }
                                                            }, colors = ButtonDefaults.buttonColors(
                                                                contentColor = Color.Transparent,
                                                                containerColor = Color.Transparent
                                                            )) {
                                                        }
                                                        Row() {
                                                            Spacer(modifier = Modifier.width(10.dp))
                                                            Column {
                                                                Spacer(modifier = Modifier.height(9.dp))
                                                                Text(
                                                                    "$matnha",
                                                                    color = Color.White,
                                                                    fontSize = 20.sp
                                                                    , style = TextStyle(
                                                                        shadow = Shadow(
                                                                            color = Color(0xFFFFFFFF),
                                                                            offset = Offset(0f ,0f)
                                                                            , blurRadius = 20f
                                                                        )
                                                                    )
                                                                )
                                                            }
                                                            Spacer(modifier = Modifier.width(15.dp))
                                                            Image(
                                                                painter = aksha,
                                                                contentDescription = null,
                                                                contentScale = ContentScale.Crop,
                                                                modifier = Modifier.size(50.dp)
                                                            )
                                                            Spacer(modifier = Modifier.width(15.dp))
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        Text("")
                                        Text("")
                                        Text("")
                                    }
                                }
                            }
                        }
                        var count by remember { mutableStateOf(0) }
                        IconButton(
                            onClick = { count++ },
                            modifier = Modifier
                                .size(70.dp)
                                .align(Alignment.BottomEnd)
                                .indication(indication = null ,
                                    interactionSource = remember { MutableInteractionSource() }),
                            colors = IconButtonDefaults.iconButtonColors(
                                containerColor = Color(0xFF030A33)
                            )
                        ) {
                            if (count % 2 == 0) {
                                Icon(
                                    imageVector = Icons.Default.Favorite,
                                    contentDescription = null,
                                    modifier = Modifier.size(50.dp),
                                    tint = Color.Transparent
                                )
                                Icon(
                                    imageVector = Icons.Default.FavoriteBorder,
                                    contentDescription = null,
                                    modifier = Modifier.size(50.dp),
                                    tint = Color.White
                                )
                            }
                            if (count % 2 == 1) {
                                Icon(
                                    imageVector = Icons.Default.Favorite,
                                    contentDescription = null,
                                    modifier = Modifier.size(50.dp),
                                    tint = Color.White
                                )
                                Icon(
                                    imageVector = Icons.Default.FavoriteBorder,
                                    contentDescription = null,
                                    modifier = Modifier.size(50.dp),
                                    tint = Color.White
                                )
                            }
                        }
                    }
                }
            }
        }
    }
}

@Composable
fun Starnebula(){
    Image(
        painter = painterResource(id = R.drawable.app_back),
        contentScale = ContentScale.Crop,
        contentDescription = null
    )
    when(currentScreen) {
        "starnebula" ->{
            Column {
                Card(
                    modifier = Modifier
                        .fillMaxWidth()
                        .height(32.5.dp),
                    shape = RectangleShape,
                    colors = CardDefaults.cardColors(containerColor = Color(0xFF030A33))
                ) {
                }
                Column(){
                    Card(
                        modifier = Modifier
                            .fillMaxWidth()
                            .height(50.dp),
                        shape = RectangleShape,
                        colors = CardDefaults.cardColors(containerColor = Color(0xFF0707AD))
                    ) {
                        Row(modifier = Modifier.padding(10.dp)) {
                            IconButton(onClick = {currentScreen = "asli1"
                                backap = true
                            } , colors = IconButtonDefaults.iconButtonColors(contentColor = Color.White)
                                , modifier = Modifier.indication(indication = null ,
                                    interactionSource = remember { MutableInteractionSource() })){
                                Icon(imageVector = Icons.Outlined.ArrowBack, contentDescription = null , modifier = Modifier.size(40.dp))
                            }
                            IconButton(
                                onClick = {},
                                colors = IconButtonDefaults.iconButtonColors(contentColor = Color.White),
                                modifier = Modifier.indication(indication = null ,
                                    interactionSource = remember { MutableInteractionSource() })
                            ) {
                                Icon(imageVector = Icons.Default.Info, contentDescription = null)
                            }
                            IconButton(
                                onClick = {},
                                colors = IconButtonDefaults.iconButtonColors(contentColor = Color.White),
                                modifier = Modifier.indication(indication = null ,
                                    interactionSource = remember { MutableInteractionSource() })
                            ) {
                                Icon(imageVector = Icons.Default.Share, contentDescription = null)
                            }
                            Row(
                                modifier = Modifier.fillMaxWidth(),
                                horizontalArrangement = Arrangement.End,
                                verticalAlignment = Alignment.CenterVertically
                            ) {
                                Text("مناطق ستاره زایی", fontSize = 20.sp, color = Color.White  , maxLines = 1 , fontWeight = FontWeight.ExtraBold)
                                IconButton(onClick = {expanded = true},
                                    modifier = Modifier.size(50.dp)
                                        .indication(indication = null ,
                                            interactionSource = remember { MutableInteractionSource() }),
                                    colors = IconButtonDefaults.iconButtonColors(contentColor = Color.White)) {
                                    Icon(imageVector = Icons.Default.Menu, contentDescription = null)
                                }
                            }
                        }
                    }
                }


                var textmanateghsetarezayi = listOf(": معرفی کلی\n" +
                        "\n" +
                        "مناطق ستاره‌زایی (یا نوزادگاه ستاره‌ها) کلان‌ابرهایی از گاز سرد و غبار هستند که در آن‌ها جاذبه بیش از فشار داخلی غلبه می‌کند و فرایند تولد ستاره‌ها آغاز می‌شود. این مناطق معمولاً شامل ابر مولکولی بزرگ، ناحیه آی آی اچ (گاز یونیده) و خوشه‌های نوپدید هستند\u202b." +
                        "\n" +
                        "\n" +
                        "\n" +
                        ": ویژگی‌های عمومی\n" +
                        "\n" +
                        "جرم ابر مولکولی: بین ~۱٬۰۰۰ تا ~۱۰٬۰۰۰٬۰۰۰ برابر جرم خورشید؛ گستره‌ای تا چند صد سال نوری دارند. " +
                        "دما: بسیار سرد، حدود ۱۰–۲۰ درجه کلوین. " +
                        "چگالی ذرات: بین ~۱۰³ تا ~۱۰⁶ ذره بر سانتی‌متر مکعب. " +
                        "ساختار: شامل ستون‌های غبار (ستون خلقت)، گلوبول‌های بوک، پیپ‌های سرد و نواحی یونیده است. " +
                        "کارایی تشکیل ستاره: معمولاً تنها ~۱٪ از جرم به ستاره تبدیل می‌شود؛ بقیه توسط تابش و باد ستاره‌ای پراکنده می‌شوند\u202b." +
                        "\n" +
                        "\n" +
                        "\n" +
                        ": فرایند ستاره‌زایی\n" +
                        "\n" +
                        "بی‌ثباتی جاذبه‌ای در نواحی متراکم شروع به ریزش می‌کند. " +
                        "لخته‌ها به هسته‌های پیش‌ستاره‌ای تبدیل می‌شوند و انرژی گرانشی آزادشده باعث گرم‌شدن و انتشار تابش می‌شود. " +
                        "دیسک پروتوپلنتاری حول پیش‌ستاره شکل می‌گیرد؛ در این دیسک سیارات شکل می‌گیرند. " +
                        "تشکیل نواحی آی آی اچ در اطراف ستاره‌های پرجرم باعث یونیزه شدن گاز و ایجاد ساختارهای موزاییکی می‌شود. تابش و باد آن‌ها باعث فشرده‌شدن گاز اطراف و تحریک تولد ستارگان جدید می‌گردد (ستاره‌زایی فعال‌شده)\u202b." +
                        "\n" +
                        "\n" +
                        "\n" +
                        ": نمونه‌های معروف\n" +
                        "\n" +
                        "سحابی شکارچی (ناحیه اوریون): فاصله ~۴۱۵ سال نوری، شامل بیش از ۲٬۰۰۰ ستاره جوان در خوشه تراپزیوم؛ دما ~۱۰٬۰۰۰ کلوین در آی آی اچ و دمای سرد هسته ~۱۰–۲۰ کلوین. " +
                        "سحابی کارینا (کارینا): فاصله ~۲٬۳۰۰ پارسک، یکی از عظیم‌ترین و کارآمدترین نواحی با بیش از ۶۵ نوع و چندین ستاره ولف-رایه است؛ الگوی ساختمان ابرها نشان‌دهنده اثرت شدید بازخورد تابش و بادهاست. " +
                        "(شِپرلی ۶۴): فاصله ~۱٬۴۲۰ سال نوری، خوشه چندصد ستاره پرجرم و ناحیه آی آی اچ با شکل شیشه‌ساعتی در صورت فلکی مارک است. " +
                        "سحابی عقاب، رزه، ان‌جی‌سی ۶۳۳۴ نمونه‌های دیگر برجسته‌اند\u202b." +
                        "\n" +
                        "\n" +
                        "\n" +
                        ": پارامترهای کلیدی\n" +
                        "\n" +
                        "دما: هسته سرد ~۱۰–۲۰ کلوین، نواحی آی آی اچ نزدیک ~۱۰٬۰۰۰ کلوین. " +
                        "چگالی: از چند صد تا میلیون ذره بر سانتی‌متر مکعب. " +
                        "نرخ تشکیل ستاره: نزدیک یک تا چند ستاره در سال در راه‌شیری؛ در نواحی ستاره‌زایی فعال مانند سحابی کارینا نرخ بسیار بیشتر است. " +
                        "میدان مغناطیسی: بررسی‌های آلمای میلی‌متری نشان می‌دهد که میدان‌ها نقش منظم‌کننده در فرایند فروپاشی دارند، پیوند تنگاتنگی با ساختارهای ستون و لوله‌ای دارند\u202b." +
                        "\n" +
                        "\n" +
                        "\n" +
                        ": نقش و اهمیت علمی\n" +
                        "\n" +
                        "شناخت چگونگی شکل‌گیری ستارگان پرجرم و کم‌جرم، تنظیم اولیه جرم ستاره‌ای. " +
                        "بررسی تأثیر بازخورد ستاره‌ای: تابش، باد و ابرنواخترها ساختار گاز را تغییر داده و ستاره‌زایی دوگانه را ممکن می‌سازد. " +
                        "درک فرایند شکل‌گیری سیارات وقتی دیسک پروتوپلنتاری در اطراف پیش‌ستاره‌ها قرار می‌گیرد؛ بیش از ۱۵۰ دیسک در اوریون شناسایی شده‌اند. " +
                        "استفاده از رصدهای چندباند (رادیو، مادون‌قرمز، فرابنفش و پرتو ایکس) برای شفاف‌سازی ساختار، دما و نرخ نهایی ستاره‌زایی\u202b." +
                        "\n" +
                        "\n" +
                        "\n" +
                        ": روش‌های رصد و مأموریت‌ها\n" +
                        "\n" +
                        "بزارهایی مانند آلمای، اسپیتزر، هابل، چاندرا و تلسکوپ‌های مداری مادون‌قرمز و پرتو ایکس ویژگی این مناطق را بررسی می‌کنند. " +
                        "نقشه‌برداری میدان مغناطیسی و ساختار ابرها از داده‌های هرشل و آلمای با تفکیک زیرپارسکی ارائه شده است. " +
                        "پروژه‌هایی مانند گایا، زد تی اف و اگلی تحولات ستاره‌ها و خوشه‌های نوپدید را با دقت قابل‌توجه پیگیری می‌کنند\u202b." +
                        "\n" +
                        "\n" +
                        "\n" +
                        ": ویژگی‌های برجسته\n" +
                        "\n" +
                        "مکان‌هایی که ستارگان و سیارات شکل می‌گیرند؛ آزمایشگاه زنده فرایندهای اخترفیزیکی. " +
                        "وجود ساختارهای زیبا و نمادین مانند ستون خلقت در عقاب یا ستون‌های پیمایش در کارینا. " +
                        "نقش کلیدی در پیمایش کیهانی: با استفاده از خوشه‌های جوان و متغیرها می‌توان فاصله و ساختار کهکشان را شناسایی کرد. " +
                        "کمک به مدل‌سازی تشکیل کهکشان‌ها و انتقال ماده/انرژی از طریق بازخورد ستاره‌ای\u202b."
                )
                val textmortabet =
                    listOf("خورشیدی", "پرنور و مشهور", "غول و ابرغول", "کوتوله و داغ", "نوترونی و انفجاری", "متغیر و خاص", "اصول نظری")
                val imagemortabet = listOf(
                    painterResource(R.drawable.sun),
                    painterResource(R.drawable.starlite),
                    painterResource(R.drawable.bigstar),
                    painterResource(R.drawable.starlittle),
                    painterResource(R.drawable.starnetrun),
                    painterResource(R.drawable.starvarible),
                    painterResource(R.drawable.starnazari)
                )
                val tarkib = textmortabet.zip(imagemortabet)
                Column(
                    modifier = Modifier
                        .padding(25.dp)
                        .fillMaxSize()
                ) {
                    Box(modifier = Modifier.fillMaxSize())
                    {
                        LazyColumn(
                            horizontalAlignment = Alignment.CenterHorizontally
                        ) {
                            items(textmanateghsetarezayi) { letter ->
                                Column(modifier = Modifier.padding(30.dp)) {
                                    Row {
                                        Image(painter = painterResource(id = R.drawable.starnebula)
                                            , contentDescription = null , contentScale = ContentScale.Crop
                                            , modifier = Modifier.size(100.dp))
                                        Column {
                                            Text("")
                                            Row(modifier = Modifier.fillMaxWidth()
                                                ,horizontalArrangement = Arrangement.End
                                                , verticalAlignment = Alignment.CenterVertically) {
                                                Text("مناطق ستاره زایی" , fontSize = 20.sp  , color = Color.White , style = TextStyle(
                                                    shadow = Shadow(
                                                        color = Color(0xFFFFFFFF),
                                                        offset = Offset(0f ,0f)
                                                        , blurRadius = 20f
                                                    )
                                                ), maxLines = 1)
                                            }
                                        }
                                    }
                                }
                                Box(
                                    modifier = Modifier.fillMaxSize(),
                                    contentAlignment = Alignment.CenterStart,
                                ) {
                                    Column {
                                        Text(
                                            "$letter",
                                            fontSize = 20.sp,
                                            color = Color(0xFFFFFFFF),
                                            lineHeight = 32.sp,
                                            textAlign = TextAlign.Right
                                            , style = TextStyle(
                                                shadow = Shadow(
                                                    color = Color(0xFFFFFFFF),
                                                    offset = Offset(0f ,0f)
                                                    , blurRadius = 20f
                                                )
                                            )
                                        )
                                        Text("")
                                        Text("")
                                        Text("")
                                        Text(
                                            "موضوعات مرتبط",
                                            textAlign = TextAlign.Right,
                                            modifier = Modifier.fillMaxWidth(),
                                            fontSize = 30.sp,
                                            color = Color.White
                                            , style = TextStyle(
                                                shadow = Shadow(
                                                    color = Color(0xFFFFFFFF),
                                                    offset = Offset(0f ,0f)
                                                    , blurRadius = 20f
                                                )
                                            )
                                        )
                                        Text("")
                                        LazyRow(reverseLayout = true) {
                                            items(tarkib) { (matnha, aksha) ->
                                                Card(
                                                    modifier = Modifier
                                                        .width(250.dp)
                                                        .height(120.dp)
                                                        .padding(20.dp)
                                                        .clip(shape = RoundedCornerShape(100.dp)),
                                                    shape = RectangleShape,
                                                    colors = CardDefaults.cardColors(
                                                        containerColor = Color(
                                                            0xFF0707AD
                                                        )
                                                    )
                                                ) {
                                                    Box(
                                                        modifier = Modifier.fillMaxSize(),
                                                        contentAlignment = Alignment.CenterEnd
                                                    ) {
                                                        Image(
                                                            painter = painterResource(id = R.drawable.card),
                                                            contentScale = ContentScale.Crop,
                                                            contentDescription = null,
                                                            modifier = Modifier.fillMaxSize()
                                                        )
                                                        Button(
                                                            modifier = Modifier.fillMaxSize(
                                                            ).indication(indication = null ,
                                                                interactionSource = remember { MutableInteractionSource() }), onClick = {
                                                                if (matnha == "خورشیدی") {
                                                                    currentScreen = "sun"
                                                                    backap = false
                                                                }
                                                                if (matnha == "پرنور و مشهور") {
                                                                    currentScreen = "starlite"
                                                                    backap = false
                                                                }
                                                                if (matnha == "غول و ابرغول") {
                                                                    currentScreen = "starbig"
                                                                    backap = false
                                                                }
                                                                if (matnha == "کوتوله و داغ") {
                                                                    currentScreen = "starlittle"
                                                                    backap = false
                                                                }
                                                                if (matnha == "نوترونی و انفجاری") {
                                                                    currentScreen = "starnetron"
                                                                    backap = false
                                                                }
                                                                if (matnha == "متغیر و خاص") {
                                                                    currentScreen = "starvarible"
                                                                    backap = false
                                                                }
                                                                if (matnha == "مناطق ستاره زایی") {
                                                                    currentScreen = "starnebula"
                                                                    backap = false
                                                                }
                                                                if (matnha == "اصول نظری") {
                                                                    currentScreen = "starnazari"
                                                                    backap = false
                                                                }
                                                            }, colors = ButtonDefaults.buttonColors(
                                                                contentColor = Color.Transparent,
                                                                containerColor = Color.Transparent
                                                            )) {
                                                        }
                                                        Row() {
                                                            Spacer(modifier = Modifier.width(10.dp))
                                                            Column {
                                                                Spacer(modifier = Modifier.height(9.dp))
                                                                Text(
                                                                    "$matnha",
                                                                    color = Color.White,
                                                                    fontSize = 20.sp
                                                                    , style = TextStyle(
                                                                        shadow = Shadow(
                                                                            color = Color(0xFFFFFFFF),
                                                                            offset = Offset(0f ,0f)
                                                                            , blurRadius = 20f
                                                                        )
                                                                    )
                                                                )
                                                            }
                                                            Spacer(modifier = Modifier.width(15.dp))
                                                            Image(
                                                                painter = aksha,
                                                                contentDescription = null,
                                                                contentScale = ContentScale.Crop,
                                                                modifier = Modifier.size(50.dp)
                                                            )
                                                            Spacer(modifier = Modifier.width(15.dp))
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        Text("")
                                        Text("")
                                        Text("")
                                    }
                                }
                            }
                        }
                        var count by remember { mutableStateOf(0) }
                        IconButton(
                            onClick = { count++ },
                            modifier = Modifier
                                .size(70.dp)
                                .align(Alignment.BottomEnd)
                                .indication(indication = null ,
                                    interactionSource = remember { MutableInteractionSource() }),
                            colors = IconButtonDefaults.iconButtonColors(
                                containerColor = Color(0xFF030A33)
                            )
                        ) {
                            if (count % 2 == 0) {
                                Icon(
                                    imageVector = Icons.Default.Favorite,
                                    contentDescription = null,
                                    modifier = Modifier.size(50.dp),
                                    tint = Color.Transparent
                                )
                                Icon(
                                    imageVector = Icons.Default.FavoriteBorder,
                                    contentDescription = null,
                                    modifier = Modifier.size(50.dp),
                                    tint = Color.White
                                )
                            }
                            if (count % 2 == 1) {
                                Icon(
                                    imageVector = Icons.Default.Favorite,
                                    contentDescription = null,
                                    modifier = Modifier.size(50.dp),
                                    tint = Color.White
                                )
                                Icon(
                                    imageVector = Icons.Default.FavoriteBorder,
                                    contentDescription = null,
                                    modifier = Modifier.size(50.dp),
                                    tint = Color.White
                                )
                            }
                        }
                    }
                }
            }
        }
    }
}

@Composable
fun Starnazari(){
    Image(
        painter = painterResource(id = R.drawable.app_back),
        contentScale = ContentScale.Crop,
        contentDescription = null
    )
    when(currentScreen) {
        "starnazari" -> {
            Column {
                Card(
                    modifier = Modifier
                        .fillMaxWidth()
                        .height(32.5.dp),
                    shape = RectangleShape,
                    colors = CardDefaults.cardColors(containerColor = Color(0xFF030A33))
                ) {
                }
                Column(){
                    Card(
                        modifier = Modifier
                            .fillMaxWidth()
                            .height(50.dp),
                        shape = RectangleShape,
                        colors = CardDefaults.cardColors(containerColor = Color(0xFF0707AD))
                    ) {
                        Row(modifier = Modifier.padding(10.dp)) {
                            IconButton(onClick = {currentScreen = "asli1"
                                backap = true
                            } , colors = IconButtonDefaults.iconButtonColors(contentColor = Color.White)
                                , modifier = Modifier.indication(indication = null ,
                                    interactionSource = remember { MutableInteractionSource() })){
                                Icon(imageVector = Icons.Outlined.ArrowBack, contentDescription = null , modifier = Modifier.size(40.dp))
                            }
                            IconButton(
                                onClick = {},
                                colors = IconButtonDefaults.iconButtonColors(contentColor = Color.White),
                                modifier = Modifier.indication(indication = null ,
                                    interactionSource = remember { MutableInteractionSource() })
                            ) {
                                Icon(imageVector = Icons.Default.Info, contentDescription = null)
                            }
                            IconButton(
                                onClick = {},
                                colors = IconButtonDefaults.iconButtonColors(contentColor = Color.White),
                                modifier = Modifier.indication(indication = null ,
                                    interactionSource = remember { MutableInteractionSource() })
                            ) {
                                Icon(imageVector = Icons.Default.Share, contentDescription = null)
                            }
                            Row(
                                modifier = Modifier.fillMaxWidth(),
                                horizontalArrangement = Arrangement.End,
                                verticalAlignment = Alignment.CenterVertically
                            ) {
                                Text("اصول نظری", fontSize = 20.sp, color = Color.White  , maxLines = 1 , fontWeight = FontWeight.ExtraBold)
                                IconButton(onClick = {expanded = true},
                                    modifier = Modifier.size(50.dp)
                                        .indication(indication = null ,
                                            interactionSource = remember { MutableInteractionSource() }),
                                    colors = IconButtonDefaults.iconButtonColors(contentColor = Color.White)) {
                                    Icon(imageVector = Icons.Default.Menu, contentDescription = null)
                                }
                            }
                        }
                    }
                }


                var textaslneoriai = listOf(": معرفی کلی\n" +
                        "\n" +
                        "علم نظری اخترفیزیک (یا نظری-نجوم) تلاش می‌کند تا با استفاده از مدل‌های ریاضی، شبیه‌سازی‌های عددی و معادلات بنیادی فیزیک (مثل گرانش، ترمودینامیک، الکترودینامیک و نسبیت)، ساختار و پویایی اجرام آسمانی، شکل‌گیری ستارگان، تکامل کهکشان‌ها، و رفتار فضا-زمان را توضیح دهد و پیش‌بینی‌پذیری را در اخترشناسی افزایش دهد\u202b." +
                        "\n" +
                        "\n" +
                        "\n" +
                        ": چارچوب‌های نظری پایه\n" +
                        "\n" +
                        "مکانیک نیوتنی و گرانش عمومی: برای تحلیل مدارها، تعادل هیدرواستاتیکی و دینامیک سیالات اخترفیزیکی کاربرد دارد. " +
                        "نسبیت عام: پیش‌بینی خاصیت‌هایی همچون خمیدگی فضا-زمان، سیاه‌چاله‌ها، انحراف نور و امواج گرانشی. " +
                        "مکانیک کوانتومی و هسته‌ای: برای توضیح واکنش‌های همجوشی در هستهٔ ستارگان، تشعشعات ابرنواختری، و تشکیل عناصر سنگین استفاده می‌شود. " +
                        "دینامیک سیالات و مغناطیدینامیک: معادلات بولتزمن، اویلر، مغناطیدینامیک در توصیف جریان گاز، فروپاشی ناحیه‌های ستاره‌زایی، دیسک‌های برافزایشی و بادهای ستاره‌ای نقش دارد. " +
                        "انتقال تشعشع: مدل‌‌سازی رفتار فوتون‌ها در گاز/غبار، تعادل ال تی ای و محاسبات طیفی، بخش مهمی از مدل‌های ساختار ستاره‌ای هستند\u202b." +
                        "\n" +
                        "\n" +
                        "\n" +
                        ": اصول و مبانی نظری کلیدی\n" +
                        "\n" +
                        "اصل همگنی و همسانگردی کیهان: فرض می‌کند بر مقیاس‌های بزرگ، کیهان یکنواخت است؛ " +
                        "نظریه بیگ‌بنگ و نمو ساختار: مدل ای کام با معادلات فریدمن نسبیت عام، بر همبستگی ماده، انرژی تاریک و نوترینوها مبتنی است. " +
                        "مکانیک هسته‌ای ستاره‌ای: واکنش‌های پی‌پی، شعلات هلیومی، ومکانیزم‌هایی مثل آر پروسس و اس پروسس، منجر به تولید عناصر تا اورانیوم می‌شوند. " +
                        "نظریه تشکیل ستاره: معیار ژنس برای بی‌ثباتی، مسیرهای هنی برای تکامل پیش‌ستاره تا رشته اصلی، نقش بازخورد (تابش، باد، ابرنواختر) در به‌هم‌ریختن و تحریک ستاره‌زایی. " +
                        "نظریه تشکیل کهکشان و بازخورد ابرنواختری: قوانین اشمیت-کنیکات، تعامل‌هایی بین تشکیل ستاره و سیاه‌چاله‌های مرکزی در تکامل کهکشان‌ها. " +
                        "پدیده‌های غیرخطی و آشفتگی: توربولانس، میدان مغناطیسی و واکنش‌های شگ در ساختارهای کلان‌ستاره‌ای\u202b." +
                        "\n" +
                        "\n" +
                        "\n" +
                        ": کاربردها و پیش‌بینی‌ها\n" +
                        "\n" +
                        "پیش‌بینی امواج گرانشی از برخوردها، سپس آشکارسازی توسط ویرگو/کاگرا. " +
                        "مدل‌سازی دقیق طیف ستارگان و سحابی‌ها برای تعیین دما، ترکیب شیمیایی و میدان مغناطیسی. " +
                        "محاسبه نرخ تشکیل ستاره و توزیع جرم اولیه در کهکشان‌ها. " +
                        "شبیه‌سازی عددی ساختار کهکشان، باد گالاکتیکی، و عملکرد سیاه‌چاله در مرکز کهکشان. " +
                        "پیش‌بینی تشکیل سیارات و قرص‌های برافزایشی در اطراف پیش‌ستاره‌ها و ستارگان دوتایی\u202b." +
                        "\n" +
                        "\n" +
                        "\n" +
                        ": نقش در علم و فناوری\n" +
                        "\n" +
                        "نظریه بنیادی بسیاری از مشاهدات را به هم متصل می‌کند و سبب فهم عمیق‌تر کیهان می‌شود. " +
                        "راهنمای طراحی مأموریت‌های فضایی (لیسا، سکا و غیره) و مطالعات امواج گرانشی، پرتو ایکس و رادیویی. " +
                        "پیشگویی پدیده‌های جدید و هدایت تلاش‌های رصدی (مانند تلسکوپ‌های چیزیابی و آشکارسازی موج گرانشی)\u202b." +
                        "\n" +
                        "\n" +
                        "\n" +
                        ": بخش نظری برجسته\n" +
                        "\n" +
                        "مدل ای کام: چارچوب اصلی کیهان‌شناسی نظری برای تبیین ساختار و توسعه کیهان. " +
                        "مسیرهای هایشی: راهنمای تکامل پیش‌ستاره‌ای در نمودار اچ آر. " +
                        "معیار ژنس: شرط گرانش بر آشفتگی برای آغاز فروپاشی گرانشی. " +
                        "معادلات ام اچ دی و انتقال تشعشع: پایه تشریح دیسک‌های برافزایشی، بادهای ستاره‌ای، انتقال انرژی در ستارگان. " +
                        "شبیه‌سازی‌های چندفازی: تعامل ماده، تشعشع، آهنگ تشکیل ستاره و میدان‌مغناطیسی در سطح کهکشانی\u202b."
                )
                val textmortabet =
                    listOf("خورشیدی", "پرنور و مشهور", "غول و ابرغول", "کوتوله و داغ", "نوترونی و انفجاری", "متغیر و خاص", "مناطق ستاره زایی")
                val imagemortabet = listOf(
                    painterResource(R.drawable.sun),
                    painterResource(R.drawable.starlite),
                    painterResource(R.drawable.bigstar),
                    painterResource(R.drawable.starlittle),
                    painterResource(R.drawable.starnetrun),
                    painterResource(R.drawable.starvarible),
                    painterResource(R.drawable.starnebula)
                )
                val tarkib = textmortabet.zip(imagemortabet)
                Column(
                    modifier = Modifier
                        .padding(25.dp)
                        .fillMaxSize()
                ) {
                    Box(modifier = Modifier.fillMaxSize())
                    {
                        LazyColumn(
                            horizontalAlignment = Alignment.CenterHorizontally
                        ) {
                            items(textaslneoriai) { letter ->
                                Column(modifier = Modifier.padding(30.dp)) {
                                    Row {
                                        Image(painter = painterResource(id = R.drawable.starnazari)
                                            , contentDescription = null , contentScale = ContentScale.Crop
                                            , modifier = Modifier.size(100.dp))
                                        Column {
                                            Text("")
                                            Row(modifier = Modifier.fillMaxWidth()
                                                ,horizontalArrangement = Arrangement.End
                                                , verticalAlignment = Alignment.CenterVertically) {
                                                Text("اصول نظری" , fontSize = 20.sp  , color = Color.White , style = TextStyle(
                                                    shadow = Shadow(
                                                        color = Color(0xFFFFFFFF),
                                                        offset = Offset(0f ,0f)
                                                        , blurRadius = 20f
                                                    )
                                                ), maxLines = 1)
                                            }
                                        }
                                    }
                                }
                                Box(
                                    modifier = Modifier.fillMaxSize(),
                                    contentAlignment = Alignment.CenterStart,
                                ) {
                                    Column {
                                        Text(
                                            "$letter",
                                            fontSize = 20.sp,
                                            color = Color(0xFFFFFFFF),
                                            lineHeight = 32.sp,
                                            textAlign = TextAlign.Right
                                            , style = TextStyle(
                                                shadow = Shadow(
                                                    color = Color(0xFFFFFFFF),
                                                    offset = Offset(0f ,0f)
                                                    , blurRadius = 20f
                                                )
                                            )
                                        )
                                        Text("")
                                        Text("")
                                        Text("")
                                        Text(
                                            "موضوعات مرتبط",
                                            textAlign = TextAlign.Right,
                                            modifier = Modifier.fillMaxWidth(),
                                            fontSize = 30.sp,
                                            color = Color.White
                                            , style = TextStyle(
                                                shadow = Shadow(
                                                    color = Color(0xFFFFFFFF),
                                                    offset = Offset(0f ,0f)
                                                    , blurRadius = 20f
                                                )
                                            )
                                        )
                                        Text("")
                                        LazyRow(reverseLayout = true) {
                                            items(tarkib) { (matnha, aksha) ->
                                                Card(
                                                    modifier = Modifier
                                                        .width(250.dp)
                                                        .height(120.dp)
                                                        .padding(20.dp)
                                                        .clip(shape = RoundedCornerShape(100.dp)),
                                                    shape = RectangleShape,
                                                    colors = CardDefaults.cardColors(
                                                        containerColor = Color(
                                                            0xFF0707AD
                                                        )
                                                    )
                                                ) {
                                                    Box(
                                                        modifier = Modifier.fillMaxSize(),
                                                        contentAlignment = Alignment.CenterEnd
                                                    ) {
                                                        Image(
                                                            painter = painterResource(id = R.drawable.card),
                                                            contentScale = ContentScale.Crop,
                                                            contentDescription = null,
                                                            modifier = Modifier.fillMaxSize()
                                                        )
                                                        Button(
                                                            modifier = Modifier.fillMaxSize(
                                                            ).indication(indication = null ,
                                                                interactionSource = remember { MutableInteractionSource() }), onClick = {
                                                                if (matnha == "خورشیدی") {
                                                                    currentScreen = "sun"
                                                                    backap = false
                                                                }
                                                                if (matnha == "پرنور و مشهور") {
                                                                    currentScreen = "starlite"
                                                                    backap = false
                                                                }
                                                                if (matnha == "غول و ابرغول") {
                                                                    currentScreen = "starbig"
                                                                    backap = false
                                                                }
                                                                if (matnha == "کوتوله و داغ") {
                                                                    currentScreen = "starlittle"
                                                                    backap = false
                                                                }
                                                                if (matnha == "نوترونی و انفجاری") {
                                                                    currentScreen = "starnetron"
                                                                    backap = false
                                                                }
                                                                if (matnha == "متغیر و خاص") {
                                                                    currentScreen = "starvarible"
                                                                    backap = false
                                                                }
                                                                if (matnha == "مناطق ستاره زایی") {
                                                                    currentScreen = "starnebula"
                                                                    backap = false
                                                                }
                                                                if (matnha == "اصول نظری") {
                                                                    currentScreen = "starnazari"
                                                                    backap = false
                                                                }
                                                            }, colors = ButtonDefaults.buttonColors(
                                                                contentColor = Color.Transparent,
                                                                containerColor = Color.Transparent
                                                            )) {
                                                        }
                                                        Row() {
                                                            Spacer(modifier = Modifier.width(10.dp))
                                                            Column {
                                                                Spacer(modifier = Modifier.height(9.dp))
                                                                Text(
                                                                    "$matnha",
                                                                    color = Color.White,
                                                                    fontSize = 20.sp
                                                                    , style = TextStyle(
                                                                        shadow = Shadow(
                                                                            color = Color(0xFFFFFFFF),
                                                                            offset = Offset(0f ,0f)
                                                                            , blurRadius = 20f
                                                                        )
                                                                    )
                                                                )
                                                            }
                                                            Spacer(modifier = Modifier.width(15.dp))
                                                            Image(
                                                                painter = aksha,
                                                                contentDescription = null,
                                                                contentScale = ContentScale.Crop,
                                                                modifier = Modifier.size(50.dp)
                                                            )
                                                            Spacer(modifier = Modifier.width(15.dp))
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        Text("")
                                        Text("")
                                        Text("")
                                    }
                                }
                            }
                        }
                        var count by remember { mutableStateOf(0) }
                        IconButton(
                            onClick = { count++ },
                            modifier = Modifier
                                .size(70.dp)
                                .align(Alignment.BottomEnd)
                                .indication(indication = null ,
                                    interactionSource = remember { MutableInteractionSource() }),
                            colors = IconButtonDefaults.iconButtonColors(
                                containerColor = Color(0xFF030A33)
                            )
                        ) {
                            if (count % 2 == 0) {
                                Icon(
                                    imageVector = Icons.Default.Favorite,
                                    contentDescription = null,
                                    modifier = Modifier.size(50.dp),
                                    tint = Color.Transparent
                                )
                                Icon(
                                    imageVector = Icons.Default.FavoriteBorder,
                                    contentDescription = null,
                                    modifier = Modifier.size(50.dp),
                                    tint = Color.White
                                )
                            }
                            if (count % 2 == 1) {
                                Icon(
                                    imageVector = Icons.Default.Favorite,
                                    contentDescription = null,
                                    modifier = Modifier.size(50.dp),
                                    tint = Color.White
                                )
                                Icon(
                                    imageVector = Icons.Default.FavoriteBorder,
                                    contentDescription = null,
                                    modifier = Modifier.size(50.dp),
                                    tint = Color.White
                                )
                            }
                        }
                    }
                }
            }
        }
    }
}









//قمر ها










@Composable
fun Moonnatural(){
    Image(
        painter = painterResource(id = R.drawable.app_back),
        contentScale = ContentScale.Crop,
        contentDescription = null
    )
    when(currentScreen) {
        "moonnatural" -> {
            Column {
                Card(
                    modifier = Modifier
                        .fillMaxWidth()
                        .height(32.5.dp),
                    shape = RectangleShape,
                    colors = CardDefaults.cardColors(containerColor = Color(0xFF030A33))
                ) {
                }
                Column(){
                    Card(
                        modifier = Modifier
                            .fillMaxWidth()
                            .height(50.dp),
                        shape = RectangleShape,
                        colors = CardDefaults.cardColors(containerColor = Color(0xFF0707AD))
                    ) {
                        Row(modifier = Modifier.padding(10.dp)) {
                            IconButton(onClick = {currentScreen = "asli2"
                                backap = true
                            } , colors = IconButtonDefaults.iconButtonColors(contentColor = Color.White)
                                , modifier = Modifier.indication(indication = null ,
                                    interactionSource = remember { MutableInteractionSource() })){
                                Icon(imageVector = Icons.Outlined.ArrowBack, contentDescription = null , modifier = Modifier.size(40.dp))
                            }
                            IconButton(
                                onClick = {},
                                colors = IconButtonDefaults.iconButtonColors(contentColor = Color.White),
                                modifier = Modifier.indication(indication = null ,
                                    interactionSource = remember { MutableInteractionSource() })
                            ) {
                                Icon(imageVector = Icons.Default.Info, contentDescription = null)
                            }
                            IconButton(
                                onClick = {},
                                colors = IconButtonDefaults.iconButtonColors(contentColor = Color.White),
                                modifier = Modifier.indication(indication = null ,
                                    interactionSource = remember { MutableInteractionSource() })
                            ) {
                                Icon(imageVector = Icons.Default.Share, contentDescription = null)
                            }
                            Row(
                                modifier = Modifier.fillMaxWidth(),
                                horizontalArrangement = Arrangement.End,
                                verticalAlignment = Alignment.CenterVertically
                            ) {
                                Text("قمر های طبیعی", fontSize = 20.sp, color = Color.White  , maxLines = 1 , fontWeight = FontWeight.ExtraBold)
                                IconButton(onClick = {expanded = true},
                                    modifier = Modifier.size(50.dp)
                                        .indication(indication = null ,
                                            interactionSource = remember { MutableInteractionSource() }),
                                    colors = IconButtonDefaults.iconButtonColors(contentColor = Color.White)) {
                                    Icon(imageVector = Icons.Default.Menu, contentDescription = null)
                                }
                            }
                        }
                    }
                }


                var textghamarhatabiie = listOf(
                    ": معرفی کلی\n" +
                            "\n" +
                            "قمرهای طبیعی اجرامی هستند که به‌صورت طبیعی در مدار سیارات، سیارات کوتوله یا اجرام کمربند کویپر در گردش‌اند. تا مارس ۲۰۲۵، بیش از ۸۹۰ قمر تأییدشده در سامانه خورشیدی شناسایی شده‌اند. از این تعداد، بیش از ۴۲۰ عدد به سیارات اصلی و کوتوله‌ها تعلق دارند و باقی پیرامون اجرام کوچک‌تر مانند سیارک‌ها و اجرام فرانپتونی یافت شده‌اند. قمرهای طبیعی نقش کلیدی در بررسی شکل‌گیری سامانه‌های سیاره‌ای، تعاملات گرانشی، ساختارهای داخلی و امکان زیست‌پذیری دارند\u202b." +
                            "\n" +
                            "\n" +
                            "\n" +
                            ": چارچوب‌های رده‌بندی و دسته‌بندی\n" +
                            "\n" +
                            "رده‌بندی براساس جرم مرکزی: قمرهای وابسته به سیارات (مانند ماه زمین، تیتانِ زحل)، سیارات کوتوله (مانند شارونِ پلوتو) و اجرام کوچک فرانپتونی (مانند وان‌تینِ اورکوس). " +
                            "رده‌بندی براساس مدار: قمرهای منظم (مدار نزدیک به صفحه استوایی سیاره و اغلب پروگراد) و قمرهای نامنظم (مدار دور، انحراف‌دار، گاه رتروگراد). " +
                            "رده‌بندی براساس منشأ: حاصل از چگالش همزمان با سیاره (مانند قمرهای گالیله‌ای)، اسیرشده گرانشی (مانند تریتون)، یا زاییده برخورد (مانند ماه زمین)\u202b." +
                            "\n" +
                            "\n" +
                            "\n" +
                            ": اصول و مبانی نظری کلیدی\n" +
                            "\n" +
                            "تئوری تشکیل قمرها: شامل سناریوهای هم‌چگالشی، برخورد غول‌آسا و اسیرشدگی گرانشی. " +
                            "دینامیک مداری: تعاملات کشندی (جزر و مدی)، قفل کشندی، مهاجرت مداری و رزونانس‌های مداری. " +
                            "فرگشت حرارتی و ساختاری: یخ‌زایی، لایه‌بندی داخلی، امکان وجود اقیانوس زیرسطحی. " +
                            "پدیده‌های سطحی و ژئوفیزیکی: آتشفشان‌های یخ‌فشان (مانند انسلادوس)، شکاف‌ها و ترک‌های پوسته، برهم‌کنش با کمربند مغناطیسی سیاره مادر. " +
                            "برخی قمرها (مانند اروپا، انسلادوس، تیتان) به‌عنوان مکان‌های بالقوه زیست‌پذیر در نظر گرفته می‌شوند\u202b." +
                            "\n" +
                            "\n" +
                            "\n" +
                            ": کاربردها و پیش‌بینی‌ها\n" +
                            "\n" +
                            "پیش‌بینی وجود اقیانوس‌های زیرسطحی در اروپا و انسلادوس از طریق داده‌های مغناطیسی و حرارتی. " +
                            "تحلیل دینامیک سیستم‌های چندقمری و اثرات جزر و مدی در گرم‌سازی داخلی. " +
                            "برنامه‌ریزی مأموریت‌های فضایی (مانند کلیپر به اروپا و دراگون‌فلای به تیتان) برای بررسی امکان حیات. " +
                            "استفاده از قمرها برای درک بهتر فرآیندهای سیاره‌ای، از جمله ژئوفیزیک، ترکیب شیمیایی و تاریخچه حرارتی\u202b." +
                            "\n" +
                            "\n" +
                            "\n" +
                            ": نقش در علم و فناوری\n" +
                            "\n" +
                            "قمرهای طبیعی آزمایشگاه‌هایی برای بررسی شکل‌گیری و تحول سامانه‌های سیاره‌ای‌اند. " +
                            "الهام‌بخش مدل‌سازی‌های دینامیکی پیچیده و توسعه نظریه‌های کشندی و پایداری مداری. " +
                            "راهنمای طراحی مأموریت‌های رباتیک و نمونه‌برداری (مانند لندرهای سطحی یا مدارگردها). " +
                            "زمینه‌ساز پژوهش در زمینه زیست‌فناوری سیاره‌ای، اقیانوس‌های بیرونی و منشاء احتمالی حیات فرای‌زمین\u202b." +
                            "\n" +
                            "\n" +
                            "\n" +
                            ": بخش نظری برجسته\n" +
                            "\n" +
                            "قمر گانیمد: بزرگ‌ترین قمر سامانه خورشیدی، دارای میدان مغناطیسی داخلی مستقل. " +
                            "قمر تیتان: دارای جو ضخیم نیتروژنی و رودخانه‌ها و دریاچه‌های متانی. " +
                            "قمر اروپا: پوسته یخی با شواهد از اقیانوس مایع در زیر آن. " +
                            "قمر انسلادوس: دارای چشمه‌های فوران بخار و یخ از قطب جنوب. " +
                            "قمر تریتون: قمر رتروگراد نپتون با فعالیت ژئوفیزیکی و یخ‌فشان. " +
                            "قمر شارون: تقریباً نیمی از جرم پلوتو و دارای رزونانس مداری-چرخشی با آن. " +
                            "قمر ماه: نمونه بارز قمرهای حاصل از برخورد، تنها جرم آسمانی با انسان‌نشینی. " +
                            "مدل‌های تعاملات کشندی: مانند قفل کشندی ماه-زمین و گرمایش داخلی آیو. " +
                            "تحلیل رزنانس لاپلاس: رابطهٔ مداری بین آیو، اروپا و گانیمد. " +
                            "شبیه‌سازی‌های فرگشت قمری در سیارات غول‌پیکر و پیش‌بینی وجود قمرهای یخی در سامانه‌های فراخورشیدی\u202b."
                )
                val textmortabet =
                    listOf("قمر های مصنوعی", "قمر های منظم", "قمر های نامنظم", "قمر های دوگانه", "قمر های برخوردی", "قمر بین ستاره ای")
                val imagemortabet = listOf(
                    painterResource(R.drawable.moonartificioal),
                    painterResource(R.drawable.moonregular),
                    painterResource(R.drawable.mooniregular),
                    painterResource(R.drawable.moon2gane),
                    painterResource(R.drawable.moonbarkhordi),
                    painterResource(R.drawable.moonstari)
                )
                val tarkib = textmortabet.zip(imagemortabet)
                Column(
                    modifier = Modifier
                        .padding(25.dp)
                        .fillMaxSize()
                ) {
                    Box(modifier = Modifier.fillMaxSize())
                    {
                        LazyColumn(
                            horizontalAlignment = Alignment.CenterHorizontally
                        ) {
                            items(textghamarhatabiie) { letter ->
                                Column(modifier = Modifier.padding(30.dp)) {
                                    Row {
                                        Image(painter = painterResource(id = R.drawable.moonnatural)
                                            , contentDescription = null , contentScale = ContentScale.Crop
                                            , modifier = Modifier.size(100.dp))
                                        Column {
                                            Text("")
                                            Row(modifier = Modifier.fillMaxWidth()
                                                ,horizontalArrangement = Arrangement.End
                                                , verticalAlignment = Alignment.CenterVertically) {
                                                Text("قمر های طبیعی" , fontSize = 20.sp  , color = Color.White , style = TextStyle(
                                                    shadow = Shadow(
                                                        color = Color(0xFFFFFFFF),
                                                        offset = Offset(0f ,0f)
                                                        , blurRadius = 20f
                                                    )
                                                ), maxLines = 1)
                                            }
                                        }
                                    }
                                }
                                Box(
                                    modifier = Modifier.fillMaxSize(),
                                    contentAlignment = Alignment.CenterStart,
                                ) {
                                    Column {
                                        Text(
                                            "$letter",
                                            fontSize = 20.sp,
                                            color = Color(0xFFFFFFFF),
                                            lineHeight = 32.sp,
                                            textAlign = TextAlign.Right
                                            , style = TextStyle(
                                                shadow = Shadow(
                                                    color = Color(0xFFFFFFFF),
                                                    offset = Offset(0f ,0f)
                                                    , blurRadius = 20f
                                                )
                                            )
                                        )
                                        Text("")
                                        Text("")
                                        Text("")
                                        Text(
                                            "موضوعات مرتبط",
                                            textAlign = TextAlign.Right,
                                            modifier = Modifier.fillMaxWidth(),
                                            fontSize = 30.sp,
                                            color = Color.White
                                            , style = TextStyle(
                                                shadow = Shadow(
                                                    color = Color(0xFFFFFFFF),
                                                    offset = Offset(0f ,0f)
                                                    , blurRadius = 20f
                                                )
                                            )
                                        )
                                        Text("")
                                        LazyRow(reverseLayout = true) {
                                            items(tarkib) { (matnha, aksha) ->
                                                Card(
                                                    modifier = Modifier
                                                        .width(250.dp)
                                                        .height(120.dp)
                                                        .padding(20.dp)
                                                        .clip(shape = RoundedCornerShape(100.dp)),
                                                    shape = RectangleShape,
                                                    colors = CardDefaults.cardColors(
                                                        containerColor = Color(
                                                            0xFF0707AD
                                                        )
                                                    )
                                                ) {
                                                    Box(
                                                        modifier = Modifier.fillMaxSize(),
                                                        contentAlignment = Alignment.CenterEnd
                                                    ) {
                                                        Image(
                                                            painter = painterResource(id = R.drawable.card),
                                                            contentScale = ContentScale.Crop,
                                                            contentDescription = null,
                                                            modifier = Modifier.fillMaxSize()
                                                        )
                                                        Button(
                                                            modifier = Modifier.fillMaxSize(
                                                            ).indication(indication = null ,
                                                                interactionSource = remember { MutableInteractionSource() }), onClick = {
                                                                if (matnha == "قمر های طبیعی") {
                                                                    currentScreen = "moonnatural"
                                                                    backap = false
                                                                }
                                                                if (matnha == "قمر های مصنوعی") {
                                                                    currentScreen = "moonartificional"
                                                                    backap = false
                                                                }
                                                                if (matnha == "قمر های منظم") {
                                                                    currentScreen = "moonregular"
                                                                    backap = false
                                                                }
                                                                if (matnha == "قمر های نامنظم") {
                                                                    currentScreen = "mooniregular"
                                                                    backap = false
                                                                }
                                                                if (matnha == "قمر های دوگانه") {
                                                                    currentScreen = "moon2gane"
                                                                    backap = false
                                                                }
                                                                if (matnha == "قمر های برخوردی") {
                                                                    currentScreen = "moonbarkhordi"
                                                                    backap = false
                                                                }
                                                                if (matnha == "قمر بین ستاره ای") {
                                                                    currentScreen = "moonstari"
                                                                    backap = false
                                                                }
                                                            }, colors = ButtonDefaults.buttonColors(
                                                                contentColor = Color.Transparent,
                                                                containerColor = Color.Transparent
                                                            )) {
                                                        }
                                                        Row() {
                                                            Spacer(modifier = Modifier.width(10.dp))
                                                            Column {
                                                                Spacer(modifier = Modifier.height(9.dp))
                                                                Text(
                                                                    "$matnha",
                                                                    color = Color.White,
                                                                    fontSize = 20.sp
                                                                    , style = TextStyle(
                                                                        shadow = Shadow(
                                                                            color = Color(0xFFFFFFFF),
                                                                            offset = Offset(0f ,0f)
                                                                            , blurRadius = 20f
                                                                        )
                                                                    )
                                                                )
                                                            }
                                                            Spacer(modifier = Modifier.width(15.dp))
                                                            Image(
                                                                painter = aksha,
                                                                contentDescription = null,
                                                                contentScale = ContentScale.Crop,
                                                                modifier = Modifier.size(50.dp)
                                                            )
                                                            Spacer(modifier = Modifier.width(15.dp))
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        Text("")
                                        Text("")
                                        Text("")
                                    }
                                }
                            }
                        }
                        var count by remember { mutableStateOf(0) }
                        IconButton(
                            onClick = { count++ },
                            modifier = Modifier
                                .size(70.dp)
                                .align(Alignment.BottomEnd)
                                .indication(indication = null ,
                                    interactionSource = remember { MutableInteractionSource() }),
                            colors = IconButtonDefaults.iconButtonColors(
                                containerColor = Color(0xFF030A33)
                            )
                        ) {
                            if (count % 2 == 0) {
                                Icon(
                                    imageVector = Icons.Default.Favorite,
                                    contentDescription = null,
                                    modifier = Modifier.size(50.dp),
                                    tint = Color.Transparent
                                )
                                Icon(
                                    imageVector = Icons.Default.FavoriteBorder,
                                    contentDescription = null,
                                    modifier = Modifier.size(50.dp),
                                    tint = Color.White
                                )
                            }
                            if (count % 2 == 1) {
                                Icon(
                                    imageVector = Icons.Default.Favorite,
                                    contentDescription = null,
                                    modifier = Modifier.size(50.dp),
                                    tint = Color.White
                                )
                                Icon(
                                    imageVector = Icons.Default.FavoriteBorder,
                                    contentDescription = null,
                                    modifier = Modifier.size(50.dp),
                                    tint = Color.White
                                )
                            }
                        }
                    }
                }
            }
        }
    }
}

@Composable
fun MoonArtificional(){
    Image(
        painter = painterResource(id = R.drawable.app_back),
        contentScale = ContentScale.Crop,
        contentDescription = null
    )
    when(currentScreen) {
        "moonartificional" -> {
            Column {
                Card(
                    modifier = Modifier
                        .fillMaxWidth()
                        .height(32.5.dp),
                    shape = RectangleShape,
                    colors = CardDefaults.cardColors(containerColor = Color(0xFF030A33))
                ) {
                }
                Column(){
                    Card(
                        modifier = Modifier
                            .fillMaxWidth()
                            .height(50.dp),
                        shape = RectangleShape,
                        colors = CardDefaults.cardColors(containerColor = Color(0xFF0707AD))
                    ) {
                        Row(modifier = Modifier.padding(10.dp)) {
                            IconButton(onClick = {currentScreen = "asli2"
                                backap = true
                            } , colors = IconButtonDefaults.iconButtonColors(contentColor = Color.White)
                                , modifier = Modifier.indication(indication = null ,
                                    interactionSource = remember { MutableInteractionSource() })){
                                Icon(imageVector = Icons.Outlined.ArrowBack, contentDescription = null , modifier = Modifier.size(40.dp))
                            }
                            IconButton(
                                onClick = {},
                                colors = IconButtonDefaults.iconButtonColors(contentColor = Color.White),
                                modifier = Modifier.indication(indication = null ,
                                    interactionSource = remember { MutableInteractionSource() })
                            ) {
                                Icon(imageVector = Icons.Default.Info, contentDescription = null)
                            }
                            IconButton(
                                onClick = {},
                                colors = IconButtonDefaults.iconButtonColors(contentColor = Color.White),
                                modifier = Modifier.indication(indication = null ,
                                    interactionSource = remember { MutableInteractionSource() })
                            ) {
                                Icon(imageVector = Icons.Default.Share, contentDescription = null)
                            }
                            Row(
                                modifier = Modifier.fillMaxWidth(),
                                horizontalArrangement = Arrangement.End,
                                verticalAlignment = Alignment.CenterVertically
                            ) {
                                Text("قمر های مصنوعی", fontSize = 20.sp, color = Color.White  , maxLines = 1 , fontWeight = FontWeight.ExtraBold)
                                IconButton(onClick = {expanded = true},
                                    modifier = Modifier.size(50.dp)
                                        .indication(indication = null ,
                                            interactionSource = remember { MutableInteractionSource() }),
                                    colors = IconButtonDefaults.iconButtonColors(contentColor = Color.White)) {
                                    Icon(imageVector = Icons.Default.Menu, contentDescription = null)
                                }
                            }
                        }
                    }
                }


                var textghamarmasnoi = listOf(
                    ": معرفی کلی\n" +
                            "\n" +
                            "قمرهای مصنوعی (ماهواره‌های مصنوعی) اجرام ساخت بشر هستند که عمدتاً به دور زمین و گاهی سیارات دیگر در گردشند. تا می ۲۰۲۵، حدود ۱۴٬۹۰۰ ماهواره در مدار زمین قرار دارند که نزدیک به ۱۱٬۷۰۰ تای آنها فعال هستند؛ بقیه عمدتاً ماهواره‌های غیرفعال یا زباله‌های فضایی‌اند. این تعداد بی‌سابقه ناشی از افزایش کنستلیشن‌های بزرگ مانند استارلینکِ اسپیس‌ایکس (بیش از ۷٬۳۰۰ ماهواره) و پروژه‌هایی چون کویپر آمازون است\u202b." +
                            "\n" +
                            "\n" +
                            "\n" +
                            ": چارچوب‌های رده‌بندی و دسته‌بندی\n" +
                            "\n" +
                            "رده‌بندی براساس مدار: لیو (مدار پایین)، میو (مدار میانی)، گیو (مدار هم‌دور فضایی)، هیو (مدار بیضوی بلند)؛ کاربردهایی چون مخابرات، ناوبری، رصد زمین، علمی و نظامی دارند. " +
                            "رده‌بندی براساس وضعیت عملکرد: فعال (~۱۱٬۷۰۰)، غیرفعال یا زباله فضایی البته شامل حدود ۳٬۰۰۰–۴٬۰۰۰ ماهواره غیرعملیاتی تا مارس ۲۰۲۵ است. " +
                            "رده‌بندی براساس مالکیت/ملیت: آمریکا (بیش از ۴٬۵۰۰)، چین (~۵۹۰)، روسیه (~۱۷۴)، اتحادیه اروپا، هند، ژاپن و دیگر کشورها که در مجموع بیش از ۳۰ کشور ماهواره‌ای فعال دارند\u202b." +
                            "\n" +
                            "\n" +
                            "\n" +
                            ": اصول و مبانی نظری کلیدی\n" +
                            "\n" +
                            "مدل‌سازی مدارات: شامل پایداری مدار، تاثیر جاذبه‌ی زمین، تاثیر مقاومت جو (برای لیو)، و رزنناس مداری. " +
                            "الگوهای مداومت: تحت تاثیر چگالی جو، وضعیت خورشیدی و برخورد اجسام. " +
                            "زنجیره‌ی کنستلیشن: طراحی برای پوشش جهانی با تعداد بالا و تعاملات همزمان. " +
                            "مدیریت ترافیک فضایی: تدوین قوانین خودداری از برخورد، تعریف مجالی برای مدارهای مشترک. " +
                            "ریسک‌های محیطی: انباشت زباله‌های فضایی، پدیده کسلر و تاثیر گرم شدن اقلیمی بر فرسودگی جو\u202b." +
                            "\n" +
                            "\n" +
                            "\n" +
                            ": کاربردها و پیش‌بینی‌ها\n" +
                            "\n" +
                            "ارتباطات: کنستلیشن‌های لیو برای اینترنت جهانی (استارلینک ، کویپر ، وان وب). " +
                            "رصد زمین: مانیتورینگ اقلیم، کشاورزی، جنگل‌ها، بلایای طبیعی با ماهواره‌های لیو و جیو. " +
                            "ناوبری: سامانه‌های جی پی اس، بی دو در میو. " +
                            "پژوهش علمی: تلسکوپ‌های فضایی، ایستگاه فضایی بین‌المللی (آی اس اس) در لیو. " +
                            "آینده: پیش‌بینی احتمال رسیدن تعداد فعال به ۱۰۰٬۰۰۰ تا قبل از ۲۰۵۰ و تبدیل حجم زیادی از مدار به شلوغ‌ترین فضای عملیاتی بشر\u202b." +
                            "\n" +
                            "\n" +
                            "\n" +
                            ": نقش در علم و فناوری\n" +
                            "\n" +
                            "ماهواره‌ها ابزارهای کلیدی صنایع ارتباطات، ناوبری، هواشناسی، سنجش از دور و علم فضایی‌اند. " +
                            "داده‌های آن‌ها پایه تصمیم‌سازی جهانی برای کشاورزی، مدیریت بحران، تغییر اقلیم و زیرساخت‌های دیجیتال. " +
                            "هم‌زمان، ضرورت توسعه فناوری‌های جلوگیری از برخورد و مقررات بین‌المللی را برای حفظ امنیت و پایداری فضا تقویت کرده‌اند\u202b." +
                            "\n" +
                            "\n" +
                            "\n" +
                            ": بخش نظری برجسته\n" +
                            "\n" +
                            "(اولین ماهواره، ۴ اکتبر ۱۹۵۷، لیو). " +
                            "ایستگاه فضایی آی اس اس (مدار ~۴۰۰ کیلومتر، گردش ~۹۲ دقیقه). " +
                            "ستون‌های کنستلیشن: استارلینک (~۷٬۳۰۰ ماهواره)، کویپر (در حال گسترش). " +
                            "مدار لیو: سرعت ~۷٫۸ کیلومتر بر ثانیه، زمان گردش ~۹۰ دقیقه. " +
                            "مدار جیو: ارتفاع ~۳۶،۰۰۰ کیلومتر، کبالت با چرخش زمین. " +
                            "زوال مدار: تحت تأثیر کشش اتمسفر، فعالیت خورشیدی و انتشار بخار سرد در اقلیم گرم‌شونده. " +
                            "مسئله کسلر: افزایش تصادفات سرریزِ زباله فضایی. " +
                            "راهکارها: اجتناب از برخورد، مقررات و مدیریت ترافیک. " +
                            "پیش‌بینی آینده ساختار: افزایش چشمگیر تعداد، توسعه مقررات جهانی و نوآوری مقرراتی مستقل توسط اپراتورها برای پایداری بلندمدت فضا\u202b."
                )
                val textmortabet =
                    listOf("قمر های طبیعی", "قمر های منظم", "قمر های نامنظم", "قمر های دوگانه", "قمر های برخوردی", "قمر بین ستاره ای")
                val imagemortabet = listOf(
                    painterResource(R.drawable.moonnatural),
                    painterResource(R.drawable.moonregular),
                    painterResource(R.drawable.mooniregular),
                    painterResource(R.drawable.moon2gane),
                    painterResource(R.drawable.moonbarkhordi),
                    painterResource(R.drawable.moonstari)
                )
                val tarkib = textmortabet.zip(imagemortabet)
                Column(
                    modifier = Modifier
                        .padding(25.dp)
                        .fillMaxSize()
                ) {
                    Box(modifier = Modifier.fillMaxSize())
                    {
                        LazyColumn(
                            horizontalAlignment = Alignment.CenterHorizontally
                        ) {
                            items(textghamarmasnoi) { letter ->
                                Column(modifier = Modifier.padding(30.dp)) {
                                    Row {
                                        Image(painter = painterResource(id = R.drawable.moonartificioal)
                                            , contentDescription = null , contentScale = ContentScale.Crop
                                            , modifier = Modifier.size(100.dp))
                                        Column {
                                            Text("")
                                            Row(modifier = Modifier.fillMaxWidth()
                                                ,horizontalArrangement = Arrangement.End
                                                , verticalAlignment = Alignment.CenterVertically) {
                                                Text("قمر های مصنوعی" , fontSize = 20.sp  , color = Color.White , style = TextStyle(
                                                    shadow = Shadow(
                                                        color = Color(0xFFFFFFFF),
                                                        offset = Offset(0f ,0f)
                                                        , blurRadius = 20f
                                                    )
                                                ), maxLines = 1)
                                            }
                                        }
                                    }
                                }
                                Box(
                                    modifier = Modifier.fillMaxSize(),
                                    contentAlignment = Alignment.CenterStart,
                                ) {
                                    Column {
                                        Text(
                                            "$letter",
                                            fontSize = 20.sp,
                                            color = Color(0xFFFFFFFF),
                                            lineHeight = 32.sp,
                                            textAlign = TextAlign.Right
                                            , style = TextStyle(
                                                shadow = Shadow(
                                                    color = Color(0xFFFFFFFF),
                                                    offset = Offset(0f ,0f)
                                                    , blurRadius = 20f
                                                )
                                            )
                                        )
                                        Text("")
                                        Text("")
                                        Text("")
                                        Text(
                                            "موضوعات مرتبط",
                                            textAlign = TextAlign.Right,
                                            modifier = Modifier.fillMaxWidth(),
                                            fontSize = 30.sp,
                                            color = Color.White
                                            , style = TextStyle(
                                                shadow = Shadow(
                                                    color = Color(0xFFFFFFFF),
                                                    offset = Offset(0f ,0f)
                                                    , blurRadius = 20f
                                                )
                                            )
                                        )
                                        Text("")
                                        LazyRow(reverseLayout = true) {
                                            items(tarkib) { (matnha, aksha) ->
                                                Card(
                                                    modifier = Modifier
                                                        .width(250.dp)
                                                        .height(120.dp)
                                                        .padding(20.dp)
                                                        .clip(shape = RoundedCornerShape(100.dp)),
                                                    shape = RectangleShape,
                                                    colors = CardDefaults.cardColors(
                                                        containerColor = Color(
                                                            0xFF0707AD
                                                        )
                                                    )
                                                ) {
                                                    Box(
                                                        modifier = Modifier.fillMaxSize(),
                                                        contentAlignment = Alignment.CenterEnd
                                                    ) {
                                                        Image(
                                                            painter = painterResource(id = R.drawable.card),
                                                            contentScale = ContentScale.Crop,
                                                            contentDescription = null,
                                                            modifier = Modifier.fillMaxSize()
                                                        )
                                                        Button(
                                                            modifier = Modifier.fillMaxSize(
                                                            ).indication(indication = null ,
                                                                interactionSource = remember { MutableInteractionSource() }), onClick = {
                                                                if (matnha == "قمر های طبیعی") {
                                                                    currentScreen = "moonnatural"
                                                                    backap = false
                                                                }
                                                                if (matnha == "قمر های مصنوعی") {
                                                                    currentScreen = "moonartificional"
                                                                    backap = false
                                                                }
                                                                if (matnha == "قمر های منظم") {
                                                                    currentScreen = "moonregular"
                                                                    backap = false
                                                                }
                                                                if (matnha == "قمر های نامنظم") {
                                                                    currentScreen = "mooniregular"
                                                                    backap = false
                                                                }
                                                                if (matnha == "قمر های دوگانه") {
                                                                    currentScreen = "moon2gane"
                                                                    backap = false
                                                                }
                                                                if (matnha == "قمر های برخوردی") {
                                                                    currentScreen = "moonbarkhordi"
                                                                    backap = false
                                                                }
                                                                if (matnha == "قمر بین ستاره ای") {
                                                                    currentScreen = "moonstari"
                                                                    backap = false
                                                                }
                                                            }, colors = ButtonDefaults.buttonColors(
                                                                contentColor = Color.Transparent,
                                                                containerColor = Color.Transparent
                                                            )) {
                                                        }
                                                        Row() {
                                                            Spacer(modifier = Modifier.width(10.dp))
                                                            Column {
                                                                Spacer(modifier = Modifier.height(9.dp))
                                                                Text(
                                                                    "$matnha",
                                                                    color = Color.White,
                                                                    fontSize = 20.sp
                                                                    , style = TextStyle(
                                                                        shadow = Shadow(
                                                                            color = Color(0xFFFFFFFF),
                                                                            offset = Offset(0f ,0f)
                                                                            , blurRadius = 20f
                                                                        )
                                                                    )
                                                                )
                                                            }
                                                            Spacer(modifier = Modifier.width(15.dp))
                                                            Image(
                                                                painter = aksha,
                                                                contentDescription = null,
                                                                contentScale = ContentScale.Crop,
                                                                modifier = Modifier.size(50.dp)
                                                            )
                                                            Spacer(modifier = Modifier.width(15.dp))
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        Text("")
                                        Text("")
                                        Text("")
                                    }
                                }
                            }
                        }
                        var count by remember { mutableStateOf(0) }
                        IconButton(
                            onClick = { count++ },
                            modifier = Modifier
                                .size(70.dp)
                                .align(Alignment.BottomEnd)
                                .indication(indication = null ,
                                    interactionSource = remember { MutableInteractionSource() }),
                            colors = IconButtonDefaults.iconButtonColors(
                                containerColor = Color(0xFF030A33)
                            )
                        ) {
                            if (count % 2 == 0) {
                                Icon(
                                    imageVector = Icons.Default.Favorite,
                                    contentDescription = null,
                                    modifier = Modifier.size(50.dp),
                                    tint = Color.Transparent
                                )
                                Icon(
                                    imageVector = Icons.Default.FavoriteBorder,
                                    contentDescription = null,
                                    modifier = Modifier.size(50.dp),
                                    tint = Color.White
                                )
                            }
                            if (count % 2 == 1) {
                                Icon(
                                    imageVector = Icons.Default.Favorite,
                                    contentDescription = null,
                                    modifier = Modifier.size(50.dp),
                                    tint = Color.White
                                )
                                Icon(
                                    imageVector = Icons.Default.FavoriteBorder,
                                    contentDescription = null,
                                    modifier = Modifier.size(50.dp),
                                    tint = Color.White
                                )
                            }
                        }
                    }
                }
            }
        }
    }
}
@Composable
fun MoonRegular(){
    Image(
        painter = painterResource(id = R.drawable.app_back),
        contentScale = ContentScale.Crop,
        contentDescription = null
    )
    when(currentScreen) {
        "moonregular" -> {
            Column {
                Card(
                    modifier = Modifier
                        .fillMaxWidth()
                        .height(32.5.dp),
                    shape = RectangleShape,
                    colors = CardDefaults.cardColors(containerColor = Color(0xFF030A33))
                ) {
                }
                Column(){
                    Card(
                        modifier = Modifier
                            .fillMaxWidth()
                            .height(50.dp),
                        shape = RectangleShape,
                        colors = CardDefaults.cardColors(containerColor = Color(0xFF0707AD))
                    ) {
                        Row(modifier = Modifier.padding(10.dp)) {
                            IconButton(onClick = {currentScreen = "asli2"
                                backap = true
                            } , colors = IconButtonDefaults.iconButtonColors(contentColor = Color.White)
                                , modifier = Modifier.indication(indication = null ,
                                    interactionSource = remember { MutableInteractionSource() })){
                                Icon(imageVector = Icons.Outlined.ArrowBack, contentDescription = null , modifier = Modifier.size(40.dp))
                            }
                            IconButton(
                                onClick = {},
                                colors = IconButtonDefaults.iconButtonColors(contentColor = Color.White),
                                modifier = Modifier.indication(indication = null ,
                                    interactionSource = remember { MutableInteractionSource() })
                            ) {
                                Icon(imageVector = Icons.Default.Info, contentDescription = null)
                            }
                            IconButton(
                                onClick = {},
                                colors = IconButtonDefaults.iconButtonColors(contentColor = Color.White),
                                modifier = Modifier.indication(indication = null ,
                                    interactionSource = remember { MutableInteractionSource() })
                            ) {
                                Icon(imageVector = Icons.Default.Share, contentDescription = null)
                            }
                            Row(
                                modifier = Modifier.fillMaxWidth(),
                                horizontalArrangement = Arrangement.End,
                                verticalAlignment = Alignment.CenterVertically
                            ) {
                                Text("قمر های منظم", fontSize = 20.sp, color = Color.White  , maxLines = 1 , fontWeight = FontWeight.ExtraBold)
                                IconButton(onClick = {expanded = true},
                                    modifier = Modifier.size(50.dp)
                                        .indication(indication = null ,
                                            interactionSource = remember { MutableInteractionSource() }),
                                    colors = IconButtonDefaults.iconButtonColors(contentColor = Color.White)) {
                                    Icon(imageVector = Icons.Default.Menu, contentDescription = null)
                                }
                            }
                        }
                    }
                }


                var textghamarmonazam = listOf(
                    ": معرفی کلی\n" +
                            "\n" +
                            "قمرهای منظم دسته‌ای از قمرهای طبیعی هستند که در مدارهای نسبتاً نزدیک، دایره‌ای یا کم‌بیضی، و هم‌راستا با استوای سیاره مادر می‌گردند. این قمرها از قرص‌های اولیه پیرامون سیارات غول‌پیکر یا سیارات کوتوله در دوران شکل‌گیری تشکیل شده‌اند. تا آوریل ۲۰۲۵، حدود ۶۰ قمر منظم تأیید شده‌اند که متعلق به ۶ سیاره اصلی و چند جرم کوتوله‌اند\u202b." +
                            "\n" +
                            "\n" +
                            "\n" +
                            ": چارچوب‌های رده‌بندی و دسته‌بندی\n" +
                            "\n" +
                            "بر اساس جرم مرکزی: قمرهای سیارات اصلی (زمین، مریخ، مشتری، زحل، اورانوس، نپتون) و برخی کوتوله‌ها (پلوتو، اورکوس، هایومئا، اِریس). " +
                            "بر اساس مدار: تقریباً تمام قمرهای منظم دارای دوره مداری پروگراد، زاویه میل کوچک (کمتر از چند درجه) و تمایل به مدار دایره‌ای‌اند. " +
                            "بر اساس اندازه: بزرگ‌ترین آن‌ها گردند و خود گرانشی‌شده‌اند، برخی مانند گانیمد و تیتان از جرم مدار کوتوله بزرگ‌تر هستند\u202b." +
                            "\n" +
                            "\n" +
                            "\n" +
                            ": اصول و مبانی نظری کلیدی\n" +
                            "\n" +
                            "تشکیل در قرص داده‌ای: قمرها در دیسک گاز و غبار اطراف سیاره شکل گرفته‌اند، نه از طریق اسیرشدگی خارجی. " +
                            "پایداری مدار: دوران‌گیری گرانشی/کشندی، قفل کشندی، و شکل‌گیری رزونانس‌های مداری. " +
                            "ساختار داخلی و فرگشت حرارتی: یخ‌زایی و سامانه‌های درونی (مانند اقیانوس زیرسطحی در اروپا/گانیمد). " +
                            "زیست‌پذیری بالقوه: برخی قمرها (اروپا، انسلادوس، تیتان) دارای اجزای آب/جذب مواد آلی‌اند؛ اهداف اصلی در جست‌وجوی حیات فرازمین‌اند\u202b." +
                            "\n" +
                            "\n" +
                            "\n" +
                            ": کاربردها و پیش‌بینی‌ها\n" +
                            "\n" +
                            "کاوش علمی و بررسی زیست‌پذیری: ماموریت‌هایی مانند جویس ، دراگون فلای با هدف یافتن آب و ترکیبات زیستی گرفته شده‌اند. " +
                            "تحلیل دینامیک مداری: مطالعات رزونانس لاپلاس و تعاملات جزرومدی. " +
                            "مدل‌سازی شکل‌گیری سامانه و تحول مدار: گازگریزی، مهاجرت مداری و همایندی. " +
                            "پیش‌بینی‌ها: احتمال وجود قمرهای یخی قفل‌شده یا رزونانسی فراخورشیدی تا نیمه قرن جاری\u202b." +
                            "\n" +
                            "\n" +
                            "\n" +
                            ": نقش در علم و فناوری\n" +
                            "\n" +
                            "آزمایشگاه‌های طبیعی برای بررسی فرگشت درونی و دینامیک سیاره‌ای. " +
                            "الگوسازی رفتار سیارات و گرانش. " +
                            "حمایت از طراحی مأموریت‌های فضایی و نمونه‌برداری. " +
                            "دستمایه فلسفی و علمی در درک ساختار و اجزای ممکن زیستی فرای زمین\u202b." +
                            "\n" +
                            "\n" +
                            "\n" +
                            ": بخش نظری برجسته\n" +
                            "\n" +
                            "زمین – ماه: تنها قمر زمین، دارای فاصله متوسط ≈384,400 کیلومتر و دوره مداری ≈27.3 روز؛ قفل کشندی کامل. " +
                            "مریخ – فوبوس: قطر ≈22 کیلومتر، فاصله ≈9,400 کیلومتر، دوره ≈0.32 روز. " +
                            "مریخ – دیموس: قطر ≈12 کیلومتر، فاصله ≈23,460 کیلومتر، دوره ≈1.26 روز. " +
                            "گانیمد: قطر ≈5,268 کیلومتر، فاصله ≈1,070,400 کیلومتر، دوره ≈7.15 روز؛ میدان مغناطیسی و ساختار لایه‌ای. " +
                            "تیتان: قطر ≈5,150 کیلومتر، فاصله ≈1,221,900 کیلومتر، دوره ≈15.9 روز؛ جو ضخیم متان–نیتروژن. " +
                            "کالیستو: قطر ≈4,817 کیلومتر، فاصله ≈1,882,700 کیلومتر، دوره ≈16.7 روز؛ سطح یخی و بسیار دهانشخسته. " +
                            "آیو: قطر ≈3,636 کیلومتر، فاصله ≈421,700 کیلومتر، دوره ≈1.77 روز؛ آتشفشان فعال. " +
                            "اروپا: قطر ≈3,121 کیلومتر، فاصله ≈670,900 کیلومتر، دوره ≈3.55 روز؛ اقیانوس زیرپوستی محتمل. " +
                            "رئا: قطر ≈1,527 کیلومتر، فاصله ≈527,000 کیلومتر، دوره ≈4.5 روز؛ سطح یخی. " +
                            "تیتان: همان طور که ذکر شد. " +
                            "اوبرون و سایر قمرهای گردند بزرگ‌تر (<1,000 کیلومتر)." +
                            "تیرتانیا: قطر ≈1,578 کیلومتر، فاصله ≈436,300 کیلومتر، دوره ≈8.7 روز. " +
                            "اوبرون: قطر ≈1,523 کیلومتر، فاصله ≈582,600 کیلومتر، دوره ≈13.5 روز. " +
                            "نپتون – تریتون (نیمه‌نامنظم اما بزرگ): قطر ≈2,705 کیلومتر، فاصله ≈354,800 کیلومتر، دوره رتروگراد و ژئوفیزیکی فعال. " +
                            "موارد کوتوله مانند پلوتو–شارون: نسبت جرم بزرگ (قطر ≈1,212 کیلومتر، فاصله ≈19,600 کیلومتر)\u202b."
                )
                val textmortabet = listOf("قمر های طبیعی", "قمر های مصنوعی", "قمر های نامنظم", "قمر های دوگانه", "قمر های برخوردی", "قمر بین ستاره ای")
                val imagemortabet = listOf(
                    painterResource(R.drawable.moonnatural),
                    painterResource(R.drawable.moonartificioal),
                    painterResource(R.drawable.mooniregular),
                    painterResource(R.drawable.moon2gane),
                    painterResource(R.drawable.moonbarkhordi),
                    painterResource(R.drawable.moonstari)
                )
                val tarkib = textmortabet.zip(imagemortabet)
                Column(
                    modifier = Modifier
                        .padding(25.dp)
                        .fillMaxSize()
                ) {
                    Box(modifier = Modifier.fillMaxSize())
                    {
                        LazyColumn(
                            horizontalAlignment = Alignment.CenterHorizontally
                        ) {
                            items(textghamarmonazam) { letter ->
                                Column(modifier = Modifier.padding(30.dp)) {
                                    Row {
                                        Image(painter = painterResource(id = R.drawable.moonregular)
                                            , contentDescription = null , contentScale = ContentScale.Crop
                                            , modifier = Modifier.size(100.dp))
                                        Column {
                                            Text("")
                                            Row(modifier = Modifier.fillMaxWidth()
                                                ,horizontalArrangement = Arrangement.End
                                                , verticalAlignment = Alignment.CenterVertically) {
                                                Text("قمر های منظم" , fontSize = 20.sp  , color = Color.White , style = TextStyle(
                                                    shadow = Shadow(
                                                        color = Color(0xFFFFFFFF),
                                                        offset = Offset(0f ,0f)
                                                        , blurRadius = 20f
                                                    )
                                                ), maxLines = 1)
                                            }
                                        }
                                    }
                                }
                                Box(
                                    modifier = Modifier.fillMaxSize(),
                                    contentAlignment = Alignment.CenterStart,
                                ) {
                                    Column {
                                        Text(
                                            "$letter",
                                            fontSize = 20.sp,
                                            color = Color(0xFFFFFFFF),
                                            lineHeight = 32.sp,
                                            textAlign = TextAlign.Right
                                            , style = TextStyle(
                                                shadow = Shadow(
                                                    color = Color(0xFFFFFFFF),
                                                    offset = Offset(0f ,0f)
                                                    , blurRadius = 20f
                                                )
                                            )
                                        )
                                        Text("")
                                        Text("")
                                        Text("")
                                        Text(
                                            "موضوعات مرتبط",
                                            textAlign = TextAlign.Right,
                                            modifier = Modifier.fillMaxWidth(),
                                            fontSize = 30.sp,
                                            color = Color.White
                                            , style = TextStyle(
                                                shadow = Shadow(
                                                    color = Color(0xFFFFFFFF),
                                                    offset = Offset(0f ,0f)
                                                    , blurRadius = 20f
                                                )
                                            )
                                        )
                                        Text("")
                                        LazyRow(reverseLayout = true) {
                                            items(tarkib) { (matnha, aksha) ->
                                                Card(
                                                    modifier = Modifier
                                                        .width(250.dp)
                                                        .height(120.dp)
                                                        .padding(20.dp)
                                                        .clip(shape = RoundedCornerShape(100.dp)),
                                                    shape = RectangleShape,
                                                    colors = CardDefaults.cardColors(
                                                        containerColor = Color(
                                                            0xFF0707AD
                                                        )
                                                    )
                                                ) {
                                                    Box(
                                                        modifier = Modifier.fillMaxSize(),
                                                        contentAlignment = Alignment.CenterEnd
                                                    ) {
                                                        Image(
                                                            painter = painterResource(id = R.drawable.card),
                                                            contentScale = ContentScale.Crop,
                                                            contentDescription = null,
                                                            modifier = Modifier.fillMaxSize()
                                                        )
                                                        Button(
                                                            modifier = Modifier.fillMaxSize(
                                                            ).indication(indication = null ,
                                                                interactionSource = remember { MutableInteractionSource() }), onClick = {
                                                                if (matnha == "قمر های طبیعی") {
                                                                    currentScreen = "moonnatural"
                                                                    backap = false
                                                                }
                                                                if (matnha == "قمر های مصنوعی") {
                                                                    currentScreen = "moonartificional"
                                                                    backap = false
                                                                }
                                                                if (matnha == "قمر های منظم") {
                                                                    currentScreen = "moonregular"
                                                                    backap = false
                                                                }
                                                                if (matnha == "قمر های نامنظم") {
                                                                    currentScreen = "mooniregular"
                                                                    backap = false
                                                                }
                                                                if (matnha == "قمر های دوگانه") {
                                                                    currentScreen = "moon2gane"
                                                                    backap = false
                                                                }
                                                                if (matnha == "قمر های برخوردی") {
                                                                    currentScreen = "moonbarkhordi"
                                                                    backap = false
                                                                }
                                                                if (matnha == "قمر بین ستاره ای") {
                                                                    currentScreen = "moonstari"
                                                                    backap = false
                                                                }
                                                            }, colors = ButtonDefaults.buttonColors(
                                                                contentColor = Color.Transparent,
                                                                containerColor = Color.Transparent
                                                            )) {
                                                        }
                                                        Row() {
                                                            Spacer(modifier = Modifier.width(10.dp))
                                                            Column {
                                                                Spacer(modifier = Modifier.height(9.dp))
                                                                Text(
                                                                    "$matnha",
                                                                    color = Color.White,
                                                                    fontSize = 20.sp
                                                                    , style = TextStyle(
                                                                        shadow = Shadow(
                                                                            color = Color(0xFFFFFFFF),
                                                                            offset = Offset(0f ,0f)
                                                                            , blurRadius = 20f
                                                                        )
                                                                    )
                                                                )
                                                            }
                                                            Spacer(modifier = Modifier.width(15.dp))
                                                            Image(
                                                                painter = aksha,
                                                                contentDescription = null,
                                                                contentScale = ContentScale.Crop,
                                                                modifier = Modifier.size(50.dp)
                                                            )
                                                            Spacer(modifier = Modifier.width(15.dp))
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        Text("")
                                        Text("")
                                        Text("")
                                    }
                                }
                            }
                        }
                        var count by remember { mutableStateOf(0) }
                        IconButton(
                            onClick = { count++ },
                            modifier = Modifier
                                .size(70.dp)
                                .align(Alignment.BottomEnd)
                                .indication(indication = null ,
                                    interactionSource = remember { MutableInteractionSource() }),
                            colors = IconButtonDefaults.iconButtonColors(
                                containerColor = Color(0xFF030A33)
                            )
                        ) {
                            if (count % 2 == 0) {
                                Icon(
                                    imageVector = Icons.Default.Favorite,
                                    contentDescription = null,
                                    modifier = Modifier.size(50.dp),
                                    tint = Color.Transparent
                                )
                                Icon(
                                    imageVector = Icons.Default.FavoriteBorder,
                                    contentDescription = null,
                                    modifier = Modifier.size(50.dp),
                                    tint = Color.White
                                )
                            }
                            if (count % 2 == 1) {
                                Icon(
                                    imageVector = Icons.Default.Favorite,
                                    contentDescription = null,
                                    modifier = Modifier.size(50.dp),
                                    tint = Color.White
                                )
                                Icon(
                                    imageVector = Icons.Default.FavoriteBorder,
                                    contentDescription = null,
                                    modifier = Modifier.size(50.dp),
                                    tint = Color.White
                                )
                            }
                        }
                    }
                }
            }
        }
    }
}
@Composable
fun MoonIregular(){
    Image(
        painter = painterResource(id = R.drawable.app_back),
        contentScale = ContentScale.Crop,
        contentDescription = null
    )
    when(currentScreen) {
        "mooniregular" -> {
            Column {
                Card(
                    modifier = Modifier
                        .fillMaxWidth()
                        .height(32.5.dp),
                    shape = RectangleShape,
                    colors = CardDefaults.cardColors(containerColor = Color(0xFF030A33))
                ) {
                }
                Column(){
                    Card(
                        modifier = Modifier
                            .fillMaxWidth()
                            .height(50.dp),
                        shape = RectangleShape,
                        colors = CardDefaults.cardColors(containerColor = Color(0xFF0707AD))
                    ) {
                        Row(modifier = Modifier.padding(10.dp)) {
                            IconButton(onClick = {currentScreen = "asli2"
                                backap = true
                            } , colors = IconButtonDefaults.iconButtonColors(contentColor = Color.White)
                                , modifier = Modifier.indication(indication = null ,
                                    interactionSource = remember { MutableInteractionSource() })){
                                Icon(imageVector = Icons.Outlined.ArrowBack, contentDescription = null , modifier = Modifier.size(40.dp))
                            }
                            IconButton(
                                onClick = {},
                                colors = IconButtonDefaults.iconButtonColors(contentColor = Color.White),
                                modifier = Modifier.indication(indication = null ,
                                    interactionSource = remember { MutableInteractionSource() })
                            ) {
                                Icon(imageVector = Icons.Default.Info, contentDescription = null)
                            }
                            IconButton(
                                onClick = {},
                                colors = IconButtonDefaults.iconButtonColors(contentColor = Color.White),
                                modifier = Modifier.indication(indication = null ,
                                    interactionSource = remember { MutableInteractionSource() })
                            ) {
                                Icon(imageVector = Icons.Default.Share, contentDescription = null)
                            }
                            Row(
                                modifier = Modifier.fillMaxWidth(),
                                horizontalArrangement = Arrangement.End,
                                verticalAlignment = Alignment.CenterVertically
                            ) {
                                Text("قمر های نامنظم", fontSize = 20.sp, color = Color.White  , maxLines = 1 , fontWeight = FontWeight.ExtraBold)
                                IconButton(onClick = {expanded = true},
                                    modifier = Modifier.size(50.dp)
                                        .indication(indication = null ,
                                            interactionSource = remember { MutableInteractionSource() }),
                                    colors = IconButtonDefaults.iconButtonColors(contentColor = Color.White)) {
                                    Icon(imageVector = Icons.Default.Menu, contentDescription = null)
                                }
                            }
                        }
                    }
                }


                var textghamarnamonazam = listOf(
                    ": معرفی کلی\n" +
                            "\n" +
                            "قمرهای نامنظ اجرام طبیعی کوچکی هستند که مدارهای دور، با بیضویّت بالا، انحراف زیاد نسبت به صفحه استوایی و گاهی جهت ریتروگراد دارند. این قمرها نتیجه جذب گرانشی اجرام کوچک (مانند سیارک‌ها یا اقمار کوچک کویپر) در دوران اولیه منظومه شمسی‌اند. تا آوریل ۲۰۲۵، تعداد کل قمرهای نامنظم تأییدشده در سامانه خورشیدی به ۳۵۸ رسیده است که شامل تمامی قمرهای دور در سیارات مشتری، زحل، اورانوس و نپتون می‌شود\u202b." +
                            "\n" +
                            "\n" +
                            "\n" +
                            ": چارچوب‌های رده‌بندی و دسته‌بندی\n" +
                            "\n" +
                            "• بر اساس جهت مداری: پروگراد یا رتروگراد؛ بیشتر رتروگرادند.\n" +
                            "گروه‌های مداری مشخص: برای زحل—نورس، اینویت، گالی؛ برای مشتری—کارمه، آنانکه، پاسیفائه؛ برای اورانوس و نپتون نیز گروه‌هایی مشابه. " +
                            "اندازه: معمولاً چند کیلومتر قطر؛ بزرگ‌ترین آن‌ها مانند فویبه، هیمالیا، سیکوراکس و تریتون (اگرچه تریتون بیضوی نیست) هستند\u202b." +
                            "\n" +
                            "\n" +
                            "\n" +
                            ": اصول و مبانی نظری کلیدی\n" +
                            "\n" +
                            "منشأ اسیرشدگی: این قمرها احتمالاً از سیارک‌ها یا اجسام کوپر جذب سیارات بزرگ شده‌اند. " +
                            "پایداری مداری: مدارهای بیضوی و مایل در فاصله‌های بزرگ—گاهی تا 50 میلیون‌کیلومتر—قرار دارند. " +
                            "گروه‌بندی ناشی از برخورد یا تکه‌تکه‌شدن منشأ مشترک؛ مخصوصاً در زحل با گروه موندیلفری که بر اثر برخورد اخیر شکل گرفته است\u202b." +
                            "\n" +
                            "\n" +
                            "\n" +
                            ": کاربردها و پیش‌بینی‌ها\n" +
                            "\n" +
                            "بررسی تاریخچه اولیه منظومه شمسی و مهاجرت سیارات. " +
                            "آزمون نظریه اسیرشدگی گرانشی و دینامیک پیچیده این فرآیندها. " +
                            "مدل کردن ساختن گروه‌های شکسته‌شده و تثبیت رزونانس‌های گروهی. " +
                            "انتظار افزایش کشف—مثلاً در مارس ۲۰۲۵، ۱۲۸ قمر جدید اطراف زحل کشف شدند و مجموع آنجا به ۳۳۸ رسید، همه نامنظم کوچک‌اند\u202b." +
                            "\n" +
                            "\n" +
                            "\n" +
                            ": نقش در علم و فناوری\n" +
                            "\n" +
                            "نمایانگر فرآیندهای جذب و انتقال جرم در منظومه شمسی اولیه. " +
                            "آزمایشگاهی برای بررسی دینامیک بی‌ثباتی، رزونانس و انتقال انرژی در مدارات دور. " +
                            "راهنما برای ماموریت‌های آینده با هدف بررسی این ساختارها (گروه‌های متفاوت زحل یا مشتری)\u202b." +
                            "\n" +
                            "\n" +
                            "\n" +
                            ": بخش نظری برجسته\n" +
                            "\n" +
                            "پوبه (زحل): اولین قمر نامنظم کشف‌شده (1899)، قطر ≈213 کیلومتر، مدار رتروگراد با فاصله ≈12.96 میلیون کیلومتر، انحراف ≈173°. " +
                            "گروه اینویت: شامل سیارناق (فاصله ≈11.3 کیلومتر؛ پروگراد؛ شیب ≈44°–51°) و کیویق (قطر ≈17 کیلومتر؛ دوره ≈449 روز). " +
                            "سایر ماه‌های نپتون: اس 2021 (قطر ≈14 کیلومتر؛ فاصله بیش از 50 ام کیلومتر؛ دوره ≈27 سال؛ گروه نسو؛ کشف سپتامبر ۲۰۲۱) و اس 2002 (قطر ≈23 کیلومتر؛ فاصله ≈23 کیلومتر؛ دوره ≈9 سال؛ پروگراد). " +
                            "هیمالیا (مشتری): بزرگ‌ترین قمر نامنظم مشتری با قطر ≈170 کیلومتر؛ به‌صورت غیر مستقیم دیده شده توسط سفرهای نیو هوریزونز و کاسینی. " +
                            "(نپتون): بزرگ‌ترین قمر نامنظم با مدار رتروگراد و احتمالا قمر گرفته‌شده قابل استوایی؛ دور این زمره طبقه‌بندی می‌شود. " +
                            "گروه ماندیلفری (زحل): زیرمجموعه‌ای از گروه نورس که بر اثر برخورد چند میلیون‌سال پیش شکل گرفته و بیش از ۶۴ عضو کوچک دارد\u202b."
                )
                val textmortabet = listOf("قمر های طبیعی", "قمر های مصنوعی", "قمر های منظم", "قمر های دوگانه", "قمر های برخوردی", "قمر بین ستاره ای")
                val imagemortabet = listOf(
                    painterResource(R.drawable.moonnatural),
                    painterResource(R.drawable.moonartificioal),
                    painterResource(R.drawable.moonregular),
                    painterResource(R.drawable.moon2gane),
                    painterResource(R.drawable.moonbarkhordi),
                    painterResource(R.drawable.moonstari)
                )
                val tarkib = textmortabet.zip(imagemortabet)
                Column(
                    modifier = Modifier
                        .padding(25.dp)
                        .fillMaxSize()
                ) {
                    Box(modifier = Modifier.fillMaxSize())
                    {
                        LazyColumn(
                            horizontalAlignment = Alignment.CenterHorizontally
                        ) {
                            items(textghamarnamonazam) { letter ->
                                Column(modifier = Modifier.padding(30.dp)) {
                                    Row {
                                        Image(painter = painterResource(id = R.drawable.mooniregular)
                                            , contentDescription = null , contentScale = ContentScale.Crop
                                            , modifier = Modifier.size(100.dp))
                                        Column {
                                            Text("")
                                            Row(modifier = Modifier.fillMaxWidth()
                                                ,horizontalArrangement = Arrangement.End
                                                , verticalAlignment = Alignment.CenterVertically) {
                                                Text("قمر های نامنظم" , fontSize = 20.sp  , color = Color.White , style = TextStyle(
                                                    shadow = Shadow(
                                                        color = Color(0xFFFFFFFF),
                                                        offset = Offset(0f ,0f)
                                                        , blurRadius = 20f
                                                    )
                                                ), maxLines = 1)
                                            }
                                        }
                                    }
                                }
                                Box(
                                    modifier = Modifier.fillMaxSize(),
                                    contentAlignment = Alignment.CenterStart,
                                ) {
                                    Column {
                                        Text(
                                            "$letter",
                                            fontSize = 20.sp,
                                            color = Color(0xFFFFFFFF),
                                            lineHeight = 32.sp,
                                            textAlign = TextAlign.Right
                                            , style = TextStyle(
                                                shadow = Shadow(
                                                    color = Color(0xFFFFFFFF),
                                                    offset = Offset(0f ,0f)
                                                    , blurRadius = 20f
                                                )
                                            )
                                        )
                                        Text("")
                                        Text("")
                                        Text("")
                                        Text(
                                            "موضوعات مرتبط",
                                            textAlign = TextAlign.Right,
                                            modifier = Modifier.fillMaxWidth(),
                                            fontSize = 30.sp,
                                            color = Color.White
                                            , style = TextStyle(
                                                shadow = Shadow(
                                                    color = Color(0xFFFFFFFF),
                                                    offset = Offset(0f ,0f)
                                                    , blurRadius = 20f
                                                )
                                            )
                                        )
                                        Text("")
                                        LazyRow(reverseLayout = true) {
                                            items(tarkib) { (matnha, aksha) ->
                                                Card(
                                                    modifier = Modifier
                                                        .width(250.dp)
                                                        .height(120.dp)
                                                        .padding(20.dp)
                                                        .clip(shape = RoundedCornerShape(100.dp)),
                                                    shape = RectangleShape,
                                                    colors = CardDefaults.cardColors(
                                                        containerColor = Color(
                                                            0xFF0707AD
                                                        )
                                                    )
                                                ) {
                                                    Box(
                                                        modifier = Modifier.fillMaxSize(),
                                                        contentAlignment = Alignment.CenterEnd
                                                    ) {
                                                        Image(
                                                            painter = painterResource(id = R.drawable.card),
                                                            contentScale = ContentScale.Crop,
                                                            contentDescription = null,
                                                            modifier = Modifier.fillMaxSize()
                                                        )
                                                        Button(
                                                            modifier = Modifier.fillMaxSize(
                                                            ).indication(indication = null ,
                                                                interactionSource = remember { MutableInteractionSource() }), onClick = {
                                                                if (matnha == "قمر های طبیعی") {
                                                                    currentScreen = "moonnatural"
                                                                    backap = false
                                                                }
                                                                if (matnha == "قمر های مصنوعی") {
                                                                    currentScreen = "moonartificional"
                                                                    backap = false
                                                                }
                                                                if (matnha == "قمر های منظم") {
                                                                    currentScreen = "moonregular"
                                                                    backap = false
                                                                }
                                                                if (matnha == "قمر های نامنظم") {
                                                                    currentScreen = "mooniregular"
                                                                    backap = false
                                                                }
                                                                if (matnha == "قمر های دوگانه") {
                                                                    currentScreen = "moon2gane"
                                                                    backap = false
                                                                }
                                                                if (matnha == "قمر های برخوردی") {
                                                                    currentScreen = "moonbarkhordi"
                                                                    backap = false
                                                                }
                                                                if (matnha == "قمر بین ستاره ای") {
                                                                    currentScreen = "moonstari"
                                                                    backap = false
                                                                }
                                                            }, colors = ButtonDefaults.buttonColors(
                                                                contentColor = Color.Transparent,
                                                                containerColor = Color.Transparent
                                                            )) {
                                                        }
                                                        Row() {
                                                            Spacer(modifier = Modifier.width(10.dp))
                                                            Column {
                                                                Spacer(modifier = Modifier.height(9.dp))
                                                                Text(
                                                                    "$matnha",
                                                                    color = Color.White,
                                                                    fontSize = 20.sp
                                                                    , style = TextStyle(
                                                                        shadow = Shadow(
                                                                            color = Color(0xFFFFFFFF),
                                                                            offset = Offset(0f ,0f)
                                                                            , blurRadius = 20f
                                                                        )
                                                                    )
                                                                )
                                                            }
                                                            Spacer(modifier = Modifier.width(15.dp))
                                                            Image(
                                                                painter = aksha,
                                                                contentDescription = null,
                                                                contentScale = ContentScale.Crop,
                                                                modifier = Modifier.size(50.dp)
                                                            )
                                                            Spacer(modifier = Modifier.width(15.dp))
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        Text("")
                                        Text("")
                                        Text("")
                                    }
                                }
                            }
                        }
                        var count by remember { mutableStateOf(0) }
                        IconButton(
                            onClick = { count++ },
                            modifier = Modifier
                                .size(70.dp)
                                .align(Alignment.BottomEnd)
                                .indication(indication = null ,
                                    interactionSource = remember { MutableInteractionSource() }),
                            colors = IconButtonDefaults.iconButtonColors(
                                containerColor = Color(0xFF030A33)
                            )
                        ) {
                            if (count % 2 == 0) {
                                Icon(
                                    imageVector = Icons.Default.Favorite,
                                    contentDescription = null,
                                    modifier = Modifier.size(50.dp),
                                    tint = Color.Transparent
                                )
                                Icon(
                                    imageVector = Icons.Default.FavoriteBorder,
                                    contentDescription = null,
                                    modifier = Modifier.size(50.dp),
                                    tint = Color.White
                                )
                            }
                            if (count % 2 == 1) {
                                Icon(
                                    imageVector = Icons.Default.Favorite,
                                    contentDescription = null,
                                    modifier = Modifier.size(50.dp),
                                    tint = Color.White
                                )
                                Icon(
                                    imageVector = Icons.Default.FavoriteBorder,
                                    contentDescription = null,
                                    modifier = Modifier.size(50.dp),
                                    tint = Color.White
                                )
                            }
                        }
                    }
                }
            }
        }
    }
}
@Composable
fun Moon2Gane(){
    Image(
        painter = painterResource(id = R.drawable.app_back),
        contentScale = ContentScale.Crop,
        contentDescription = null
    )
    when(currentScreen) {
        "moon2gane" -> {
            Column {
                Card(
                    modifier = Modifier
                        .fillMaxWidth()
                        .height(32.5.dp),
                    shape = RectangleShape,
                    colors = CardDefaults.cardColors(containerColor = Color(0xFF030A33))
                ) {
                }
                Column(){
                    Card(
                        modifier = Modifier
                            .fillMaxWidth()
                            .height(50.dp),
                        shape = RectangleShape,
                        colors = CardDefaults.cardColors(containerColor = Color(0xFF0707AD))
                    ) {
                        Row(modifier = Modifier.padding(10.dp)) {
                            IconButton(onClick = {currentScreen = "asli2"
                                backap = true
                            } , colors = IconButtonDefaults.iconButtonColors(contentColor = Color.White)
                                , modifier = Modifier.indication(indication = null ,
                                    interactionSource = remember { MutableInteractionSource() })){
                                Icon(imageVector = Icons.Outlined.ArrowBack, contentDescription = null , modifier = Modifier.size(40.dp))
                            }
                            IconButton(
                                onClick = {},
                                colors = IconButtonDefaults.iconButtonColors(contentColor = Color.White),
                                modifier = Modifier.indication(indication = null ,
                                    interactionSource = remember { MutableInteractionSource() })
                            ) {
                                Icon(imageVector = Icons.Default.Info, contentDescription = null)
                            }
                            IconButton(
                                onClick = {},
                                colors = IconButtonDefaults.iconButtonColors(contentColor = Color.White),
                                modifier = Modifier.indication(indication = null ,
                                    interactionSource = remember { MutableInteractionSource() })
                            ) {
                                Icon(imageVector = Icons.Default.Share, contentDescription = null)
                            }
                            Row(
                                modifier = Modifier.fillMaxWidth(),
                                horizontalArrangement = Arrangement.End,
                                verticalAlignment = Alignment.CenterVertically
                            ) {
                                Text("قمر های دوگانه", fontSize = 20.sp, color = Color.White  , maxLines = 1 , fontWeight = FontWeight.ExtraBold)
                                IconButton(onClick = {expanded = true},
                                    modifier = Modifier.size(50.dp)
                                        .indication(indication = null ,
                                            interactionSource = remember { MutableInteractionSource() }),
                                    colors = IconButtonDefaults.iconButtonColors(contentColor = Color.White)) {
                                    Icon(imageVector = Icons.Default.Menu, contentDescription = null)
                                }
                            }
                        }
                    }
                }


                var textghamardogane = listOf(
                    ": معرفی کلی\n" +
                            "\n" +
                            "قمرهای دوگانه (یا سیستم‌های دوتایی قمری) شامل دو جسم طبیعی هستند که جرم‌شان نسبتاً نزدیک است و به‌جای چرخش «یک قمر به دور سیاره»، هر دو حول مرکز جرم مشترک‌شان (باری‌سنتر) می‌چرخند. معروف‌ترین نمونه در منظومه شمسی، سیستم پلوتو–شارون است. تا می ۲۰۲۵، این سیستم مهم‌ترین نمونه تأییدشده این رده‌ به‌شمار می‌رود، اگرچه بحث‌هایی درباره تعریف رسمی سیاره دوتایی نیز وجود دارد\u202b." +
                            "\n" +
                            "\n" +
                            "\n" +
                            ": چارچوب‌های رده‌بندی و دسته‌بندی\n" +
                            "\n" +
                            "تعریف جرم: نسبت جرم بین دو جسم 0.1 (یا 0.01 بسته به تعریف). " +
                            "باری‌سنتر: اگر مرکز جرم بین دو جسم خارج از سطح جسم بزرگ‌تر باشد، سیستم دوگانه محسوب می‌شود. " +
                            "منشأ تشکیل: معمولاً نتیجه برخورد عظیم یا اسیرشدگی پیچیده که منجر به جرم‌های تقریبا هم‌وزن می‌شود\u202b." +
                            "\n" +
                            "\n" +
                            "\n" +
                            ": اصول و مبانی نظری کلیدی\n" +
                            "\n" +
                            "پایداری مداری: مدارهای دوتایی با قفل کشندی متقابل، چرخش‌های هم‌زمان و نبود قمر تابع. " +
                            "انتقال زاویه‌حرکت: انرژی و تکانه انتقالی در برخورد منجر به چرخش قفل‌شده می‌شود. " +
                            "باری‌سنتر: تعیین موقعیت مرکز جرم سیستم و اثرات آن بر تعریف ماهیت دوتایی. " +
                            "منشأ جرمی مشابه: مدل فرضی برخورد غول‌آسا یا کپتور مخصوصاً برای پلوتو–شارون استفاده می‌شود\u202b." +
                            "\n" +
                            "\n" +
                            "\n" +
                            ": کاربردها و پیش‌بینی‌ها\n" +
                            "\n" +
                            "آزمایش فرآیند‌های برخورد عظیم و تشکیل قمرها. " +
                            "بررسی انتقال حرارتی و شکل‌گیری اقیانوس‌های داخلی (مانند پلوتو و شارون). " +
                            "تحلیل پایداری مدار و رزونانس‌های دوگانه. " +
                            "انتظار کشف سیستم‌های دوتایی مشابه در کمربند کویپر با پیشرفت رصد و تلسکوپ‌ها\u202b." +
                            "\n" +
                            "\n" +
                            "\n" +
                            ": نقش در علم و فناوری\n" +
                            "\n" +
                            "تسهیل شبیه‌سازی‌های جزرومدی و پایداری مداری. " +
                            "بازنویسی تعریف «سیاره» و «قمر» بر پایه جرم و باری‌سنتر. " +
                            "هدایت مأموریت‌های آینده به اجرام دوتایی در کمربند کویپر. " +
                            "پیش‌بینی وجود سیستم‌های مشابه در منظومه‌های فراخورشیدی\u202b." +
                            "\n" +
                            "\n" +
                            "\n" +
                            ": بخش نظری برجسته\n" +
                            "\n" +
                            "پلوتو–شارون: " +
                            "قطر شارون ≈1,212 کیلومتر؛ نسبت جرم ≈0.122. " +
                            "فاصله متوسط ≈19,600 کیلومتر؛ دوره مداری مشترک ≈6.387 روز. " +
                            "باری‌سنتر خارج از سطح پلوتو (≈1,188 کیلومتر بالای سطح)؛ چرخش هم‌قفل. " +
                            "منشأ برخوردي طی 4.5 میلیارد سال پیش. " +
                            "زمین–ماه: " +
                            "نسبت جرم ≈0.0123؛ باری‌سنتر هنوز داخل زمین اما با نرخ مهاجرت ماه (~3.8 سال) احتمال این که در چند میلیارد سال آینده خارج شود وجود دارد؛ تعریف «سیاره دوتایی» در بین برخی دانشمندان مطرح است. " +
                            "دیگر موارد مکمل: " +
                            "نسبت جرم ~0.025–0.1 مناسب دبیرچه آینده (تورن 0 سرچ 7, تورن 0 سرچ 4). " +
                            "سیستم مشابه با نسبت قابل توجه. " +
                            "برخی اجرام دوگانه کوچک در کمربند سیارک‌ها و آسترودایل و بیناریس شناخته‌شده‌اند\u202b."
                )
                val textmortabet = listOf("قمر های طبیعی", "قمر های مصنوعی", "قمر های منظم", "قمر های نامنظم", "قمر های برخوردی", "قمر بین ستاره ای")
                val imagemortabet = listOf(
                    painterResource(R.drawable.moonnatural),
                    painterResource(R.drawable.moonartificioal),
                    painterResource(R.drawable.moonregular),
                    painterResource(R.drawable.mooniregular),
                    painterResource(R.drawable.moonbarkhordi),
                    painterResource(R.drawable.moonstari)
                )
                val tarkib = textmortabet.zip(imagemortabet)
                Column(
                    modifier = Modifier
                        .padding(25.dp)
                        .fillMaxSize()
                ) {
                    Box(modifier = Modifier.fillMaxSize())
                    {
                        LazyColumn(
                            horizontalAlignment = Alignment.CenterHorizontally
                        ) {
                            items(textghamardogane) { letter ->
                                Column(modifier = Modifier.padding(30.dp)) {
                                    Row {
                                        Image(painter = painterResource(id = R.drawable.moon2gane)
                                            , contentDescription = null , contentScale = ContentScale.Crop
                                            , modifier = Modifier.size(100.dp))
                                        Column {
                                            Text("")
                                            Row(modifier = Modifier.fillMaxWidth()
                                                ,horizontalArrangement = Arrangement.End
                                                , verticalAlignment = Alignment.CenterVertically) {
                                                Text("قمر های دوگانه" , fontSize = 20.sp  , color = Color.White , style = TextStyle(
                                                    shadow = Shadow(
                                                        color = Color(0xFFFFFFFF),
                                                        offset = Offset(0f ,0f)
                                                        , blurRadius = 20f
                                                    )
                                                ), maxLines = 1)
                                            }
                                        }
                                    }
                                }
                                Box(
                                    modifier = Modifier.fillMaxSize(),
                                    contentAlignment = Alignment.CenterStart,
                                ) {
                                    Column {
                                        Text(
                                            "$letter",
                                            fontSize = 20.sp,
                                            color = Color(0xFFFFFFFF),
                                            lineHeight = 32.sp,
                                            textAlign = TextAlign.Right
                                            , style = TextStyle(
                                                shadow = Shadow(
                                                    color = Color(0xFFFFFFFF),
                                                    offset = Offset(0f ,0f)
                                                    , blurRadius = 20f
                                                )
                                            )
                                        )
                                        Text("")
                                        Text("")
                                        Text("")
                                        Text(
                                            "موضوعات مرتبط",
                                            textAlign = TextAlign.Right,
                                            modifier = Modifier.fillMaxWidth(),
                                            fontSize = 30.sp,
                                            color = Color.White
                                            , style = TextStyle(
                                                shadow = Shadow(
                                                    color = Color(0xFFFFFFFF),
                                                    offset = Offset(0f ,0f)
                                                    , blurRadius = 20f
                                                )
                                            )
                                        )
                                        Text("")
                                        LazyRow(reverseLayout = true) {
                                            items(tarkib) { (matnha, aksha) ->
                                                Card(
                                                    modifier = Modifier
                                                        .width(250.dp)
                                                        .height(120.dp)
                                                        .padding(20.dp)
                                                        .clip(shape = RoundedCornerShape(100.dp)),
                                                    shape = RectangleShape,
                                                    colors = CardDefaults.cardColors(
                                                        containerColor = Color(
                                                            0xFF0707AD
                                                        )
                                                    )
                                                ) {
                                                    Box(
                                                        modifier = Modifier.fillMaxSize(),
                                                        contentAlignment = Alignment.CenterEnd
                                                    ) {
                                                        Image(
                                                            painter = painterResource(id = R.drawable.card),
                                                            contentScale = ContentScale.Crop,
                                                            contentDescription = null,
                                                            modifier = Modifier.fillMaxSize()
                                                        )
                                                        Button(
                                                            modifier = Modifier.fillMaxSize(
                                                            ).indication(indication = null ,
                                                                interactionSource = remember { MutableInteractionSource() }), onClick = {
                                                                if (matnha == "قمر های طبیعی") {
                                                                    currentScreen = "moonnatural"
                                                                    backap = false
                                                                }
                                                                if (matnha == "قمر های مصنوعی") {
                                                                    currentScreen = "moonartificional"
                                                                    backap = false
                                                                }
                                                                if (matnha == "قمر های منظم") {
                                                                    currentScreen = "moonregular"
                                                                    backap = false
                                                                }
                                                                if (matnha == "قمر های نامنظم") {
                                                                    currentScreen = "mooniregular"
                                                                    backap = false
                                                                }
                                                                if (matnha == "قمر های دوگانه") {
                                                                    currentScreen = "moon2gane"
                                                                    backap = false
                                                                }
                                                                if (matnha == "قمر های برخوردی") {
                                                                    currentScreen = "moonbarkhordi"
                                                                    backap = false
                                                                }
                                                                if (matnha == "قمر بین ستاره ای") {
                                                                    currentScreen = "moonstari"
                                                                    backap = false
                                                                }
                                                            }, colors = ButtonDefaults.buttonColors(
                                                                contentColor = Color.Transparent,
                                                                containerColor = Color.Transparent
                                                            )) {
                                                        }
                                                        Row() {
                                                            Spacer(modifier = Modifier.width(10.dp))
                                                            Column {
                                                                Spacer(modifier = Modifier.height(9.dp))
                                                                Text(
                                                                    "$matnha",
                                                                    color = Color.White,
                                                                    fontSize = 20.sp
                                                                    , style = TextStyle(
                                                                        shadow = Shadow(
                                                                            color = Color(0xFFFFFFFF),
                                                                            offset = Offset(0f ,0f)
                                                                            , blurRadius = 20f
                                                                        )
                                                                    )
                                                                )
                                                            }
                                                            Spacer(modifier = Modifier.width(15.dp))
                                                            Image(
                                                                painter = aksha,
                                                                contentDescription = null,
                                                                contentScale = ContentScale.Crop,
                                                                modifier = Modifier.size(50.dp)
                                                            )
                                                            Spacer(modifier = Modifier.width(15.dp))
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        Text("")
                                        Text("")
                                        Text("")
                                    }
                                }
                            }
                        }
                        var count by remember { mutableStateOf(0) }
                        IconButton(
                            onClick = { count++ },
                            modifier = Modifier
                                .size(70.dp)
                                .align(Alignment.BottomEnd)
                                .indication(indication = null ,
                                    interactionSource = remember { MutableInteractionSource() }),
                            colors = IconButtonDefaults.iconButtonColors(
                                containerColor = Color(0xFF030A33)
                            )
                        ) {
                            if (count % 2 == 0) {
                                Icon(
                                    imageVector = Icons.Default.Favorite,
                                    contentDescription = null,
                                    modifier = Modifier.size(50.dp),
                                    tint = Color.Transparent
                                )
                                Icon(
                                    imageVector = Icons.Default.FavoriteBorder,
                                    contentDescription = null,
                                    modifier = Modifier.size(50.dp),
                                    tint = Color.White
                                )
                            }
                            if (count % 2 == 1) {
                                Icon(
                                    imageVector = Icons.Default.Favorite,
                                    contentDescription = null,
                                    modifier = Modifier.size(50.dp),
                                    tint = Color.White
                                )
                                Icon(
                                    imageVector = Icons.Default.FavoriteBorder,
                                    contentDescription = null,
                                    modifier = Modifier.size(50.dp),
                                    tint = Color.White
                                )
                            }
                        }
                    }
                }
            }
        }
    }
}
@Composable
fun MoonBarkhordi(){
    Image(
        painter = painterResource(id = R.drawable.app_back),
        contentScale = ContentScale.Crop,
        contentDescription = null
    )
    when(currentScreen) {
        "moonbarkhordi" -> {
            Column {
                Card(
                    modifier = Modifier
                        .fillMaxWidth()
                        .height(32.5.dp),
                    shape = RectangleShape,
                    colors = CardDefaults.cardColors(containerColor = Color(0xFF030A33))
                ) {
                }
                Column(){
                    Card(
                        modifier = Modifier
                            .fillMaxWidth()
                            .height(50.dp),
                        shape = RectangleShape,
                        colors = CardDefaults.cardColors(containerColor = Color(0xFF0707AD))
                    ) {
                        Row(modifier = Modifier.padding(10.dp)) {
                            IconButton(onClick = {currentScreen = "asli2"
                                backap = true
                            } , colors = IconButtonDefaults.iconButtonColors(contentColor = Color.White)
                                , modifier = Modifier.indication(indication = null ,
                                    interactionSource = remember { MutableInteractionSource() })){
                                Icon(imageVector = Icons.Outlined.ArrowBack, contentDescription = null , modifier = Modifier.size(40.dp))
                            }
                            IconButton(
                                onClick = {},
                                colors = IconButtonDefaults.iconButtonColors(contentColor = Color.White),
                                modifier = Modifier.indication(indication = null ,
                                    interactionSource = remember { MutableInteractionSource() })
                            ) {
                                Icon(imageVector = Icons.Default.Info, contentDescription = null)
                            }
                            IconButton(
                                onClick = {},
                                colors = IconButtonDefaults.iconButtonColors(contentColor = Color.White),
                                modifier = Modifier.indication(indication = null ,
                                    interactionSource = remember { MutableInteractionSource() })
                            ) {
                                Icon(imageVector = Icons.Default.Share, contentDescription = null)
                            }
                            Row(
                                modifier = Modifier.fillMaxWidth(),
                                horizontalArrangement = Arrangement.End,
                                verticalAlignment = Alignment.CenterVertically
                            ) {
                                Text("قمر های برخوردی", fontSize = 20.sp, color = Color.White  , maxLines = 1 , fontWeight = FontWeight.ExtraBold)
                                IconButton(onClick = {expanded = true},
                                    modifier = Modifier.size(50.dp)
                                        .indication(indication = null ,
                                            interactionSource = remember { MutableInteractionSource() }),
                                    colors = IconButtonDefaults.iconButtonColors(contentColor = Color.White)) {
                                    Icon(imageVector = Icons.Default.Menu, contentDescription = null)
                                }
                            }
                        }
                    }
                }


                var textghamarkhordadi = listOf(
                    ": معرفی کلی\n" +
                            "\n" +
                            "قمرهای برخوردی اجرامی هستند که از برخوردهای عظیم میان سیاره‌ها یا سیارات کوتوله با پروتو اجرام‌های هم‌قطر شکل گرفته‌اند. مشهورترین نمونه‌ها سیستم زمین–ماه و پلوتو–شارون هستند. نظریه‌های جدید تا ژانویه ۲۰۲۵ حاکی از تأیید مدل برخورد سهمی بزرگ (گیانت ایمپکت) یا نوع ملایم‌تر در تشکیل آن‌هاست\u202b." +
                            "\n" +
                            "\n" +
                            "\n" +
                            ": چارچوب‌های رده‌بندی و دسته‌بندی\n" +
                            "\n" +
                            "بر اساس نوع برخورد: برخوردهای پرانرژی (مثلاً زمین–تئا برای ماه) یا برخوردهای تماس و جذب نرم مانند پلوتو–شارون. " +
                            "منشأ جنس موادی که قمر از آن شکل گرفته: تخلیهٔ مواد سیاره‌ای یا جسم شیء برخوردکننده. " +
                            "نسبت جرم سیستم: قمرهای بزرگ مثل شارون معمولاً 10% جرم مادر را دارند. " +
                            "روش‌شناسی مدل‌سازی: شبیه‌سازی اس پی ایکس برای بررسی زوایا، انرژی برخورد و رفتار مواد در دمای سرد یا گرم\u202b." +
                            "\n" +
                            "\n" +
                            "\n" +
                            ": اصول و مبانی نظری کلیدی\n" +
                            "\n" +
                            "نظریه برخورد سهمی بزرگ: برخورد جسمی به اندازه‌ای مشابه مریخ (تیا) با زمین باعث تشکیل دیسک مواد در اطراف زمین و تجمع آن به شکل ماه می‌شود؛ شواهد همگونی ایزوتوپی ناشی از منشأ مشترک مواد را تأیید می‌کنند. " +
                            "مدل برخورد نرم: در سیستم پلوتو–شارون دو جسم پس از برخورد کوتاه به‌صورت موقت به هم می‌چسبند، مانند یک آدم‌برفی فضایی، سپس جدا شده ولی در مدار باری‌سنتر مشترک می‌گردند؛ این مدل برای ساختار یخ‌دار و اقیانوس احتمالی شارون اهمیت دارد. " +
                            "نظریه برخوردهای چندگانه: برخی پیشنهاد می‌کنند ماه زمین ممکن است نتیجه زنجیره‌ای از برخوردهای کوچک‌تر باشد که منجر به تشکیل چند مونلت و نهایی‌ترین تجمیع آن‌ها در یک ماه بزرگ شده‌است. " +
                            "کاربرد در قمرهای مریخی: مثلاً فوبوس و دیموس احتمالا از دیسک برخوردی اولیه درست پس از برخورد عظیم ساخته شده‌اند؛ برخی مدل‌ها پیشنهاد می‌دهند که ماه‌های بزرگ‌تری ابتدا شکل‌گرفتند و سپس توسط مدارگر شده به مریخ سقوط کرده‌اند؛ امّا فوبوس و دیموس نتیجه نهایی باقی مانده‌اند\u202b." +
                            "\n" +
                            "\n" +
                            "\n" +
                            ": کاربردها و پیش‌بینی‌ها\n" +
                            "\n" +
                            "بررسی منشاء حیات: گرمایش برخوردی و مواد تخلیه‌شده نقش مهم در گرم‌ شدن اولیه و پیدایش ترکیبات حیاتی دارند. " +
                            "استفاده از مدل‌های شبیه‌سازی برای درک فرآیندهای برخورد و تشکیل قمر. " +
                            "کاربرد برای تحلیل سیستم‌های قمر–سیاره در اطراف اجرام کویپر یا سیارات فراخورشیدی. " +
                            "پیش‌بینی اینکه برخوردهای مشابه ممکن است در سایر سیستم‌های کمربند کویپر مانند اریس و هومیا روی داده باشند. " +
                            "احتمالا حلقه‌ی زحل ناشی از برخورد دو قمر یخی با یکدیگر در چندصد میلیون سال گذشته بوده است؛ مدل‌های اس پی اچ نشان می‌دهند که چنین برخوردی منجر به ایجاد حلقه‌های یخی و بازتولید قمرهای متوسط می‌شود\u202b." +
                            "\n" +
                            "\n" +
                            "\n" +
                            ": نقش در علم و فناوری\n" +
                            "\n" +
                            "ارائه مثال‌های طبیعی از فرآیندهای برخورد عظیم منظومه‌ای. " +
                            "راهنمای طراحی مأموریت‌هایی که هدف‌شان بررسی قمرهای بزرگ برخوردی است. " +
                            "شبیه‌سازی برخوردها برای توسعه نظریه‌های تکاملی سیاره‌ای و ژئوفیزیکی. " +
                            "تحلیل منشأ حلقه‌های سیاره‌ای و تغییرات مدارهای قمرها در طول زمان\u202b." +
                            "\n" +
                            "\n" +
                            "\n" +
                            ": بخش نظری برجسته\n" +
                            "\n" +
                            "زمین – ماه: " +
                            "برخورد سهمی بزرگ با جسم تیا حدود ۴٫۵ میلیارد سال پیش. " +
                            "مدار ماه ≈27.3 روز، فاصله ≈384,400 کیلومتر. " +
                            "تطابق ایزوتوپی نشان‌دهنده منشأ مشترک مواد. " +
                            "فرضیه برخوردهای چندگانه نیز در برخی مدل‌ها مطرح است. " +
                            "پلوتو – شارون: " +
                            "برخورد نرم کپتور بین دو جسم یخی. " +
                            "نسبت جرم شارون ≈0.12، فاصله ≈19,600 کیلومتر، دوره مداری ≈6.387 روز. " +
                            "باری‌سنتر خارج از سطح پلوتو؛ رفتار در قالب آدم‌برفی کیهانی. " +
                            "قابلیت وجود اقیانوس زیرسطحی و فعالیت ژئوفیزیکی. " +
                            "تشابه روند با سیستم زمین–ماه اما در شرایط توده‌ای یخی سرد. " +
                            "مریخ – فوبوس و دیموس: " +
                            "شکل‌گیری احتمالی از دیسک برخوردی حدود ۴٫۵ میلیارد سال پیش. " +
                            "قطر فوبوس ≈22 کیلومتر، دیموس ≈12 کیلومتر، مدار بسیار نزدیک به مریخ با دوره‌های کوتاه. " +
                            "فوبوس در حال نزدیک شدن و سقوط احتمالی طی ~۵۰ میلیون سال آینده؛ دیموس به آرامی دور می‌شود. " +
                            "حلقه زحل و قمرهای متوسط: " +
                            "مدل برخورد دو قمر یخی باعث تولید حلقه یخی و قمرهای جدید مثل دیان/ریا می‌شود. " +
                            "زمان رخداد چندصد میلیون سال پیش؛ حلقه‌های یخی عمدتاً بدون سنگ و محتوی بخش یخی پراکنده بر مدار زحل\u202b."
                )
                val textmortabet = listOf("قمر های طبیعی", "قمر های مصنوعی", "قمر های منظم", "قمر های نامنظم", "قمر های دوگانه", "قمر بین ستاره ای")
                val imagemortabet = listOf(
                    painterResource(R.drawable.moonnatural),
                    painterResource(R.drawable.moonartificioal),
                    painterResource(R.drawable.moonregular),
                    painterResource(R.drawable.mooniregular),
                    painterResource(R.drawable.moon2gane),
                    painterResource(R.drawable.moonstari)
                )
                val tarkib = textmortabet.zip(imagemortabet)
                Column(
                    modifier = Modifier
                        .padding(25.dp)
                        .fillMaxSize()
                ) {
                    Box(modifier = Modifier.fillMaxSize())
                    {
                        LazyColumn(
                            horizontalAlignment = Alignment.CenterHorizontally
                        ) {
                            items(textghamarkhordadi) { letter ->
                                Column(modifier = Modifier.padding(30.dp)) {
                                    Row {
                                        Image(painter = painterResource(id = R.drawable.moonbarkhordi)
                                            , contentDescription = null , contentScale = ContentScale.Crop
                                            , modifier = Modifier.size(100.dp))
                                        Column {
                                            Text("")
                                            Row(modifier = Modifier.fillMaxWidth()
                                                ,horizontalArrangement = Arrangement.End
                                                , verticalAlignment = Alignment.CenterVertically) {
                                                Text("قمر های برخوردی" , fontSize = 20.sp  , color = Color.White , style = TextStyle(
                                                    shadow = Shadow(
                                                        color = Color(0xFFFFFFFF),
                                                        offset = Offset(0f ,0f)
                                                        , blurRadius = 20f
                                                    )
                                                ), maxLines = 1)
                                            }
                                        }
                                    }
                                }
                                Box(
                                    modifier = Modifier.fillMaxSize(),
                                    contentAlignment = Alignment.CenterStart,
                                ) {
                                    Column {
                                        Text(
                                            "$letter",
                                            fontSize = 20.sp,
                                            color = Color(0xFFFFFFFF),
                                            lineHeight = 32.sp,
                                            textAlign = TextAlign.Right
                                            , style = TextStyle(
                                                shadow = Shadow(
                                                    color = Color(0xFFFFFFFF),
                                                    offset = Offset(0f ,0f)
                                                    , blurRadius = 20f
                                                )
                                            )
                                        )
                                        Text("")
                                        Text("")
                                        Text("")
                                        Text(
                                            "موضوعات مرتبط",
                                            textAlign = TextAlign.Right,
                                            modifier = Modifier.fillMaxWidth(),
                                            fontSize = 30.sp,
                                            color = Color.White
                                            , style = TextStyle(
                                                shadow = Shadow(
                                                    color = Color(0xFFFFFFFF),
                                                    offset = Offset(0f ,0f)
                                                    , blurRadius = 20f
                                                )
                                            )
                                        )
                                        Text("")
                                        LazyRow(reverseLayout = true) {
                                            items(tarkib) { (matnha, aksha) ->
                                                Card(
                                                    modifier = Modifier
                                                        .width(250.dp)
                                                        .height(120.dp)
                                                        .padding(20.dp)
                                                        .clip(shape = RoundedCornerShape(100.dp)),
                                                    shape = RectangleShape,
                                                    colors = CardDefaults.cardColors(
                                                        containerColor = Color(
                                                            0xFF0707AD
                                                        )
                                                    )
                                                ) {
                                                    Box(
                                                        modifier = Modifier.fillMaxSize(),
                                                        contentAlignment = Alignment.CenterEnd
                                                    ) {
                                                        Image(
                                                            painter = painterResource(id = R.drawable.card),
                                                            contentScale = ContentScale.Crop,
                                                            contentDescription = null,
                                                            modifier = Modifier.fillMaxSize()
                                                        )
                                                        Button(
                                                            modifier = Modifier.fillMaxSize(
                                                            ).indication(indication = null ,
                                                                interactionSource = remember { MutableInteractionSource() }), onClick = {
                                                                if (matnha == "قمر های طبیعی") {
                                                                    currentScreen = "moonnatural"
                                                                    backap = false
                                                                }
                                                                if (matnha == "قمر های مصنوعی") {
                                                                    currentScreen = "moonartificional"
                                                                    backap = false
                                                                }
                                                                if (matnha == "قمر های منظم") {
                                                                    currentScreen = "moonregular"
                                                                    backap = false
                                                                }
                                                                if (matnha == "قمر های نامنظم") {
                                                                    currentScreen = "mooniregular"
                                                                    backap = false
                                                                }
                                                                if (matnha == "قمر های دوگانه") {
                                                                    currentScreen = "moon2gane"
                                                                    backap = false
                                                                }
                                                                if (matnha == "قمر های برخوردی") {
                                                                    currentScreen = "moonbarkhordi"
                                                                    backap = false
                                                                }
                                                                if (matnha == "قمر بین ستاره ای") {
                                                                    currentScreen = "moonstari"
                                                                    backap = false
                                                                }
                                                            }, colors = ButtonDefaults.buttonColors(
                                                                contentColor = Color.Transparent,
                                                                containerColor = Color.Transparent
                                                            )) {
                                                        }
                                                        Row() {
                                                            Spacer(modifier = Modifier.width(10.dp))
                                                            Column {
                                                                Spacer(modifier = Modifier.height(9.dp))
                                                                Text(
                                                                    "$matnha",
                                                                    color = Color.White,
                                                                    fontSize = 20.sp
                                                                    , style = TextStyle(
                                                                        shadow = Shadow(
                                                                            color = Color(0xFFFFFFFF),
                                                                            offset = Offset(0f ,0f)
                                                                            , blurRadius = 20f
                                                                        )
                                                                    )
                                                                )
                                                            }
                                                            Spacer(modifier = Modifier.width(15.dp))
                                                            Image(
                                                                painter = aksha,
                                                                contentDescription = null,
                                                                contentScale = ContentScale.Crop,
                                                                modifier = Modifier.size(50.dp)
                                                            )
                                                            Spacer(modifier = Modifier.width(15.dp))
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        Text("")
                                        Text("")
                                        Text("")
                                    }
                                }
                            }
                        }
                        var count by remember { mutableStateOf(0) }
                        IconButton(
                            onClick = { count++ },
                            modifier = Modifier
                                .size(70.dp)
                                .align(Alignment.BottomEnd)
                                .indication(indication = null ,
                                    interactionSource = remember { MutableInteractionSource() }),
                            colors = IconButtonDefaults.iconButtonColors(
                                containerColor = Color(0xFF030A33)
                            )
                        ) {
                            if (count % 2 == 0) {
                                Icon(
                                    imageVector = Icons.Default.Favorite,
                                    contentDescription = null,
                                    modifier = Modifier.size(50.dp),
                                    tint = Color.Transparent
                                )
                                Icon(
                                    imageVector = Icons.Default.FavoriteBorder,
                                    contentDescription = null,
                                    modifier = Modifier.size(50.dp),
                                    tint = Color.White
                                )
                            }
                            if (count % 2 == 1) {
                                Icon(
                                    imageVector = Icons.Default.Favorite,
                                    contentDescription = null,
                                    modifier = Modifier.size(50.dp),
                                    tint = Color.White
                                )
                                Icon(
                                    imageVector = Icons.Default.FavoriteBorder,
                                    contentDescription = null,
                                    modifier = Modifier.size(50.dp),
                                    tint = Color.White
                                )
                            }
                        }
                    }
                }
            }
        }
    }
}
@Composable
fun MoonStari(){
    Image(
        painter = painterResource(id = R.drawable.app_back),
        contentScale = ContentScale.Crop,
        contentDescription = null
    )
    when(currentScreen) {
        "moonstari" -> {
            Column {
                Card(
                    modifier = Modifier
                        .fillMaxWidth()
                        .height(32.5.dp),
                    shape = RectangleShape,
                    colors = CardDefaults.cardColors(containerColor = Color(0xFF030A33))
                ) {
                }
                Column(){
                    Card(
                        modifier = Modifier
                            .fillMaxWidth()
                            .height(50.dp),
                        shape = RectangleShape,
                        colors = CardDefaults.cardColors(containerColor = Color(0xFF0707AD))
                    ) {
                        Row(modifier = Modifier.padding(10.dp)) {
                            IconButton(onClick = {currentScreen = "asli2"
                                backap = true
                            } , colors = IconButtonDefaults.iconButtonColors(contentColor = Color.White)
                                , modifier = Modifier.indication(indication = null ,
                                    interactionSource = remember { MutableInteractionSource() })){
                                Icon(imageVector = Icons.Outlined.ArrowBack, contentDescription = null , modifier = Modifier.size(40.dp))
                            }
                            IconButton(
                                onClick = {},
                                colors = IconButtonDefaults.iconButtonColors(contentColor = Color.White),
                                modifier = Modifier.indication(indication = null ,
                                    interactionSource = remember { MutableInteractionSource() })
                            ) {
                                Icon(imageVector = Icons.Default.Info, contentDescription = null)
                            }
                            IconButton(
                                onClick = {},
                                colors = IconButtonDefaults.iconButtonColors(contentColor = Color.White),
                                modifier = Modifier.indication(indication = null ,
                                    interactionSource = remember { MutableInteractionSource() })
                            ) {
                                Icon(imageVector = Icons.Default.Share, contentDescription = null)
                            }
                            Row(
                                modifier = Modifier.fillMaxWidth(),
                                horizontalArrangement = Arrangement.End,
                                verticalAlignment = Alignment.CenterVertically
                            ) {
                                Text("قمر های بین ستاره ای", fontSize = 20.sp, color = Color.White  , maxLines = 1 , fontWeight = FontWeight.ExtraBold)
                                IconButton(onClick = {expanded = true},
                                    modifier = Modifier.size(50.dp)
                                        .indication(indication = null ,
                                            interactionSource = remember { MutableInteractionSource() }),
                                    colors = IconButtonDefaults.iconButtonColors(contentColor = Color.White)) {
                                    Icon(imageVector = Icons.Default.Menu, contentDescription = null)
                                }
                            }
                        }
                    }
                }


                var textghamarbeynsetareei = listOf(
                    ": معرفی کلی\n" +
                            "\n" +
                            "قمرهای بین‌ستاره‌ای شامل ماه‌هایی هستند که در مدار سیارات یا اجرام بین‌ستاره‌ای خارج از منظومه شمسی قرار دارند—البته هنوز هیچ مورد تأییدشده‌ای وجود ندارد. تا ژوئن ۲۰۲۵، تنها یک یا دو نامزد قمر فراخورشیدی (اگزومون) در سیستم‌های کپلر بررسی شده‌اند، اما هیچ موردی به‌صورت قطعی تأیید نشده است\u202b." +
                            "\n" +
                            "\n" +
                            "\n" +
                            ": چارچوب‌های رده‌بندی و دسته‌بندی\n" +
                            "\n" +
                            "بر اساس وضعیت تایید: نامزد (کاندیدیت اگزومون) و تأیید نشده. " +
                            "بر اساس جرم مرکزی: قمرهایی که به دور سیارات فراخورشیدی یا اجرام کم‌جرم شناور گردش می‌کنند\u202b." +
                            "\n" +
                            "\n" +
                            "\n" +
                            ": اصول و مبانی نظری کلیدی\n" +
                            "\n" +
                            "تداخل در زمان و مدت ترانزیت (تی تی وی و تی دی وی) برای شناسایی سیگنال‌های احتمالی قمر. " +
                            "تأثیرات گرمایش کشندی و تابش ستاره‌ای بر هابیتابیلیتی ماه‌ها. " +
                            "مدل‌های شکل‌گیری اگزومون: تشکیل در دیسک پیرامون سیاره، اسیرشدگی، یا کپتور پیچیده. " +
                            "احتمال وجود پلونتس (قمرهایی که از مدار خارج شده‌اند و به سیاره تبدیل شده‌اند) که ممکن است سیارات آزاد را توجیه کنند\u202b." +
                            "\n" +
                            "\n" +
                            "\n" +
                            ": کاربردها و پیش‌بینی‌ها\n" +
                            "\n" +
                            "جستجوی زیست‌پذیری فراخورشیدی: قمرهای اطراف سیارات غول‌پیک ممکن است منابع حیاتی آب مایع داشته باشند. " +
                            "تحلیل تحول سامانه‌های سیاره‌ای از طریق تأثیر مهاجرت سیارات و تشکیل ماه‌ها. " +
                            "استفاده از جست، تلسکوپ روبین و رصدخانه‌های آینده برای ردیابی نامزدها. " +
                            "پیش‌بینی افزایش شمار نامزدها با رصد دقیق‌تر سیارات در منطقه قابل سکونت.\u202b." +
                            "\n" +
                            "\n" +
                            "\n" +
                            ": نقش در علم و فناوری\n" +
                            "\n" +
                            "تعمیق دانسته‌ها درباره تشکیل و تکامل قمرها در سامانه‌های فراخورشیدی. " +
                            "ارتقا تکنیک‌های سنجش غیرمستقیم در اخترشناسی. " +
                            "هدف‌گذاری مأموریت‌ها برای پیگیری نامزدها و بررسی پتانسیل زیستی. " +
                            "ارتباط بین اگزومون ها و پیدایش پلونت ها به‌عنوان مفهوم جدید در سیاره‌شناسی\u202b." +
                            "\n" +
                            "\n" +
                            "\n" +
                            ": بخش نظری برجسته\n" +
                            "\n" +
                            "نامزد اولین قمر فراخورشیدی (گازی)، قطر حدود نپتون سایز و جرم مشابه (~0.06 ام جی). " +
                            "بر پایه داده‌های تی تی وی و نی دی وی و کاهش نور بعد از ترانزیت. " +
                            "تأیید دقیق هنوز ناقص است، اما یکی از بهترین نامزدها تا ژوئن ۲۰۲۵ به‌حساب می‌آید. " +
                            "نامزدهای دیگر مانند کپلر‑1708 بی‑ای: " +
                            "قطر ~۲٫۶ برابر زمین، در این مجله‌ها اشاره شده‌اند اما هنوز تأیید نشده‌اند. " +
                            "پلوونت‌ها: " +
                            "قمرهایی که از مدار سیاره جدا شده‌اند و مستقل گشته‌اند؛ هنوز تأیید نشده‌اند اما می‌توانند رفتار تیبی استار را توضیح دهند. " +
                            "گرمایش کشندی و قابلیت زیست‌پذیری: " +
                            "مدل‌هایی که ترکیب تابش ستاره‌ای و گرمایش داخلی قمر را بررسی کرده‌اند؛ این مدل‌ها نشان می‌دهند اگزومون ها می‌توانند حتی در خارج از منطقه قابل سکونت نیز سکونت‌پذیر باشند\u202b."
                )
                val textmortabet = listOf("قمر های طبیعی", "قمر های مصنوعی", "قمر های منظم", "قمر های نامنظم", "قمر های دوگانه", "قمر های برخوردی")
                val imagemortabet = listOf(
                    painterResource(R.drawable.moonnatural),
                    painterResource(R.drawable.moonartificioal),
                    painterResource(R.drawable.moonregular),
                    painterResource(R.drawable.mooniregular),
                    painterResource(R.drawable.moon2gane),
                    painterResource(R.drawable.moonbarkhordi)
                )
                val tarkib = textmortabet.zip(imagemortabet)
                Column(
                    modifier = Modifier
                        .padding(25.dp)
                        .fillMaxSize()
                ) {
                    Box(modifier = Modifier.fillMaxSize())
                    {
                        LazyColumn(
                            horizontalAlignment = Alignment.CenterHorizontally
                        ) {
                            items(textghamarbeynsetareei) { letter ->
                                Column(modifier = Modifier.padding(30.dp)) {
                                    Row {
                                        Image(painter = painterResource(id = R.drawable.moonstari)
                                            , contentDescription = null , contentScale = ContentScale.Crop
                                            , modifier = Modifier.size(100.dp))
                                        Column {
                                            Text("")
                                            Row(modifier = Modifier.fillMaxWidth()
                                                ,horizontalArrangement = Arrangement.End
                                                , verticalAlignment = Alignment.CenterVertically) {
                                                Text("قمر های بین ستاره ای" , fontSize = 20.sp  , color = Color.White , style = TextStyle(
                                                    shadow = Shadow(
                                                        color = Color(0xFFFFFFFF),
                                                        offset = Offset(0f ,0f)
                                                        , blurRadius = 20f
                                                    )
                                                ), maxLines = 1)
                                            }
                                        }
                                    }
                                }
                                Box(
                                    modifier = Modifier.fillMaxSize(),
                                    contentAlignment = Alignment.CenterStart,
                                ) {
                                    Column {
                                        Text(
                                            "$letter",
                                            fontSize = 20.sp,
                                            color = Color(0xFFFFFFFF),
                                            lineHeight = 32.sp,
                                            textAlign = TextAlign.Right
                                            , style = TextStyle(
                                                shadow = Shadow(
                                                    color = Color(0xFFFFFFFF),
                                                    offset = Offset(0f ,0f)
                                                    , blurRadius = 20f
                                                )
                                            )
                                        )
                                        Text("")
                                        Text("")
                                        Text("")
                                        Text(
                                            "موضوعات مرتبط",
                                            textAlign = TextAlign.Right,
                                            modifier = Modifier.fillMaxWidth(),
                                            fontSize = 30.sp,
                                            color = Color.White
                                            , style = TextStyle(
                                                shadow = Shadow(
                                                    color = Color(0xFFFFFFFF),
                                                    offset = Offset(0f ,0f)
                                                    , blurRadius = 20f
                                                )
                                            )
                                        )
                                        Text("")
                                        LazyRow(reverseLayout = true) {
                                            items(tarkib) { (matnha, aksha) ->
                                                Card(
                                                    modifier = Modifier
                                                        .width(250.dp)
                                                        .height(120.dp)
                                                        .padding(20.dp)
                                                        .clip(shape = RoundedCornerShape(100.dp)),
                                                    shape = RectangleShape,
                                                    colors = CardDefaults.cardColors(
                                                        containerColor = Color(
                                                            0xFF0707AD
                                                        )
                                                    )
                                                ) {
                                                    Box(
                                                        modifier = Modifier.fillMaxSize(),
                                                        contentAlignment = Alignment.CenterEnd
                                                    ) {
                                                        Image(
                                                            painter = painterResource(id = R.drawable.card),
                                                            contentScale = ContentScale.Crop,
                                                            contentDescription = null,
                                                            modifier = Modifier.fillMaxSize()
                                                        )
                                                        Button(
                                                            modifier = Modifier.fillMaxSize(
                                                            ).indication(indication = null ,
                                                                interactionSource = remember { MutableInteractionSource() }), onClick = {
                                                                if (matnha == "قمر های طبیعی") {
                                                                    currentScreen = "moonnatural"
                                                                    backap = false
                                                                }
                                                                if (matnha == "قمر های مصنوعی") {
                                                                    currentScreen = "moonartificional"
                                                                    backap = false
                                                                }
                                                                if (matnha == "قمر های منظم") {
                                                                    currentScreen = "moonregular"
                                                                    backap = false
                                                                }
                                                                if (matnha == "قمر های نامنظم") {
                                                                    currentScreen = "mooniregular"
                                                                    backap = false
                                                                }
                                                                if (matnha == "قمر های دوگانه") {
                                                                    currentScreen = "moon2gane"
                                                                    backap = false
                                                                }
                                                                if (matnha == "قمر های برخوردی") {
                                                                    currentScreen = "moonbarkhordi"
                                                                    backap = false
                                                                }
                                                                if (matnha == "قمر بین ستاره ای") {
                                                                    currentScreen = "moonstari"
                                                                    backap = false
                                                                }
                                                            }, colors = ButtonDefaults.buttonColors(
                                                                contentColor = Color.Transparent,
                                                                containerColor = Color.Transparent
                                                            )) {
                                                        }
                                                        Row() {
                                                            Spacer(modifier = Modifier.width(10.dp))
                                                            Column {
                                                                Spacer(modifier = Modifier.height(9.dp))
                                                                Text(
                                                                    "$matnha",
                                                                    color = Color.White,
                                                                    fontSize = 20.sp
                                                                    , style = TextStyle(
                                                                        shadow = Shadow(
                                                                            color = Color(0xFFFFFFFF),
                                                                            offset = Offset(0f ,0f)
                                                                            , blurRadius = 20f
                                                                        )
                                                                    )
                                                                )
                                                            }
                                                            Spacer(modifier = Modifier.width(15.dp))
                                                            Image(
                                                                painter = aksha,
                                                                contentDescription = null,
                                                                contentScale = ContentScale.Crop,
                                                                modifier = Modifier.size(50.dp)
                                                            )
                                                            Spacer(modifier = Modifier.width(15.dp))
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        Text("")
                                        Text("")
                                        Text("")
                                    }
                                }
                            }
                        }
                        var count by remember { mutableStateOf(0) }
                        IconButton(
                            onClick = { count++ },
                            modifier = Modifier
                                .size(70.dp)
                                .align(Alignment.BottomEnd)
                                .indication(indication = null ,
                                    interactionSource = remember { MutableInteractionSource() }),
                            colors = IconButtonDefaults.iconButtonColors(
                                containerColor = Color(0xFF030A33)
                            )
                        ) {
                            if (count % 2 == 0) {
                                Icon(
                                    imageVector = Icons.Default.Favorite,
                                    contentDescription = null,
                                    modifier = Modifier.size(50.dp),
                                    tint = Color.Transparent
                                )
                                Icon(
                                    imageVector = Icons.Default.FavoriteBorder,
                                    contentDescription = null,
                                    modifier = Modifier.size(50.dp),
                                    tint = Color.White
                                )
                            }
                            if (count % 2 == 1) {
                                Icon(
                                    imageVector = Icons.Default.Favorite,
                                    contentDescription = null,
                                    modifier = Modifier.size(50.dp),
                                    tint = Color.White
                                )
                                Icon(
                                    imageVector = Icons.Default.FavoriteBorder,
                                    contentDescription = null,
                                    modifier = Modifier.size(50.dp),
                                    tint = Color.White
                                )
                            }
                        }
                    }
                }
            }
        }
    }
}










//سیارک ها
















@Composable
fun AstroidTarkibi(){
    Image(
        painter = painterResource(id = R.drawable.app_back),
        contentScale = ContentScale.Crop,
        contentDescription = null
    )
    when(currentScreen) {
        "astroidtarkibi" -> {
            Column {
                Card(
                    modifier = Modifier
                        .fillMaxWidth()
                        .height(32.5.dp),
                    shape = RectangleShape,
                    colors = CardDefaults.cardColors(containerColor = Color(0xFF030A33))
                ) {
                }
                Column(){
                    Card(
                        modifier = Modifier
                            .fillMaxWidth()
                            .height(50.dp),
                        shape = RectangleShape,
                        colors = CardDefaults.cardColors(containerColor = Color(0xFF0707AD))
                    ) {
                        Row(modifier = Modifier.padding(10.dp)) {
                            IconButton(onClick = {currentScreen = "asli3"
                                backap = true
                            } , colors = IconButtonDefaults.iconButtonColors(contentColor = Color.White)
                                , modifier = Modifier.indication(indication = null ,
                                    interactionSource = remember { MutableInteractionSource() })){
                                Icon(imageVector = Icons.Outlined.ArrowBack, contentDescription = null , modifier = Modifier.size(40.dp))
                            }
                            IconButton(
                                onClick = {},
                                colors = IconButtonDefaults.iconButtonColors(contentColor = Color.White),
                                modifier = Modifier.indication(indication = null ,
                                    interactionSource = remember { MutableInteractionSource() })
                            ) {
                                Icon(imageVector = Icons.Default.Info, contentDescription = null)
                            }
                            IconButton(
                                onClick = {},
                                colors = IconButtonDefaults.iconButtonColors(contentColor = Color.White),
                                modifier = Modifier.indication(indication = null ,
                                    interactionSource = remember { MutableInteractionSource() })
                            ) {
                                Icon(imageVector = Icons.Default.Share, contentDescription = null)
                            }
                            Row(
                                modifier = Modifier.fillMaxWidth(),
                                horizontalArrangement = Arrangement.End,
                                verticalAlignment = Alignment.CenterVertically
                            ) {
                                Text("سیارک های ترکیبی", fontSize = 20.sp, color = Color.White  , maxLines = 1 , fontWeight = FontWeight.ExtraBold)
                                IconButton(onClick = {expanded = true},
                                    modifier = Modifier.size(50.dp)
                                        .indication(indication = null ,
                                            interactionSource = remember { MutableInteractionSource() }),
                                    colors = IconButtonDefaults.iconButtonColors(contentColor = Color.White)) {
                                    Icon(imageVector = Icons.Default.Menu, contentDescription = null)
                                }
                            }
                        }
                    }
                }


                var textsiaraketerkimii = listOf(
                    ": معرفی کلی\n" +
                            "\n" +
                            "سیارک‌های ترکیبی یا سیستم‌های دوتایی چندگانه شامل دو یا چند سیارک هستند که به‌صورت گرانشی با هم در مدار مشترک یا تماس (تماس باینری) قرار دارند، گاهی با فعالیت دنباله‌داری. حدود ۱۰–۱۵٪ از سیارک‌های نزدیک‌زمین به‌صورت دوتایی هستند و تا ده‌ها سیستم با اندازه‌های تقریباً برابر نیز شناخته شده‌اند. همچنین بعضی سیستم‌ها در کمربند سیارکی فعالیت دنباله‌دار یا خواص ترکیبی دارند مانند وی دبلیو 139، اولین باینری شناخته‌شده\u202b." +
                            "\n" +
                            "\n" +
                            "\n" +
                            ": چارچوب‌های رده‌بندی و دسته‌بندی\n" +
                            "\n" +
                            "بر اساس ساختار: سیارک‌های دوتایی گرانشی، (اجسام به هم چسبیده)، سیستم‌های چندگانه (سه‌گانه). " +
                            "بر اساس فعالیت: سیستم دوتایی فعال، یا خنثی. " +
                            "بر اساس اندازه: نیا ‌های کوچک (<۱ کیلومتر)، ام بی ای اس بزرگ‌تر (~۱۰–۱۰۰ کیلومتر). " +
                            "بر اساس نسبت جرم: سیستم‌های تقریباً برابر جرم و سیستم‌های جرم نامتقارن\u202b." +
                            "\n" +
                            "\n" +
                            "\n" +
                            ": اصول و مبانی نظری کلیدی\n" +
                            "\n" +
                            "تشکیل توسط فیزیک یورپ و چرخش سریع و فشردگی. " +
                            "برهم‌کنش کشندی و مسیر گرمایی داخلی سیارک‌ها برای ثبات ساختار. " +
                            "مدل‌های تشکیل از ادغام آرام دو جسم جدا. " +
                            "تحلیل‌های راداری و فوتومتری برای برآورد اندازه، دوره چرخش و داده‌های میوتال اوربیت. " +
                            "جایگاه سیستم‌های فعال که دنباله‌دارایی دارند (مثل وی ام 139) به‌عنوان پیوند بین سیارک و دنباله‌دار\u202b." +
                            "\n" +
                            "\n" +
                            "\n" +
                            ": کاربردها و پیش‌بینی‌ها\n" +
                            "\n" +
                            "شناخت ترکیب و تراکم داخلی: کمک به تعیین ساختار شنی یا توده‌ای و تراکم‌های بسیار کم. " +
                            "استفاده در علوم دفاع سیاره‌ای: میشون دارت روی دیدموس، قدرت تغییر مدار سیارک را آزمود. " +
                            "استفاده از داده‌های گایا،اطلس در پروژه‌هایی مثل فست برای بهینه کردن تحلیل‌های پایداری مدار و چرخش سیستم‌های باینری. " +
                            "با افزایش شمار رصدهای دقیق و ماموریت‌هایی مثل لوکی، انتظار افزایش تعداد شناخته‌شده‌های باینری و استروید تا پایان سال ۲۰۲۵ هست\u202b." +
                            "\n" +
                            "\n" +
                            "\n" +
                            ": نقش در علم و فناوری\n" +
                            "\n" +
                            "اندازه‌گیری دقیق جرم و تراکم برای مطالعه ترکیب داخلی سیارک‌ها. " +
                            "شناخت مکانیزم‌های تشکیل سیارک‌های چندگانه در منظومه شمسی. " +
                            "مدلسازی دینامیک ترکیب‌شدگی و تاثیرات کشندی برای پیش‌بینی تکامل اهداف مأموریت. " +
                            "ارتقاء روش‌های فوتومتری ترکیبی و الگوریتم‌های یادگیری ماشین برای تحلیل داده‌های گسترده اخترشناسی\u202b." +
                            "\n" +
                            "\n" +
                            "\n" +
                            ": بخش نظری برجسته\n" +
                            "\n" +
                            "سیستم دیدموس: دیدموس حدود ۸۴۰ متر قطر، ~۰.۱۴، دوره چرخش ~۲.۲۶ ساعت؛ دیمورفس ~۱۷۰ متر، تشکیل یافته حدود ۳۰۰٬۰۰۰ سال پیش، دیمورفس ~۱۲.۵ میلیون ساله با ترکیب روبل پایل و سنگ‌های بزرگ روی سطح. " +
                            "سیارک دینکینیش و ماهواره‌اش سیلام: ماهواره‌ای در کمربند سیارکی، مدار ~۵۳ ساعت، شکل دو لوب پیوسته ذرات ترکیبی. " +
                            "سیستم وی ام 139: اولین باینری شناخته‌شده با فعالیت دنباله‌داری و دو جسم گرانشی جدا. " +
                            "سیستم‌های ناپایدار جرم برابر مثل 2017 یه 5 و هرمس و …: کمتر از ۱٪ نیا ها هستند و ساختار با چگالی پایین و پر از پرمارگافی. " +
                            "سیارک اتیرا (163693): تنها باینری تأییدشده داخل مدار زمین با فاصله ~۶ کیلومتر و دوره مداری ~۱۵.۵ ساعت، قطر اصلی ~۴.۸ کیلومتر\u202b."
                )
                val textmortabet = listOf("سیارک های طیفی", "سیارک های نوری", "سیارک های فیزیکی", "سیارک های منشادار", "سیارک های مداری", "سیارک های بازالتی")
                val imagemortabet = listOf(
                    painterResource(R.drawable.astroidteifi),
                    painterResource(R.drawable.astroidnori),
                    painterResource(R.drawable.astroidfiziki),
                    painterResource(R.drawable.astroidmanshaedar),
                    painterResource(R.drawable.astroidmadari),
                    painterResource(R.drawable.astroidbazalati)
                )
                val tarkib = textmortabet.zip(imagemortabet)
                Column(
                    modifier = Modifier
                        .padding(25.dp)
                        .fillMaxSize()
                ) {
                    Box(modifier = Modifier.fillMaxSize())
                    {
                        LazyColumn(
                            horizontalAlignment = Alignment.CenterHorizontally
                        ) {
                            items(textsiaraketerkimii) { letter ->
                                Column(modifier = Modifier.padding(30.dp)) {
                                    Row {
                                        Image(painter = painterResource(id = R.drawable.asteroidtarkibi)
                                            , contentDescription = null , contentScale = ContentScale.Crop
                                            , modifier = Modifier.size(100.dp))
                                        Column {
                                            Text("")
                                            Row(modifier = Modifier.fillMaxWidth()
                                                ,horizontalArrangement = Arrangement.End
                                                , verticalAlignment = Alignment.CenterVertically) {
                                                Text("سیارک های ترکیبی" , fontSize = 20.sp  , color = Color.White , style = TextStyle(
                                                    shadow = Shadow(
                                                        color = Color(0xFFFFFFFF),
                                                        offset = Offset(0f ,0f)
                                                        , blurRadius = 20f
                                                    )
                                                ), maxLines = 1)
                                            }
                                        }
                                    }
                                }
                                Box(
                                    modifier = Modifier.fillMaxSize(),
                                    contentAlignment = Alignment.CenterStart,
                                ) {
                                    Column {
                                        Text(
                                            "$letter",
                                            fontSize = 20.sp,
                                            color = Color(0xFFFFFFFF),
                                            lineHeight = 32.sp,
                                            textAlign = TextAlign.Right
                                            , style = TextStyle(
                                                shadow = Shadow(
                                                    color = Color(0xFFFFFFFF),
                                                    offset = Offset(0f ,0f)
                                                    , blurRadius = 20f
                                                )
                                            )
                                        )
                                        Text("")
                                        Text("")
                                        Text("")
                                        Text(
                                            "موضوعات مرتبط",
                                            textAlign = TextAlign.Right,
                                            modifier = Modifier.fillMaxWidth(),
                                            fontSize = 30.sp,
                                            color = Color.White
                                            , style = TextStyle(
                                                shadow = Shadow(
                                                    color = Color(0xFFFFFFFF),
                                                    offset = Offset(0f ,0f)
                                                    , blurRadius = 20f
                                                )
                                            )
                                        )
                                        Text("")
                                        LazyRow(reverseLayout = true) {
                                            items(tarkib) { (matnha, aksha) ->
                                                Card(
                                                    modifier = Modifier
                                                        .width(250.dp)
                                                        .height(120.dp)
                                                        .padding(20.dp)
                                                        .clip(shape = RoundedCornerShape(100.dp)),
                                                    shape = RectangleShape,
                                                    colors = CardDefaults.cardColors(
                                                        containerColor = Color(
                                                            0xFF0707AD
                                                        )
                                                    )
                                                ) {
                                                    Box(
                                                        modifier = Modifier.fillMaxSize(),
                                                        contentAlignment = Alignment.CenterEnd
                                                    ) {
                                                        Image(
                                                            painter = painterResource(id = R.drawable.card),
                                                            contentScale = ContentScale.Crop,
                                                            contentDescription = null,
                                                            modifier = Modifier.fillMaxSize()
                                                        )
                                                        Button(
                                                            modifier = Modifier.fillMaxSize(
                                                            ).indication(indication = null ,
                                                                interactionSource = remember { MutableInteractionSource() }), onClick = {
                                                                if (matnha == "سیارک های ترکیبی") {
                                                                    currentScreen = "astroidtarkibi"
                                                                    backap = false
                                                                }
                                                                if (matnha == "سیارک های طیفی") {
                                                                    backap = false
                                                                    currentScreen = "astroidteifi"
                                                                }
                                                                if (matnha == "سیارک های نوری") {
                                                                    currentScreen = "astroidnoori"
                                                                    backap = false
                                                                }
                                                                if (matnha == "سیارک های فیزیکی") {
                                                                    backap = false
                                                                    currentScreen = "astroidfiziki"
                                                                }
                                                                if (matnha == "سیارک های منشادار") {
                                                                    backap = false
                                                                    currentScreen = "astroidmanshaedar"
                                                                }
                                                                if (matnha == "سیارک های مداری") {
                                                                    backap = false
                                                                    currentScreen = "astroidmadari"
                                                                }
                                                                if (matnha == "سیارک های بازالتی") {
                                                                    backap = false
                                                                    currentScreen = "astroidbazalati"
                                                                }
                                                            }, colors = ButtonDefaults.buttonColors(
                                                                contentColor = Color.Transparent,
                                                                containerColor = Color.Transparent
                                                            )) {
                                                        }
                                                        Row() {
                                                            Spacer(modifier = Modifier.width(10.dp))
                                                            Column {
                                                                Spacer(modifier = Modifier.height(9.dp))
                                                                Text(
                                                                    "$matnha",
                                                                    color = Color.White,
                                                                    fontSize = 20.sp
                                                                    , style = TextStyle(
                                                                        shadow = Shadow(
                                                                            color = Color(0xFFFFFFFF),
                                                                            offset = Offset(0f ,0f)
                                                                            , blurRadius = 20f
                                                                        )
                                                                    )
                                                                )
                                                            }
                                                            Spacer(modifier = Modifier.width(15.dp))
                                                            Image(
                                                                painter = aksha,
                                                                contentDescription = null,
                                                                contentScale = ContentScale.Crop,
                                                                modifier = Modifier.size(50.dp)
                                                            )
                                                            Spacer(modifier = Modifier.width(15.dp))
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        Text("")
                                        Text("")
                                        Text("")
                                    }
                                }
                            }
                        }
                        var count by remember { mutableStateOf(0) }
                        IconButton(
                            onClick = { count++ },
                            modifier = Modifier
                                .size(70.dp)
                                .align(Alignment.BottomEnd)
                                .indication(indication = null ,
                                    interactionSource = remember { MutableInteractionSource() }),
                            colors = IconButtonDefaults.iconButtonColors(
                                containerColor = Color(0xFF030A33)
                            )
                        ) {
                            if (count % 2 == 0) {
                                Icon(
                                    imageVector = Icons.Default.Favorite,
                                    contentDescription = null,
                                    modifier = Modifier.size(50.dp),
                                    tint = Color.Transparent
                                )
                                Icon(
                                    imageVector = Icons.Default.FavoriteBorder,
                                    contentDescription = null,
                                    modifier = Modifier.size(50.dp),
                                    tint = Color.White
                                )
                            }
                            if (count % 2 == 1) {
                                Icon(
                                    imageVector = Icons.Default.Favorite,
                                    contentDescription = null,
                                    modifier = Modifier.size(50.dp),
                                    tint = Color.White
                                )
                                Icon(
                                    imageVector = Icons.Default.FavoriteBorder,
                                    contentDescription = null,
                                    modifier = Modifier.size(50.dp),
                                    tint = Color.White
                                )
                            }
                        }
                    }
                }
            }
        }
    }
}
@Composable
fun AstroidTeifi(){
    Image(
        painter = painterResource(id = R.drawable.app_back),
        contentScale = ContentScale.Crop,
        contentDescription = null
    )
    when(currentScreen) {
        "astroidteifi" -> {
            Column {
                Card(
                    modifier = Modifier
                        .fillMaxWidth()
                        .height(32.5.dp),
                    shape = RectangleShape,
                    colors = CardDefaults.cardColors(containerColor = Color(0xFF030A33))
                ) {
                }
                Column(){
                    Card(
                        modifier = Modifier
                            .fillMaxWidth()
                            .height(50.dp),
                        shape = RectangleShape,
                        colors = CardDefaults.cardColors(containerColor = Color(0xFF0707AD))
                    ) {
                        Row(modifier = Modifier.padding(10.dp)) {
                            IconButton(onClick = {currentScreen = "asli3"
                                backap = true
                            } , colors = IconButtonDefaults.iconButtonColors(contentColor = Color.White)
                                , modifier = Modifier.indication(indication = null ,
                                    interactionSource = remember { MutableInteractionSource() })){
                                Icon(imageVector = Icons.Outlined.ArrowBack, contentDescription = null , modifier = Modifier.size(40.dp))
                            }
                            IconButton(
                                onClick = {},
                                colors = IconButtonDefaults.iconButtonColors(contentColor = Color.White),
                                modifier = Modifier.indication(indication = null ,
                                    interactionSource = remember { MutableInteractionSource() })
                            ) {
                                Icon(imageVector = Icons.Default.Info, contentDescription = null)
                            }
                            IconButton(
                                onClick = {},
                                colors = IconButtonDefaults.iconButtonColors(contentColor = Color.White),
                                modifier = Modifier.indication(indication = null ,
                                    interactionSource = remember { MutableInteractionSource() })
                            ) {
                                Icon(imageVector = Icons.Default.Share, contentDescription = null)
                            }
                            Row(
                                modifier = Modifier.fillMaxWidth(),
                                horizontalArrangement = Arrangement.End,
                                verticalAlignment = Alignment.CenterVertically
                            ) {
                                Text("سیارک های طیفی", fontSize = 20.sp, color = Color.White  , maxLines = 1 , fontWeight = FontWeight.ExtraBold)
                                IconButton(onClick = {expanded = true},
                                    modifier = Modifier.size(50.dp)
                                        .indication(indication = null ,
                                            interactionSource = remember { MutableInteractionSource() }),
                                    colors = IconButtonDefaults.iconButtonColors(contentColor = Color.White)) {
                                    Icon(imageVector = Icons.Default.Menu, contentDescription = null)
                                }
                            }
                        }
                    }
                }


                var textsiaraketayarifi = listOf(
                    ": معرفی کلی\n" +
                            "\n" +
                            "سیارک‌های طیفی بر اساس شکل طیف بازتاب، رنگ و در برخی موارد آلبدو به دسته‌های مشخص تقسیم می‌شوند؛ این طبقه‌بندی برای درک ترکیب سطحی و منشأ آنها حیاتی است. حدود ۵۰۰۰ ۶۰۰۰ سیارک با طبقه‌بندی طیفی قابل اعتماد شناخته شده‌اند. سیستم‌های کلاسیک تولن، اسماس و باس دمو بیش از ۲۴ کلاس ارائه می‌دهند، با گروه‌های اصلی مانند سی کامپلکس (تقریباً ۷۵٪ جمعیت)، اس کامپلکس (~۱۷٪) و ایکس کامپلکس است. علاوه بر آن کلاس‌های کمتر رایج مانند ای, دی, وی, کی, ال, تی, کیو و زد با خصوصیات ویژه شناخته‌شده‌اند\u202b." +
                            "\n" +
                            "\n" +
                            "\n" +
                            ": چارچوب‌های رده‌بندی و دسته‌بندی\n" +
                            "\n" +
                            "بر اساس سیستم دلون: گروه‌های سی ، کلاس‌های نادری نظیر ای , دی, تی, کیو, آر. " +
                            "بر اساس باس دمو: تفکیک دقیق‌تر شامل سی کامپلکس، اس کامپلکس، ایکس کامپلکس و زیرکلاس‌های نظیر  دی, کی, ال, وی وکلاس جدید زد طیف بسیار قرمز. " +
                            "بر اساس ویژگی: نسبت البدو و طول موج جذبی نورد مادون‌بنفش و نزدیک مادون‌ قرمز. " +
                            "بر اساس گستره مداری: توزیع در کمربند داخلی، کمربند بیرونی, تروجان ها\u202b." +
                            "\n" +
                            "\n" +
                            "\n" +
                            ": اصول و مبانی نظری کلیدی\n" +
                            "\n" +
                            "تفکیک طیفی از ویس نیر با استفاده از تحلیل بردارهای اصلی و طبقه‌بندی‌های زوج‌بینی. " +
                            "روش‌های رایانه‌ای: شبکه‌های عصبی و یادگیری ماشینی برای دسته‌بندی خودکار با دقت تا ~۹۰٪ (۸۵٫۸٪ در ۵۶۶ کلاس، ساده‌شده تا ۹۰٫۱٪). " +
                            "تجمیع طیف‌ها با اطلاعات البدو برای جداسازی ایکس کامپلکس و تعیین پی کلس به داخل سی کامپلکس. " +
                            "روابط طیفی با انواع شهاب‌سنگ‌های معروف: سی → کربوناسیوس، اس → اوردیناری ، ام →آهنی، وی → اچ ای دی. " +
                            "سنجش ساختار خانواده‌های سیارکی بر اساس فراوانی طیف‌ها برای ردیابی تاریخچه ترکیب و تکامل\u202b." +
                            "\n" +
                            "\n" +
                            "\n" +
                            ": کاربردها و پیش‌بینی‌ها\n" +
                            "\n" +
                            "تشخیص ترکیب و منشأ شیمیایی: بررسی درصد آلی‌ها و مواد فرّار. " +
                            "هدایت مأموریت‌هایی مثل لوکی و پسیچ برای بازدید از دی تایپ, پی تایپ و ام تایپ سیارک‌ها و درک تنوع طیفی واقعیِ سیارک‌ها در کمربند تروجان. " +
                            "تلفیق داده‌های گاییا، متینوس برای گسسته‌سازی طبقات جدید مانند زد کلس و افزایش نمونه به چند هزار سیارک طبقه‌بندی‌شده بیشتر تا سال ۲۰۲۶. " +
                            "تحلیل تکامل طیفی با واترینگ فضایی برای جدول زمانی تغییر طیف‌ها بر اثر فاز فضایی و تابش خورشیدی\u202b." +
                            "\n" +
                            "\n" +
                            "\n" +
                            ": نقش در علم و فناوری\n" +
                            "\n" +
                            "ارتقاء دانش درباره انتقال آب و مواد فرّار به زمین اولیه از طریق سیارک‌های سی تایپ. " +
                            "درک روندهای تمایز در ساختار داخلی سیارک‌ها مانند وی تایپ و ام تایپ و ارتباط آنها با سیاره‌شناسی. " +
                            "استفاده از طبقه‌بندی طیفی در هدف‌گذاری مأموریت‌های نمونه‌برداری آینده. " +
                            "توسعه ابزارهای تحلیل طیف، الگوریتم‌های ای آی و ام ال برای مدیریت مجموعه‌داده‌های بزرگ طیفی و پاسخ سریع به‌روزرسانی‌های گایا\u202b." +
                            "\n" +
                            "\n" +
                            "\n" +
                            ": بخش نظری برجسته\n" +
                            "\n" +
                            "کلاس سی تایپ: شامل حدود ۷۵٪ سیارک‌ها، با البدو بسیار پایین (≈۰٫۰۳–۰٫۱۰)، غنی از مواد آلی و هیدراته. " +
                            "کلاس اس تایپ: حدود ۱۷٪ جمعیت، البدو ~۰٫۲۰، دارای جذب سیلیکاتی. " +
                            "کلاس ام تایپ (ایکس کامپلکس): حدود ۵٪ مطابق تلون، شامل پیچی تا 222 کیلومتر با ضخیم فلزی و ماموریت پیچی در راه است (ورود ۲۰۲۹). " +
                            "کلاس دی تایپ: طیف بسیار قرمز، البدو بسیار کم، منبع احتمالی تروجان ها و کوپر بلت، نمونه‌ احتمالی شهاب‌سنگ تاگیش لیت. " +
                            "کلاس پی تایپ: طیف قرمز بی‌ویژگی، نوربازتاب کم، حدود ۳۳ مورد شناخته‌شده در کمربند بیرونی و تروجان ها. " +
                            "کلاس زد تایپ: بسیار قرمز، معرفی شده در ۲۰۲۲ با تفکیک بهتر در تحلیل ترکیبی طیف + البدو، بخش جدید در مطالعات اخیر\u202b."
                )
                val textmortabet = listOf("سیارک های ترکیبی", "سیارک های نوری", "سیارک های فیزیکی", "سیارک های منشادار", "سیارک های مداری", "سیارک های بازالتی")
                val imagemortabet = listOf(
                    painterResource(R.drawable.asteroidtarkibi),
                    painterResource(R.drawable.astroidnori),
                    painterResource(R.drawable.astroidfiziki),
                    painterResource(R.drawable.astroidmanshaedar),
                    painterResource(R.drawable.astroidmadari),
                    painterResource(R.drawable.astroidbazalati)
                )
                val tarkib = textmortabet.zip(imagemortabet)
                Column(
                    modifier = Modifier
                        .padding(25.dp)
                        .fillMaxSize()
                ) {
                    Box(modifier = Modifier.fillMaxSize())
                    {
                        LazyColumn(
                            horizontalAlignment = Alignment.CenterHorizontally
                        ) {
                            items(textsiaraketayarifi) { letter ->
                                Column(modifier = Modifier.padding(30.dp)) {
                                    Row {
                                        Image(painter = painterResource(id = R.drawable.astroidteifi)
                                            , contentDescription = null , contentScale = ContentScale.Crop
                                            , modifier = Modifier.size(100.dp))
                                        Column {
                                            Text("")
                                            Row(modifier = Modifier.fillMaxWidth()
                                                ,horizontalArrangement = Arrangement.End
                                                , verticalAlignment = Alignment.CenterVertically) {
                                                Text("سیارک های طیفی" , fontSize = 20.sp  , color = Color.White , style = TextStyle(
                                                    shadow = Shadow(
                                                        color = Color(0xFFFFFFFF),
                                                        offset = Offset(0f ,0f)
                                                        , blurRadius = 20f
                                                    )
                                                ), maxLines = 1)
                                            }
                                        }
                                    }
                                }
                                Box(
                                    modifier = Modifier.fillMaxSize(),
                                    contentAlignment = Alignment.CenterStart,
                                ) {
                                    Column {
                                        Text(
                                            "$letter",
                                            fontSize = 20.sp,
                                            color = Color(0xFFFFFFFF),
                                            lineHeight = 32.sp,
                                            textAlign = TextAlign.Right
                                            , style = TextStyle(
                                                shadow = Shadow(
                                                    color = Color(0xFFFFFFFF),
                                                    offset = Offset(0f ,0f)
                                                    , blurRadius = 20f
                                                )
                                            )
                                        )
                                        Text("")
                                        Text("")
                                        Text("")
                                        Text(
                                            "موضوعات مرتبط",
                                            textAlign = TextAlign.Right,
                                            modifier = Modifier.fillMaxWidth(),
                                            fontSize = 30.sp,
                                            color = Color.White
                                            , style = TextStyle(
                                                shadow = Shadow(
                                                    color = Color(0xFFFFFFFF),
                                                    offset = Offset(0f ,0f)
                                                    , blurRadius = 20f
                                                )
                                            )
                                        )
                                        Text("")
                                        LazyRow(reverseLayout = true) {
                                            items(tarkib) { (matnha, aksha) ->
                                                Card(
                                                    modifier = Modifier
                                                        .width(250.dp)
                                                        .height(120.dp)
                                                        .padding(20.dp)
                                                        .clip(shape = RoundedCornerShape(100.dp)),
                                                    shape = RectangleShape,
                                                    colors = CardDefaults.cardColors(
                                                        containerColor = Color(
                                                            0xFF0707AD
                                                        )
                                                    )
                                                ) {
                                                    Box(
                                                        modifier = Modifier.fillMaxSize(),
                                                        contentAlignment = Alignment.CenterEnd
                                                    ) {
                                                        Image(
                                                            painter = painterResource(id = R.drawable.card),
                                                            contentScale = ContentScale.Crop,
                                                            contentDescription = null,
                                                            modifier = Modifier.fillMaxSize()
                                                        )
                                                        Button(
                                                            modifier = Modifier.fillMaxSize(
                                                            ).indication(indication = null ,
                                                                interactionSource = remember { MutableInteractionSource() }), onClick = {
                                                                if (matnha == "سیارک های ترکیبی") {
                                                                    currentScreen = "astroidtarkibi"
                                                                    backap = false
                                                                }
                                                                if (matnha == "سیارک های طیفی") {
                                                                    backap = false
                                                                    currentScreen = "astroidteifi"
                                                                }
                                                                if (matnha == "سیارک های نوری") {
                                                                    currentScreen = "astroidnoori"
                                                                    backap = false
                                                                }
                                                                if (matnha == "سیارک های فیزیکی") {
                                                                    backap = false
                                                                    currentScreen = "astroidfiziki"
                                                                }
                                                                if (matnha == "سیارک های منشادار") {
                                                                    backap = false
                                                                    currentScreen = "astroidmanshaedar"
                                                                }
                                                                if (matnha == "سیارک های مداری") {
                                                                    backap = false
                                                                    currentScreen = "astroidmadari"
                                                                }
                                                                if (matnha == "سیارک های بازالتی") {
                                                                    backap = false
                                                                    currentScreen = "astroidbazalati"
                                                                }
                                                            }, colors = ButtonDefaults.buttonColors(
                                                                contentColor = Color.Transparent,
                                                                containerColor = Color.Transparent
                                                            )) {
                                                        }
                                                        Row() {
                                                            Spacer(modifier = Modifier.width(10.dp))
                                                            Column {
                                                                Spacer(modifier = Modifier.height(9.dp))
                                                                Text(
                                                                    "$matnha",
                                                                    color = Color.White,
                                                                    fontSize = 20.sp
                                                                    , style = TextStyle(
                                                                        shadow = Shadow(
                                                                            color = Color(0xFFFFFFFF),
                                                                            offset = Offset(0f ,0f)
                                                                            , blurRadius = 20f
                                                                        )
                                                                    )
                                                                )
                                                            }
                                                            Spacer(modifier = Modifier.width(15.dp))
                                                            Image(
                                                                painter = aksha,
                                                                contentDescription = null,
                                                                contentScale = ContentScale.Crop,
                                                                modifier = Modifier.size(50.dp)
                                                            )
                                                            Spacer(modifier = Modifier.width(15.dp))
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        Text("")
                                        Text("")
                                        Text("")
                                    }
                                }
                            }
                        }
                        var count by remember { mutableStateOf(0) }
                        IconButton(
                            onClick = { count++ },
                            modifier = Modifier
                                .size(70.dp)
                                .align(Alignment.BottomEnd)
                                .indication(indication = null ,
                                    interactionSource = remember { MutableInteractionSource() }),
                            colors = IconButtonDefaults.iconButtonColors(
                                containerColor = Color(0xFF030A33)
                            )
                        ) {
                            if (count % 2 == 0) {
                                Icon(
                                    imageVector = Icons.Default.Favorite,
                                    contentDescription = null,
                                    modifier = Modifier.size(50.dp),
                                    tint = Color.Transparent
                                )
                                Icon(
                                    imageVector = Icons.Default.FavoriteBorder,
                                    contentDescription = null,
                                    modifier = Modifier.size(50.dp),
                                    tint = Color.White
                                )
                            }
                            if (count % 2 == 1) {
                                Icon(
                                    imageVector = Icons.Default.Favorite,
                                    contentDescription = null,
                                    modifier = Modifier.size(50.dp),
                                    tint = Color.White
                                )
                                Icon(
                                    imageVector = Icons.Default.FavoriteBorder,
                                    contentDescription = null,
                                    modifier = Modifier.size(50.dp),
                                    tint = Color.White
                                )
                            }
                        }
                    }
                }
            }
        }
    }
}
@Composable
fun AstroidNoori(){
    Image(
        painter = painterResource(id = R.drawable.app_back),
        contentScale = ContentScale.Crop,
        contentDescription = null
    )
    when(currentScreen) {
        "astroidnoori" -> {
            Column {
                Card(
                    modifier = Modifier
                        .fillMaxWidth()
                        .height(32.5.dp),
                    shape = RectangleShape,
                    colors = CardDefaults.cardColors(containerColor = Color(0xFF030A33))
                ) {
                }
                Column(){
                    Card(
                        modifier = Modifier
                            .fillMaxWidth()
                            .height(50.dp),
                        shape = RectangleShape,
                        colors = CardDefaults.cardColors(containerColor = Color(0xFF0707AD))
                    ) {
                        Row(modifier = Modifier.padding(10.dp)) {
                            IconButton(onClick = {currentScreen = "asli3"
                                backap = true
                            } , colors = IconButtonDefaults.iconButtonColors(contentColor = Color.White)
                                , modifier = Modifier.indication(indication = null ,
                                    interactionSource = remember { MutableInteractionSource() })){
                                Icon(imageVector = Icons.Outlined.ArrowBack, contentDescription = null , modifier = Modifier.size(40.dp))
                            }
                            IconButton(
                                onClick = {},
                                colors = IconButtonDefaults.iconButtonColors(contentColor = Color.White),
                                modifier = Modifier.indication(indication = null ,
                                    interactionSource = remember { MutableInteractionSource() })
                            ) {
                                Icon(imageVector = Icons.Default.Info, contentDescription = null)
                            }
                            IconButton(
                                onClick = {},
                                colors = IconButtonDefaults.iconButtonColors(contentColor = Color.White),
                                modifier = Modifier.indication(indication = null ,
                                    interactionSource = remember { MutableInteractionSource() })
                            ) {
                                Icon(imageVector = Icons.Default.Share, contentDescription = null)
                            }
                            Row(
                                modifier = Modifier.fillMaxWidth(),
                                horizontalArrangement = Arrangement.End,
                                verticalAlignment = Alignment.CenterVertically
                            ) {
                                Text("سیارک های نوری", fontSize = 20.sp, color = Color.White  , maxLines = 1 , fontWeight = FontWeight.ExtraBold)
                                IconButton(onClick = {expanded = true},
                                    modifier = Modifier.size(50.dp)
                                        .indication(indication = null ,
                                            interactionSource = remember { MutableInteractionSource() }),
                                    colors = IconButtonDefaults.iconButtonColors(contentColor = Color.White)) {
                                    Icon(imageVector = Icons.Default.Menu, contentDescription = null)
                                }
                            }
                        }
                    }
                }

                var textsiarakenoori = listOf(
                    ": معرفی کلی\n" +
                            "\n" +
                            "سیارک‌های نوری، اجرامی هستند که ویژگی‌های سطحی و ترکیب آن‌ها از طریق تحلیل بازتاب نور مرئی و نزدیک‌به‌مادون‌قرمز تعیین می‌شود. این سیارک‌ها با بهره‌گیری از رنگ، روشنایی ظاهری، و بازتاب‌پذیری (آلبدو)، در رده‌های مختلف طیفی قرار می‌گیرند. این روش رده‌بندی به دلیل سرعت، سادگی و امکان کاربرد در هزاران جرم آسمانی، کاربرد گسترده‌ای در پروژه‌هایی مانند گایا، اس‌دی‌اس‌اس و ال‌اس‌اس‌تی یافته است. تا سال ۲۰۲۵، صدها هزار سیارک با داده‌های نوری در سامانه‌های مختلف طبقه‌بندی شده‌اند\u202b." +
                            "\n" +
                            "\n" +
                            "\n" +
                            ": چارچوب‌های رده‌بندی و دسته‌بندی\n" +
                            "\n" +
                            "بر پایه سامانه تالن: رده‌های اصلی شامل سی‌تایپ (کربن‌دار)، اس‌تایپ (سنگی سیلیکاتی)، و اکس‌تایپ (فلزی و نامشخص) هستند. رده‌های فرعی مانند دی‌تایپ (فوق‌قرمز)، ای‌تایپ (بازتاب ‌پذیری بالا)، و وی‌تایپ (مشابه وستا) نیز تعریف شده‌اند. " +
                            "در سامانه بوس دی‌مئو: تفکیک دقیق‌تر به مجموعه‌های طیفی مانند مجموعه سی، مجموعه اس، مجموعه اکس و رده‌های کمتر رایج مانند زد تایپ (فوق‌العاده قرمز) صورت می‌گیرد. " +
                            "رده‌بندی نوری همچنین بر پایه ویژگی‌های فوتومتری انجام می‌شود؛ مانند شاخص‌های رنگی (مثلاً وی آر و آر آی) و بازتاب‌پذیری اندازه‌گیری‌شده در نور مرئی. " +
                            "توزیع مداری نیز مؤثر است: سیارک‌های رده اس معمولاً در کمربند داخلی، سی‌تایپ‌ها در نواحی میانی و بیرونی، و دی‌تایپ‌ها و پی‌تایپ‌ها در مناطق دورتری مانند تروجان‌ها یافت می‌شوند\u202b." +
                            "\n" +
                            "\n" +
                            "\n" +
                            ": اصول و مبانی نظری کلیدی\n" +
                            "\n" +
                            "سنجش نوری با فیلترهای چندگانه (مانند آگریزی) ابزاری مؤثر برای اندازه‌گیری رنگ و در نتیجه ترکیب سطحی است. " +
                            "تحلیل مؤلفه‌های اصلی بر روی داده‌های چندصافی برای جداسازی رده‌های طیفی استفاده می‌شود. " +
                            "روش‌های یادگیری ماشینی مانند طبقه‌بندی بیز ساده، درخت تصمیم و روش بردار پشتیبان برای رده‌بندی دقیق‌تر سیارک‌ها از طریق داده‌های نوری استفاده می‌شوند. " +
                            "ترکیب داده‌های نوری با داده‌های بازتاب‌پذیری باعث جداسازی بهتر رده‌های اکس‌تایپ، مانند پی‌تایپ (کم‌چگال و تیره) و ام‌تایپ (فلزی)، شده است. " +
                            "بررسی تحول نوری سیارک‌ها بر اثر فرسایش فضایی نشان می‌دهد که با گذر زمان، سطح سیارک‌ها به رنگ قرمزتر و بازتاب‌پذیری کمتر گرایش می‌یابد\u202b." +
                            "\n" +
                            "\n" +
                            "\n" +
                            ": کاربردها و پیش‌بینی‌ها\n" +
                            "\n" +
                            "امکان شناسایی ترکیب شیمیایی سطح سیارک‌ها با استفاده از داده‌های ساده‌تر و گسترده‌تر نسبت به طیف‌نگاری. " +
                            "پایه‌گذاری رده‌بندی گسترده برای مأموریت‌هایی مانند لوکی و سایکی که به سراغ سیارک‌هایی از رده‌های متفاوت می‌روند. " +
                            "ترکیب داده‌های پروژه‌های گایا، اس‌دی‌اس‌اس، و ال‌اس‌اس‌تی باعث گسترش چشمگیر رده‌بندی‌های نوری و شناسایی رده‌های کمتر شناخته‌شده مانند زد تایپ شده است. " +
                            "پیش‌بینی می‌شود با ادامه رصدها تا پایان دهه، رده‌بندی نوری بیش از یک میلیون سیارک امکان‌پذیر باشد\u202b." +
                            "\n" +
                            "\n" +
                            "\n" +
                            ": نقش در علم و فناوری\n" +
                            "\n" +
                            "شناخت منشأ و تکامل مواد اولیه منظومه شمسی با توجه به توزیع ترکیبات سطحی در میان سیارک‌ها. " +
                            "پیش‌بینی خاستگاه شهاب‌سنگ‌ها بر پایه تطابق بین رنگ و بازتاب‌پذیری آن‌ها با سیارک‌های شناخته‌شده. " +
                            "کاربرد رده‌بندی نوری در مدیریت مأموریت‌های فضایی و تعیین اولویت اهداف نمونه‌برداری. " +
                            "توسعه الگوریتم‌های هوش مصنوعی برای تحلیل میلیون‌ها نقطه داده نوری و ایجاد سامانه‌های رده‌بندی خودکار\u202b." +
                            "\n" +
                            "\n" +
                            "\n" +
                            ": بخش نظری برجسته\n" +
                            "\n" +
                            "رده سی‌تایپ (کربن‌دار): شامل حدود ۷۵٪ کل سیارک‌ها، با بازتاب‌پذیری بسیار پایین (زیر ۰٫۰۷)، غنی از مواد آلی و یخ‌های نهفته. " +
                            "رده اس‌تایپ (سنگی): حدود ۱۷٪، دارای بازتاب‌پذیری متوسط (~۰٫۲)، با جذب نوری در محدوده نزدیک ۱ و ۲ میکرون، مشابه با شهاب‌سنگ‌های عادی. " +
                            "رده ام‌تایپ (فلزی): بخشی از مجموعه اکس‌تایپ، با بازتاب‌پذیری متوسط تا بالا، فاقد ویژگی طیفی مشخص، مظنون به داشتن هسته فلزی. " +
                            "رده دی‌تایپ (فوق‌قرمز): طیف بسیار مایل به قرمز، بازتاب‌پذیری بسیار کم، احتمالاً منشأ گرفته از مناطق خارجی منظومه شمسی. " +
                            "رده زد-تایپ (فوق‌العاده قرمز): معرفی‌شده در رده‌بندی‌های نوین، با شیب طیفی شدید و احتمال ترکیب آلی یا یخ‌های دگرگون‌شده، بسیار نادر و موضوع مطالعات اخیر\u202b."
                )
                val textmortabet = listOf("سیارک های ترکیبی", "سیارک های طیفی", "سیارک های فیزیکی", "سیارک های منشادار", "سیارک های مداری", "سیارک های بازالتی")
                val imagemortabet = listOf(
                    painterResource(R.drawable.asteroidtarkibi),
                    painterResource(R.drawable.astroidteifi),
                    painterResource(R.drawable.astroidfiziki),
                    painterResource(R.drawable.astroidmanshaedar),
                    painterResource(R.drawable.astroidmadari),
                    painterResource(R.drawable.astroidbazalati)
                )
                val tarkib = textmortabet.zip(imagemortabet)
                Column(
                    modifier = Modifier
                        .padding(25.dp)
                        .fillMaxSize()
                ) {
                    Box(modifier = Modifier.fillMaxSize())
                    {
                        LazyColumn(
                            horizontalAlignment = Alignment.CenterHorizontally
                        ) {
                            items(textsiarakenoori) { letter ->
                                Column(modifier = Modifier.padding(30.dp)) {
                                    Row {
                                        Image(painter = painterResource(id = R.drawable.astroidnori)
                                            , contentDescription = null , contentScale = ContentScale.Crop
                                            , modifier = Modifier.size(100.dp))
                                        Column {
                                            Text("")
                                            Row(modifier = Modifier.fillMaxWidth()
                                                ,horizontalArrangement = Arrangement.End
                                                , verticalAlignment = Alignment.CenterVertically) {
                                                Text("سیارک های نوری" , fontSize = 20.sp  , color = Color.White , style = TextStyle(
                                                    shadow = Shadow(
                                                        color = Color(0xFFFFFFFF),
                                                        offset = Offset(0f ,0f)
                                                        , blurRadius = 20f
                                                    )
                                                ), maxLines = 1)
                                            }
                                        }
                                    }
                                }
                                Box(
                                    modifier = Modifier.fillMaxSize(),
                                    contentAlignment = Alignment.CenterStart,
                                ) {
                                    Column {
                                        Text(
                                            "$letter",
                                            fontSize = 20.sp,
                                            color = Color(0xFFFFFFFF),
                                            lineHeight = 32.sp,
                                            textAlign = TextAlign.Right
                                            , style = TextStyle(
                                                shadow = Shadow(
                                                    color = Color(0xFFFFFFFF),
                                                    offset = Offset(0f ,0f)
                                                    , blurRadius = 20f
                                                )
                                            )
                                        )
                                        Text("")
                                        Text("")
                                        Text("")
                                        Text(
                                            "موضوعات مرتبط",
                                            textAlign = TextAlign.Right,
                                            modifier = Modifier.fillMaxWidth(),
                                            fontSize = 30.sp,
                                            color = Color.White
                                            , style = TextStyle(
                                                shadow = Shadow(
                                                    color = Color(0xFFFFFFFF),
                                                    offset = Offset(0f ,0f)
                                                    , blurRadius = 20f
                                                )
                                            )
                                        )
                                        Text("")
                                        LazyRow(reverseLayout = true) {
                                            items(tarkib) { (matnha, aksha) ->
                                                Card(
                                                    modifier = Modifier
                                                        .width(250.dp)
                                                        .height(120.dp)
                                                        .padding(20.dp)
                                                        .clip(shape = RoundedCornerShape(100.dp)),
                                                    shape = RectangleShape,
                                                    colors = CardDefaults.cardColors(
                                                        containerColor = Color(
                                                            0xFF0707AD
                                                        )
                                                    )
                                                ) {
                                                    Box(
                                                        modifier = Modifier.fillMaxSize(),
                                                        contentAlignment = Alignment.CenterEnd
                                                    ) {
                                                        Image(
                                                            painter = painterResource(id = R.drawable.card),
                                                            contentScale = ContentScale.Crop,
                                                            contentDescription = null,
                                                            modifier = Modifier.fillMaxSize()
                                                        )
                                                        Button(
                                                            modifier = Modifier.fillMaxSize(
                                                            ).indication(indication = null ,
                                                                interactionSource = remember { MutableInteractionSource() }), onClick = {
                                                                if (matnha == "سیارک های ترکیبی") {
                                                                    currentScreen = "astroidtarkibi"
                                                                    backap = false
                                                                }
                                                                if (matnha == "سیارک های طیفی") {
                                                                    backap = false
                                                                    currentScreen = "astroidteifi"
                                                                }
                                                                if (matnha == "سیارک های نوری") {
                                                                    currentScreen = "astroidnoori"
                                                                    backap = false
                                                                }
                                                                if (matnha == "سیارک های فیزیکی") {
                                                                    backap = false
                                                                    currentScreen = "astroidfiziki"
                                                                }
                                                                if (matnha == "سیارک های منشادار") {
                                                                    backap = false
                                                                    currentScreen = "astroidmanshaedar"
                                                                }
                                                                if (matnha == "سیارک های مداری") {
                                                                    backap = false
                                                                    currentScreen = "astroidmadari"
                                                                }
                                                                if (matnha == "سیارک های بازالتی") {
                                                                    backap = false
                                                                    currentScreen = "astroidbazalati"
                                                                }
                                                            }, colors = ButtonDefaults.buttonColors(
                                                                contentColor = Color.Transparent,
                                                                containerColor = Color.Transparent
                                                            )) {
                                                        }
                                                        Row() {
                                                            Spacer(modifier = Modifier.width(10.dp))
                                                            Column {
                                                                Spacer(modifier = Modifier.height(9.dp))
                                                                Text(
                                                                    "$matnha",
                                                                    color = Color.White,
                                                                    fontSize = 20.sp
                                                                    , style = TextStyle(
                                                                        shadow = Shadow(
                                                                            color = Color(0xFFFFFFFF),
                                                                            offset = Offset(0f ,0f)
                                                                            , blurRadius = 20f
                                                                        )
                                                                    )
                                                                )
                                                            }
                                                            Spacer(modifier = Modifier.width(15.dp))
                                                            Image(
                                                                painter = aksha,
                                                                contentDescription = null,
                                                                contentScale = ContentScale.Crop,
                                                                modifier = Modifier.size(50.dp)
                                                            )
                                                            Spacer(modifier = Modifier.width(15.dp))
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        Text("")
                                        Text("")
                                        Text("")
                                    }
                                }
                            }
                        }
                        var count by remember { mutableStateOf(0) }
                        IconButton(
                            onClick = { count++ },
                            modifier = Modifier
                                .size(70.dp)
                                .align(Alignment.BottomEnd)
                                .indication(indication = null ,
                                    interactionSource = remember { MutableInteractionSource() }),
                            colors = IconButtonDefaults.iconButtonColors(
                                containerColor = Color(0xFF030A33)
                            )
                        ) {
                            if (count % 2 == 0) {
                                Icon(
                                    imageVector = Icons.Default.Favorite,
                                    contentDescription = null,
                                    modifier = Modifier.size(50.dp),
                                    tint = Color.Transparent
                                )
                                Icon(
                                    imageVector = Icons.Default.FavoriteBorder,
                                    contentDescription = null,
                                    modifier = Modifier.size(50.dp),
                                    tint = Color.White
                                )
                            }
                            if (count % 2 == 1) {
                                Icon(
                                    imageVector = Icons.Default.Favorite,
                                    contentDescription = null,
                                    modifier = Modifier.size(50.dp),
                                    tint = Color.White
                                )
                                Icon(
                                    imageVector = Icons.Default.FavoriteBorder,
                                    contentDescription = null,
                                    modifier = Modifier.size(50.dp),
                                    tint = Color.White
                                )
                            }
                        }
                    }
                }
            }
        }
    }
}
@Composable
fun AstroidFiziki(){
    Image(
        painter = painterResource(id = R.drawable.app_back),
        contentScale = ContentScale.Crop,
        contentDescription = null
    )
    when(currentScreen) {
        "astroidfiziki" -> {
            Column {
                Card(
                    modifier = Modifier
                        .fillMaxWidth()
                        .height(32.5.dp),
                    shape = RectangleShape,
                    colors = CardDefaults.cardColors(containerColor = Color(0xFF030A33))
                ) {
                }
                Column(){
                    Card(
                        modifier = Modifier
                            .fillMaxWidth()
                            .height(50.dp),
                        shape = RectangleShape,
                        colors = CardDefaults.cardColors(containerColor = Color(0xFF0707AD))
                    ) {
                        Row(modifier = Modifier.padding(10.dp)) {
                            IconButton(onClick = {currentScreen = "asli3"
                                backap = true
                            } , colors = IconButtonDefaults.iconButtonColors(contentColor = Color.White)
                                , modifier = Modifier.indication(indication = null ,
                                    interactionSource = remember { MutableInteractionSource() })){
                                Icon(imageVector = Icons.Outlined.ArrowBack, contentDescription = null , modifier = Modifier.size(40.dp))
                            }
                            IconButton(
                                onClick = {},
                                colors = IconButtonDefaults.iconButtonColors(contentColor = Color.White),
                                modifier = Modifier.indication(indication = null ,
                                    interactionSource = remember { MutableInteractionSource() })
                            ) {
                                Icon(imageVector = Icons.Default.Info, contentDescription = null)
                            }
                            IconButton(
                                onClick = {},
                                colors = IconButtonDefaults.iconButtonColors(contentColor = Color.White),
                                modifier = Modifier.indication(indication = null ,
                                    interactionSource = remember { MutableInteractionSource() })
                            ) {
                                Icon(imageVector = Icons.Default.Share, contentDescription = null)
                            }
                            Row(
                                modifier = Modifier.fillMaxWidth(),
                                horizontalArrangement = Arrangement.End,
                                verticalAlignment = Alignment.CenterVertically
                            ) {
                                Text("سیارک های فیزیکی", fontSize = 20.sp, color = Color.White  , maxLines = 1 , fontWeight = FontWeight.ExtraBold)
                                IconButton(onClick = {expanded = true},
                                    modifier = Modifier.size(50.dp)
                                        .indication(indication = null ,
                                            interactionSource = remember { MutableInteractionSource() }),
                                    colors = IconButtonDefaults.iconButtonColors(contentColor = Color.White)) {
                                    Icon(imageVector = Icons.Default.Menu, contentDescription = null)
                                }
                            }
                        }
                    }
                }

                var textsiaraketiziki = listOf(
                    ": معرفی کلی\n" +
                            "\n" +
                            "سیارک‌های فیزیکی شامل ویژگی‌های اندازه، جرم، چگالی، سرعت چرخش، ساختار داخلی و مقاومت مکانیکی اجرام سیارکی هستند. این ویژگی‌ها از طریق ترکیبی از داده‌های طیفی، حرارتی، تبدیل نوری و مأموریت‌های فضایی (مانند هایابوسا۲، دارت، روزتا) مشخص شده‌اند. اطلاعات فیزیکی دقیق برای صدها جرم سیارکی تا سال ۲۰۲۵ در دسترس است\u202b." +
                            "\n" +
                            "\n" +
                            "\n" +
                            ": چارچوب‌های رده‌بندی و دسته‌بندی\n" +
                            "\n" +
                            "بر اساس اندازه: سیارک‌های بزرگ (۱۰۰ کیلومتر)، متوسط (~۱۰–۱۰۰ کیلومتر)، کوچک (<۱۰ کیلومتر). " +
                            "بر اساس چگالی و ساختار: باستانی (چگالی بالا)، توده‌ریز (چگالی پایین، خلأ زیاد)، تجمیعی. " +
                            "بر اساس سرعت چرخش و تاثیر فیزیک: سریع‌چرخان‌ها (دوره ۲٫۲ ساعت)، ناپایدارها (تجمع گریز)، آهسته‌چرخان‌ها (۵۰ ساعت). " +
                            "بر اساس مقاومت مکانیکی: بدنه مقاوم (چسبندگی ۵۰)، بدنه ضعیف (چسبندگی چند)، دانه‌ای یا توده‌ای\u202b." +
                            "\n" +
                            "\n" +
                            "\n" +
                            ": اصول و مبانی نظری کلیدی\n" +
                            "\n" +
                            "اندازه و جرم از طریق اندازه‌گیری نور مرئی و حرارتی و محاسبه با مدل استاندارد حرارتی یا نرث و هلال‌سازی حرارتی استخراج می‌شوند. " +
                            "چگالی کل از تقسیم جرم بر حجم بدست می‌آید؛ جرم توسط حرکت ماهواره‌ها، تحلیل مدار و روش‌های دینامیکی تعیین می‌شود (مثلاً سیستم دوتایی تکنولوژی دارت برای دیمورفوس). " +
                            "سرعت چرخش با تحلیل منحنی نور (هنگام گذر تلسکوپی مانند تس) ثبت می‌شود؛ برای بیش از ۴۵۲۱ سیارک دوره چرخش با دقت ~۱۰٪ تعیین شده است. " +
                            "ساختار داخلی با ترکیب چگالی کل و درصد خلأ (ماکروپروسیتی) مشخص می‌شود؛ برای دیمورفوس، چگالی در حدود ۱٬۵۰۰ تا ۲٬۴۰۰ کیلوگرم بر متر مکعب گزارش شده که نشان‌دهنده توده‌ریز بودن آن است. " +
                            "مقاومت سطح و چسبندگی از داده‌های برخورد کنترل‌شده (مثل دارت) و مدل‌سازی عددی استخراج می‌شود؛ مقاومت کمتر از چند پاسکال برای دیمورفوس گزارش شده است\u202b.." +
                            "\n" +
                            "\n" +
                            "\n" +
                            ": کاربردها و پیش‌بینی‌ها\n" +
                            "\n" +
                            "تعیین ریسک برخورد زمین: ویژگی‌های فیزیکی مانند چگالی و چرخش نقش کلیدی در پیش‌بینی خطر دارند؛ برای مثال ۲۰۲۴ وای آر 4 با قطر تازه محاسبه‌شده توسط جست اندازه مشابه سیارک تونگوسکا دارد. " +
                            "آمادگی مأموریت‌های فضایی: اندازه‌گیری چگالی و ساختار داخلی برای مأموریت‌هایی مانند هایابوسا ۲، لوکی و فیسکی اهمیت دارد. " +
                            "ایجاد مدل‌های دقیق بررسی چرخش، شکل و فاززیادفضایی برای شبیه‌سازی تکامل بلندمدت: داده‌های تس و تحلیل دوره نوری منجر به شناسایی روندهای چگالی میان رده‌های مختلف سیارک شده‌اند. " +
                            "پیش‌بینی افزایش داده‌های فیزیکی با ادامه مأموریت‌های آی آر مانند نیو سورویور، اسپرکس و ماهواره جدید گایا تا پایان ۲۰۲۶–۲۰۲۷\u202b." +
                            "\n" +
                            "\n" +
                            "\n" +
                            ": نقش در علم و فناوری\n" +
                            "\n" +
                            "درک ترکیب داخلی اجرام کوچک به شناخت منشأ سیارک‌ها و مسیر تجمع شهاب‌سنگ‌ها کمک می‌کند. " +
                            "استفاده در برنامه‌های دفاع سیاره‌ای: بررسی تماس‌ پذیری سیارک و پاسخ به برخوردهای مصنوعی (مانند دارت). " +
                            "هدایت طراحی مأموریت‌های نمونه‌برداری مکانیزه: انتخاب هدف از میان سیارک‌های با ساختار مناسب. " +
                            "توسعه روش‌های تحلیلی دقیق در تحلیل خمات نور، مدل‌های عددی چرخش و ترکیب ای آی و ام ال برای مدیریت پایگاه‌های داده بزرگ\u202b." +
                            "\n" +
                            "\n" +
                            "\n" +
                            ": بخش نظری برجسته\n" +
                            "\n" +
                            "سیارک (۱۶۲۱۷۳) ریوگو: دارای قطر ~۰٫۸۵–۰٫۸۸ کیلومتر، چگالی تقریبی ۱٫۱۹±۰٫۰۳ گرم سانتی متر مکعب، ساختار توده‌ریز با تقریباً ۵۰٪ خلأ، سطح دانه‌ای ریز به میلی‌متری. " +
                            "سیارک دیمورفوس (ماهواره دیدیموس): چگالی در حدود ۱٬۵۰۰–۲٬۴۰۰ کیلوگرم متر مکعب، چسبندگی سطح <۵۰ پاسکال، ساختار توده‌ریز، تجربه آزمایشی دارت آن را به یک مطالعه کلیدی تبدیل کرده است. " +
                            "سیارک ۲۰۲۴ وای آر 4: اندازه دقیق با جست در مارس ۲۰۲۵ تعیین شد؛ جرم و ساختار هنوز تخمینی است اما احتمالاً شبیه سیارک‌های سنگی-بزرگ است. " +
                            "سیارک (۲۱۶) کلپاترا: شکل نامتعارف شبیه دمبل، دو ماهواره، قطر ~۱۲۰ کیلومتر، چگالی ~۳٫۶±۰٫۴ گرم سانتی متر مکعب با حفره‌خواری بالا (~۳۰–۵۰٪)، احتمال ساختار توده‌ریز فلزی. " +
                            "سیارک فعال ۲۰۱۰ ال اچ 15: شعاع هسته ~۱٫۱۱ کیلومتر، بازتاب‌پذیری هندسی ~۰٫۰۵، فعالیت گردوغبار معتبر از ژوئن جولای ۲۰۱۹ مشاهده شد که مکان فیزیکی سابلیمیشن را در کمربند سیارکی بررسی کرده است\u202b."
                )
                val textmortabet = listOf("سیارک های ترکیبی", "سیارک های طیفی", "سیارک های نوری", "سیارک های منشادار", "سیارک های مداری", "سیارک های بازالتی")
                val imagemortabet = listOf(
                    painterResource(R.drawable.asteroidtarkibi),
                    painterResource(R.drawable.astroidteifi),
                    painterResource(R.drawable.astroidnori),
                    painterResource(R.drawable.astroidmanshaedar),
                    painterResource(R.drawable.astroidmadari),
                    painterResource(R.drawable.astroidbazalati)
                )
                val tarkib = textmortabet.zip(imagemortabet)
                Column(
                    modifier = Modifier
                        .padding(25.dp)
                        .fillMaxSize()
                ) {
                    Box(modifier = Modifier.fillMaxSize())
                    {
                        LazyColumn(
                            horizontalAlignment = Alignment.CenterHorizontally
                        ) {
                            items(textsiaraketiziki) { letter ->
                                Column(modifier = Modifier.padding(30.dp)) {
                                    Row {
                                        Image(painter = painterResource(id = R.drawable.astroidfiziki)
                                            , contentDescription = null , contentScale = ContentScale.Crop
                                            , modifier = Modifier.size(100.dp))
                                        Column {
                                            Text("")
                                            Row(modifier = Modifier.fillMaxWidth()
                                                ,horizontalArrangement = Arrangement.End
                                                , verticalAlignment = Alignment.CenterVertically) {
                                                Text("سیارک های فیزیکی" , fontSize = 20.sp  , color = Color.White , style = TextStyle(
                                                    shadow = Shadow(
                                                        color = Color(0xFFFFFFFF),
                                                        offset = Offset(0f ,0f)
                                                        , blurRadius = 20f
                                                    )
                                                ), maxLines = 1)
                                            }
                                        }
                                    }
                                }
                                Box(
                                    modifier = Modifier.fillMaxSize(),
                                    contentAlignment = Alignment.CenterStart,
                                ) {
                                    Column {
                                        Text(
                                            "$letter",
                                            fontSize = 20.sp,
                                            color = Color(0xFFFFFFFF),
                                            lineHeight = 32.sp,
                                            textAlign = TextAlign.Right
                                            , style = TextStyle(
                                                shadow = Shadow(
                                                    color = Color(0xFFFFFFFF),
                                                    offset = Offset(0f ,0f)
                                                    , blurRadius = 20f
                                                )
                                            )
                                        )
                                        Text("")
                                        Text("")
                                        Text("")
                                        Text(
                                            "موضوعات مرتبط",
                                            textAlign = TextAlign.Right,
                                            modifier = Modifier.fillMaxWidth(),
                                            fontSize = 30.sp,
                                            color = Color.White
                                            , style = TextStyle(
                                                shadow = Shadow(
                                                    color = Color(0xFFFFFFFF),
                                                    offset = Offset(0f ,0f)
                                                    , blurRadius = 20f
                                                )
                                            )
                                        )
                                        Text("")
                                        LazyRow(reverseLayout = true) {
                                            items(tarkib) { (matnha, aksha) ->
                                                Card(
                                                    modifier = Modifier
                                                        .width(250.dp)
                                                        .height(120.dp)
                                                        .padding(20.dp)
                                                        .clip(shape = RoundedCornerShape(100.dp)),
                                                    shape = RectangleShape,
                                                    colors = CardDefaults.cardColors(
                                                        containerColor = Color(
                                                            0xFF0707AD
                                                        )
                                                    )
                                                ) {
                                                    Box(
                                                        modifier = Modifier.fillMaxSize(),
                                                        contentAlignment = Alignment.CenterEnd
                                                    ) {
                                                        Image(
                                                            painter = painterResource(id = R.drawable.card),
                                                            contentScale = ContentScale.Crop,
                                                            contentDescription = null,
                                                            modifier = Modifier.fillMaxSize()
                                                        )
                                                        Button(
                                                            modifier = Modifier.fillMaxSize(
                                                            ).indication(indication = null ,
                                                                interactionSource = remember { MutableInteractionSource() }), onClick = {
                                                                if (matnha == "سیارک های ترکیبی") {
                                                                    currentScreen = "astroidtarkibi"
                                                                    backap = false
                                                                }
                                                                if (matnha == "سیارک های طیفی") {
                                                                    backap = false
                                                                    currentScreen = "astroidteifi"
                                                                }
                                                                if (matnha == "سیارک های نوری") {
                                                                    currentScreen = "astroidnoori"
                                                                    backap = false
                                                                }
                                                                if (matnha == "سیارک های فیزیکی") {
                                                                    backap = false
                                                                    currentScreen = "astroidfiziki"
                                                                }
                                                                if (matnha == "سیارک های منشادار") {
                                                                    backap = false
                                                                    currentScreen = "astroidmanshaedar"
                                                                }
                                                                if (matnha == "سیارک های مداری") {
                                                                    backap = false
                                                                    currentScreen = "astroidmadari"
                                                                }
                                                                if (matnha == "سیارک های بازالتی") {
                                                                    backap = false
                                                                    currentScreen = "astroidbazalati"
                                                                }
                                                            }, colors = ButtonDefaults.buttonColors(
                                                                contentColor = Color.Transparent,
                                                                containerColor = Color.Transparent
                                                            )) {
                                                        }
                                                        Row() {
                                                            Spacer(modifier = Modifier.width(10.dp))
                                                            Column {
                                                                Spacer(modifier = Modifier.height(9.dp))
                                                                Text(
                                                                    "$matnha",
                                                                    color = Color.White,
                                                                    fontSize = 20.sp
                                                                    , style = TextStyle(
                                                                        shadow = Shadow(
                                                                            color = Color(0xFFFFFFFF),
                                                                            offset = Offset(0f ,0f)
                                                                            , blurRadius = 20f
                                                                        )
                                                                    )
                                                                )
                                                            }
                                                            Spacer(modifier = Modifier.width(15.dp))
                                                            Image(
                                                                painter = aksha,
                                                                contentDescription = null,
                                                                contentScale = ContentScale.Crop,
                                                                modifier = Modifier.size(50.dp)
                                                            )
                                                            Spacer(modifier = Modifier.width(15.dp))
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        Text("")
                                        Text("")
                                        Text("")
                                    }
                                }
                            }
                        }
                        var count by remember { mutableStateOf(0) }
                        IconButton(
                            onClick = { count++ },
                            modifier = Modifier
                                .size(70.dp)
                                .align(Alignment.BottomEnd)
                                .indication(indication = null ,
                                    interactionSource = remember { MutableInteractionSource() }),
                            colors = IconButtonDefaults.iconButtonColors(
                                containerColor = Color(0xFF030A33)
                            )
                        ) {
                            if (count % 2 == 0) {
                                Icon(
                                    imageVector = Icons.Default.Favorite,
                                    contentDescription = null,
                                    modifier = Modifier.size(50.dp),
                                    tint = Color.Transparent
                                )
                                Icon(
                                    imageVector = Icons.Default.FavoriteBorder,
                                    contentDescription = null,
                                    modifier = Modifier.size(50.dp),
                                    tint = Color.White
                                )
                            }
                            if (count % 2 == 1) {
                                Icon(
                                    imageVector = Icons.Default.Favorite,
                                    contentDescription = null,
                                    modifier = Modifier.size(50.dp),
                                    tint = Color.White
                                )
                                Icon(
                                    imageVector = Icons.Default.FavoriteBorder,
                                    contentDescription = null,
                                    modifier = Modifier.size(50.dp),
                                    tint = Color.White
                                )
                            }
                        }
                    }
                }
            }
        }
    }
}
@Composable
fun AstroidManshaedar(){
    Image(
        painter = painterResource(id = R.drawable.app_back),
        contentScale = ContentScale.Crop,
        contentDescription = null
    )
    when(currentScreen) {
        "astroidmanshaedar" -> {
            Column {
                Card(
                    modifier = Modifier
                        .fillMaxWidth()
                        .height(32.5.dp),
                    shape = RectangleShape,
                    colors = CardDefaults.cardColors(containerColor = Color(0xFF030A33))
                ) {
                }
                Column(){
                    Card(
                        modifier = Modifier
                            .fillMaxWidth()
                            .height(50.dp),
                        shape = RectangleShape,
                        colors = CardDefaults.cardColors(containerColor = Color(0xFF0707AD))
                    ) {
                        Row(modifier = Modifier.padding(10.dp)) {
                            IconButton(onClick = {currentScreen = "asli3"
                                backap = true
                            } , colors = IconButtonDefaults.iconButtonColors(contentColor = Color.White)
                                , modifier = Modifier.indication(indication = null ,
                                    interactionSource = remember { MutableInteractionSource() })){
                                Icon(imageVector = Icons.Outlined.ArrowBack, contentDescription = null , modifier = Modifier.size(40.dp))
                            }
                            IconButton(
                                onClick = {},
                                colors = IconButtonDefaults.iconButtonColors(contentColor = Color.White),
                                modifier = Modifier.indication(indication = null ,
                                    interactionSource = remember { MutableInteractionSource() })
                            ) {
                                Icon(imageVector = Icons.Default.Info, contentDescription = null)
                            }
                            IconButton(
                                onClick = {},
                                colors = IconButtonDefaults.iconButtonColors(contentColor = Color.White),
                                modifier = Modifier.indication(indication = null ,
                                    interactionSource = remember { MutableInteractionSource() })
                            ) {
                                Icon(imageVector = Icons.Default.Share, contentDescription = null)
                            }
                            Row(
                                modifier = Modifier.fillMaxWidth(),
                                horizontalArrangement = Arrangement.End,
                                verticalAlignment = Alignment.CenterVertically
                            ) {
                                Text("سیارک های منشادار", fontSize = 20.sp, color = Color.White  , maxLines = 1 , fontWeight = FontWeight.ExtraBold)
                                IconButton(onClick = {expanded = true},
                                    modifier = Modifier.size(50.dp)
                                        .indication(indication = null ,
                                            interactionSource = remember { MutableInteractionSource() }),
                                    colors = IconButtonDefaults.iconButtonColors(contentColor = Color.White)) {
                                    Icon(imageVector = Icons.Default.Menu, contentDescription = null)
                                }
                            }
                        }
                    }
                }

                var textsiarakenashaadar = listOf(
                    ": معرفی کلی\n" +
                            "\n" +
                            "سیارک‌های منشأ‌‌دار، آن دسته از اجرامی هستند که منشأ یا خانواده منشاء مشخصی دارند؛ یعنی از یک سیارک بزرگ‌تر یا منبع مشخص در کمربند سیارکی منشأ گرفته‌اند. این سیارک‌ها از بقایای خانواده‌های ناشی از برخورد یا تجزیه نمونه‌برداری مأموریت‌هایی مانند اوزیرکس (بِننو) و هایابوسا۲ (ریوگو) شناخته شده‌اند. تا سال ۲۰۲۵، چند خانواده‌ شناخته‌شده منشأ نگرش تازه‌ای درباره تاریخچه فیزیکی و شیمیایی سیارک‌ها ارائه داده‌اند\u202b." +
                            "\n" +
                            "\n" +
                            "\n" +
                            ": چارچوب‌های رده‌بندی و دسته‌بندی\n" +
                            "\n" +
                            "بر اساس خانواده والد: خانواده پولانا نو، کلاریسا، اریگون، سولامیتیس و اولا‌لیا در کمربند داخلی که منشأ بسیاری از سیارک‌های ابتدایی هستند؛ " +
                            "بر اساس رده طیفی والد: رده‌های کربنی (سی‌تایپ و بی‌تایپ)، سیلیکاتی (اس‌تایپ)، فلزی (ام‌تایپ)؛ به‌ویژه امثال سیارک پولانا (رده بی یا سی‌تایپ) و بنو (کربنیِ با مواد فرّار)؛ " +
                            "بر اساس فعالیت سابقا آب‌دار (آبدارشدگی): سیارک‌هایی که شاخص فرورفتگی ۳ دارند (نشان‌دهنده هیدراته‌بودن) مانند بنو\u202b." +
                            "\n" +
                            "\n" +
                            "\n" +
                            ": اصول و مبانی نظری کلیدی\n" +
                            "\n" +
                            "مدل‌های دینامیکی تکامل خانواده‌ها: بررسی انتقال به مدارات نزدیک زمین از طریق عبور از رزونانس‌ها (مانند وی6 یا 3:1 با مشتری) و رانش یارکوسکی. " +
                            "تحلیل ترکیبی طیف‌ و بازتاب‌پذیری (آلبدو) برای پیوند میان نمونه‌ها (مثل بنو) و خانواده والد مانند پولانا یا اریگان. " +
                            "مطالعه نمونه‌برداری شده از بننو نشان داد ترکیبات فرّار غنی (نیتروژن، آمونیاک و کربن) دارد که احتمال منشأ آن از ابر مولکولی یا دیسک پیش‌سیاره‌ای خارجی را مطرح می‌کند." +
                            "شبیه‌سازی برخوردهای باستانی منجر به جداسازی اعضای خانواده سیارکی و تشکیل سیارک‌های منشأدار امروزی است؛ بررسی طیف‌ها و هیدراته‌شدن، شرایط شکل‌گیری و گرمایش داخلی این اجرام را نشان می‌دهد\u202b." +
                            "\n" +
                            "\n" +
                            "\n" +
                            ": کاربردها و پیش‌بینی‌ها\n" +
                            "\n" +
                            "تشخیص دقیق منشأ شهاب‌سنگ‌ها با مقایسه نمونه‌های بازگشتی مانند بننو با خانواده والد اخترفضایی. " +
                            "هدایت برنامه‌های آمادگی دفاع سیاره‌ای با شناخت منشأ بالقوه سیارک‌های خطرناک (مثل بنو و ۲۰۲۴ وی آر ₄). " +
                            "ایجاد نقشه منشأ برای جمعیت سیارک‌های نزدیک‌زمین توسط داده‌های ترکیبی گایا، میتنوس و سایر سوروری ها تا پایان ۲۰۲۶ تا ۲۰۲۷. " +
                            "توانمندسازی تحلیل‌های ترکیبی طیفی و دینامیکی برای ردگیری مسیر منشأ اجرام به صورت دقیق و مدل‌سازی جوانه‌زنی خانواده‌های تازه کشف‌شده\u202b." +
                            "\n" +
                            "\n" +
                            "\n" +
                            ": نقش در علم و فناوری\n" +
                            "\n" +
                            "شناخت منشاء و مسیر تحول اجرام اولیه منظومه شمسی؛ کمک به درک چگونگی تشکیل شهاب‌سنگ‌ها و خانواده‌های سیارکی. " +
                            "بهبود مدل‌های تطبیقی بین نمونه‌های بازگشتی و داده طیفی برای تأیید منشأ. " +
                            "هدایت مأموریت‌های آینده نمونه‌برداری مانند مامیس یا کایسر به سوی خانواده‌های منشأدار با ارزش علمی بیشتر. " +
                            "توسعه ابزارهای رده‌بندی نسل جدید برای اتصال داده‌های طیفی، نوری، دینامیکی و نمونه‌برداری با استفاده از یادگیری ماشین\u202b." +
                            "\n" +
                            "\n" +
                            "\n" +
                            ": بخش نظری برجسته\n" +
                            "\n" +
                            "سیارک بنو (۱۰۱۹۵۵): منشأ داده‌شده از خانواده نیو پولانا در کمربند داخلی، دارای ویژگی فرورفتگی ۳ نشان‌دهنده آبی‌شدن، غنی از مواد فرّار و نیتروژن، آمونیاک و کربن. " +
                            "سیارک پولانا (۱۴۲): رده بی یا سی‌تایپ، والد خانواده نیوپولانا با حدود ۱٫۴ ± ۰٫۱۵ میلیارد سال سن و منشأ احتمالی بنو و دیگر نیا های اولیه. " +
                            "خانواده اریگان & سولماتیس: خانواده‌های پر تنوع طیفی با ویژگی‌های هیدراته در اریگان و سی ای تایپ، منشأ احتمالی برخی نبا های فعال. " +
                            "سیارک ۲۰۲۴ وای آر 4: دارای ترکیب شبه آر و سا تایپ یا اس‌تایپ، وارد مقیاس ریسک برخورد در فوریه ۲۰۲۵ شد؛ منشأ محتمل از کمربند داخلی از طریق عبور رزونانسی\u202b."
                )
                val textmortabet = listOf("سیارک های ترکیبی", "سیارک های طیفی", "سیارک های نوری", "سیارک های فیزیکی", "سیارک های مداری", "سیارک های بازالتی")
                val imagemortabet = listOf(
                    painterResource(R.drawable.asteroidtarkibi),
                    painterResource(R.drawable.astroidteifi),
                    painterResource(R.drawable.astroidnori),
                    painterResource(R.drawable.astroidfiziki),
                    painterResource(R.drawable.astroidmadari),
                    painterResource(R.drawable.astroidbazalati)
                )
                val tarkib = textmortabet.zip(imagemortabet)
                Column(
                    modifier = Modifier
                        .padding(25.dp)
                        .fillMaxSize()
                ) {
                    Box(modifier = Modifier.fillMaxSize())
                    {
                        LazyColumn(
                            horizontalAlignment = Alignment.CenterHorizontally
                        ) {
                            items(textsiarakenashaadar) { letter ->
                                Column(modifier = Modifier.padding(30.dp)) {
                                    Row {
                                        Image(painter = painterResource(id = R.drawable.astroidmanshaedar)
                                            , contentDescription = null , contentScale = ContentScale.Crop
                                            , modifier = Modifier.size(100.dp))
                                        Column {
                                            Text("")
                                            Row(modifier = Modifier.fillMaxWidth()
                                                ,horizontalArrangement = Arrangement.End
                                                , verticalAlignment = Alignment.CenterVertically) {
                                                Text("سیارک های منشادار" , fontSize = 20.sp  , color = Color.White , style = TextStyle(
                                                    shadow = Shadow(
                                                        color = Color(0xFFFFFFFF),
                                                        offset = Offset(0f ,0f)
                                                        , blurRadius = 20f
                                                    )
                                                ), maxLines = 1)
                                            }
                                        }
                                    }
                                }
                                Box(
                                    modifier = Modifier.fillMaxSize(),
                                    contentAlignment = Alignment.CenterStart,
                                ) {
                                    Column {
                                        Text(
                                            "$letter",
                                            fontSize = 20.sp,
                                            color = Color(0xFFFFFFFF),
                                            lineHeight = 32.sp,
                                            textAlign = TextAlign.Right
                                            , style = TextStyle(
                                                shadow = Shadow(
                                                    color = Color(0xFFFFFFFF),
                                                    offset = Offset(0f ,0f)
                                                    , blurRadius = 20f
                                                )
                                            )
                                        )
                                        Text("")
                                        Text("")
                                        Text("")
                                        Text(
                                            "موضوعات مرتبط",
                                            textAlign = TextAlign.Right,
                                            modifier = Modifier.fillMaxWidth(),
                                            fontSize = 30.sp,
                                            color = Color.White
                                            , style = TextStyle(
                                                shadow = Shadow(
                                                    color = Color(0xFFFFFFFF),
                                                    offset = Offset(0f ,0f)
                                                    , blurRadius = 20f
                                                )
                                            )
                                        )
                                        Text("")
                                        LazyRow(reverseLayout = true) {
                                            items(tarkib) { (matnha, aksha) ->
                                                Card(
                                                    modifier = Modifier
                                                        .width(250.dp)
                                                        .height(120.dp)
                                                        .padding(20.dp)
                                                        .clip(shape = RoundedCornerShape(100.dp)),
                                                    shape = RectangleShape,
                                                    colors = CardDefaults.cardColors(
                                                        containerColor = Color(
                                                            0xFF0707AD
                                                        )
                                                    )
                                                ) {
                                                    Box(
                                                        modifier = Modifier.fillMaxSize(),
                                                        contentAlignment = Alignment.CenterEnd
                                                    ) {
                                                        Image(
                                                            painter = painterResource(id = R.drawable.card),
                                                            contentScale = ContentScale.Crop,
                                                            contentDescription = null,
                                                            modifier = Modifier.fillMaxSize()
                                                        )
                                                        Button(
                                                            modifier = Modifier.fillMaxSize(
                                                            ).indication(indication = null ,
                                                                interactionSource = remember { MutableInteractionSource() }), onClick = {
                                                                if (matnha == "سیارک های ترکیبی") {
                                                                    currentScreen = "astroidtarkibi"
                                                                    backap = false
                                                                }
                                                                if (matnha == "سیارک های طیفی") {
                                                                    backap = false
                                                                    currentScreen = "astroidteifi"
                                                                }
                                                                if (matnha == "سیارک های نوری") {
                                                                    currentScreen = "astroidnoori"
                                                                    backap = false
                                                                }
                                                                if (matnha == "سیارک های فیزیکی") {
                                                                    backap = false
                                                                    currentScreen = "astroidfiziki"
                                                                }
                                                                if (matnha == "سیارک های منشادار") {
                                                                    backap = false
                                                                    currentScreen = "astroidmanshaedar"
                                                                }
                                                                if (matnha == "سیارک های مداری") {
                                                                    backap = false
                                                                    currentScreen = "astroidmadari"
                                                                }
                                                                if (matnha == "سیارک های بازالتی") {
                                                                    backap = false
                                                                    currentScreen = "astroidbazalati"
                                                                }
                                                            }, colors = ButtonDefaults.buttonColors(
                                                                contentColor = Color.Transparent,
                                                                containerColor = Color.Transparent
                                                            )) {
                                                        }
                                                        Row() {
                                                            Spacer(modifier = Modifier.width(10.dp))
                                                            Column {
                                                                Spacer(modifier = Modifier.height(9.dp))
                                                                Text(
                                                                    "$matnha",
                                                                    color = Color.White,
                                                                    fontSize = 20.sp
                                                                    , style = TextStyle(
                                                                        shadow = Shadow(
                                                                            color = Color(0xFFFFFFFF),
                                                                            offset = Offset(0f ,0f)
                                                                            , blurRadius = 20f
                                                                        )
                                                                    )
                                                                )
                                                            }
                                                            Spacer(modifier = Modifier.width(15.dp))
                                                            Image(
                                                                painter = aksha,
                                                                contentDescription = null,
                                                                contentScale = ContentScale.Crop,
                                                                modifier = Modifier.size(50.dp)
                                                            )
                                                            Spacer(modifier = Modifier.width(15.dp))
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        Text("")
                                        Text("")
                                        Text("")
                                    }
                                }
                            }
                        }
                        var count by remember { mutableStateOf(0) }
                        IconButton(
                            onClick = { count++ },
                            modifier = Modifier
                                .size(70.dp)
                                .align(Alignment.BottomEnd)
                                .indication(indication = null ,
                                    interactionSource = remember { MutableInteractionSource() }),
                            colors = IconButtonDefaults.iconButtonColors(
                                containerColor = Color(0xFF030A33)
                            )
                        ) {
                            if (count % 2 == 0) {
                                Icon(
                                    imageVector = Icons.Default.Favorite,
                                    contentDescription = null,
                                    modifier = Modifier.size(50.dp),
                                    tint = Color.Transparent
                                )
                                Icon(
                                    imageVector = Icons.Default.FavoriteBorder,
                                    contentDescription = null,
                                    modifier = Modifier.size(50.dp),
                                    tint = Color.White
                                )
                            }
                            if (count % 2 == 1) {
                                Icon(
                                    imageVector = Icons.Default.Favorite,
                                    contentDescription = null,
                                    modifier = Modifier.size(50.dp),
                                    tint = Color.White
                                )
                                Icon(
                                    imageVector = Icons.Default.FavoriteBorder,
                                    contentDescription = null,
                                    modifier = Modifier.size(50.dp),
                                    tint = Color.White
                                )
                            }
                        }
                    }
                }
            }
        }
    }
}
@Composable
fun AstroidMadari(){
    Image(
        painter = painterResource(id = R.drawable.app_back),
        contentScale = ContentScale.Crop,
        contentDescription = null
    )
    when(currentScreen) {
        "astroidmadari" -> {
            Column {
                Card(
                    modifier = Modifier
                        .fillMaxWidth()
                        .height(32.5.dp),
                    shape = RectangleShape,
                    colors = CardDefaults.cardColors(containerColor = Color(0xFF030A33))
                ) {
                }
                Column(){
                    Card(
                        modifier = Modifier
                            .fillMaxWidth()
                            .height(50.dp),
                        shape = RectangleShape,
                        colors = CardDefaults.cardColors(containerColor = Color(0xFF0707AD))
                    ) {
                        Row(modifier = Modifier.padding(10.dp)) {
                            IconButton(onClick = {currentScreen = "asli3"
                                backap = true
                            } , colors = IconButtonDefaults.iconButtonColors(contentColor = Color.White)
                                , modifier = Modifier.indication(indication = null ,
                                    interactionSource = remember { MutableInteractionSource() })){
                                Icon(imageVector = Icons.Outlined.ArrowBack, contentDescription = null , modifier = Modifier.size(40.dp))
                            }
                            IconButton(
                                onClick = {},
                                colors = IconButtonDefaults.iconButtonColors(contentColor = Color.White),
                                modifier = Modifier.indication(indication = null ,
                                    interactionSource = remember { MutableInteractionSource() })
                            ) {
                                Icon(imageVector = Icons.Default.Info, contentDescription = null)
                            }
                            IconButton(
                                onClick = {},
                                colors = IconButtonDefaults.iconButtonColors(contentColor = Color.White),
                                modifier = Modifier.indication(indication = null ,
                                    interactionSource = remember { MutableInteractionSource() })
                            ) {
                                Icon(imageVector = Icons.Default.Share, contentDescription = null)
                            }
                            Row(
                                modifier = Modifier.fillMaxWidth(),
                                horizontalArrangement = Arrangement.End,
                                verticalAlignment = Alignment.CenterVertically
                            ) {
                                Text("سیارک های مداری", fontSize = 20.sp, color = Color.White  , maxLines = 1 , fontWeight = FontWeight.ExtraBold)
                                IconButton(onClick = {expanded = true},
                                    modifier = Modifier.size(50.dp)
                                        .indication(indication = null ,
                                            interactionSource = remember { MutableInteractionSource() }),
                                    colors = IconButtonDefaults.iconButtonColors(contentColor = Color.White)) {
                                    Icon(imageVector = Icons.Default.Menu, contentDescription = null)
                                }
                            }
                        }
                    }
                }

                var textsiarakemadari = listOf(
                    ": معرفی کلی\n" +
                            "\n" +
                            "سیارک‌های مداری به رده‌هایی از سیارک‌ها گفته می‌شود که بر اساس ویژگی‌های مداری‌شان مانند نیم‌محور بزرگ، برون‌گرایی، و کاهش به خورشید در گروه‌های مشخص قرار می‌گیرند. این رده‌بندی کمک می‌کند منشأ، ریسک برخورد و تکامل دینامیکی آن‌ها بهتر شناخته شود. تا پایان سال ۲۰۲۴، حدود ۱٫۴ میلیون جسم مداری شناخته‌شده در چهار گروه اصلی طبقه‌بندی شده‌اند: سیارک‌های نزدیک‌زمین، سیارک‌های کمربند اصلی، تروجان‌های مشتری و اجسام دورتر مانند سنتور ها و تنو ها\u202b." +
                            "\n" +
                            "\n" +
                            "\n" +
                            ": چارچوب‌های رده‌بندی و دسته‌بندی\n" +
                            "\n" +
                            "بر پایه نزدیک‌زمین: شامل گروه‌های آمور (پریهلیون بین ۱٫۰۱۷ تا ۱٫۳ واحد نجومی)، آپولو (نیم‌محور بزرگ ۱ واحد نجومی و کیو ۱٫۰۱۷ واحد نجومی)، آتن (نیم‌محور بزرگ ۱ واحد نجومی و افلون ۰٫۹۸۳ واحد نجومی). " +
                            "بر پایه کمربند اصلی: سیارک‌هایی که بین مریخ و مشتری (نیم‌محور بزرگ حدود ۲٫۰۶–۳٫۲۸ واحد نجومی) قرار دارند و اغلب تحت تأثیر شکاف‌های کیروود (رزونانس‌های ۴:۱، ۳:۱، ۲:۵، ۷:۳ و ۲:۱ با مشتری) هستند. " +
                            "بر پایه تروجان‌های مشتری: اجرامی که در نقاط لاگرانژی ال ₄ و ال ₅ در همان مدار مشتری قرار دارند، با بیش از ~۹٬۸۰۰ شناخته‌شده تا ۲۰۲۱ و تخمین حدود ۱ میلیون ۱ کیلومتر. " +
                            "از نظر اجرام دورتر: سنتور ها (بین مشتری و نپتون) و اجرام گذرا (تنو ها) هم به‌عنوان بخش‌هایی از دسته گذر مداری تعریف می‌شوند\u202b." +
                            "\n" +
                            "\n" +
                            "\n" +
                            ": اصول و مبانی نظری کلیدی\n" +
                            "\n" +
                            "هر مدار با شش عنصر هندسی تعریف می‌شود: نیم‌محور بزرگ (ای)، برون‌گرایی (ایی)، انحراف مداری (آی)، عرض راس (کیو)، نزدیک‌گر (دابلیو) و زمان گذر از نزدیک‌گر (ام). این عناصر با گذر زمان به دلیل اثرات گرانشی تغییر می‌کنند. " +
                            "در نیا ها، انتقال مداری از کمربند اصلی به‌وسیله رانش یارکوسکی و عبور از رزونانس‌های دینامیکی صورت می‌گیرد؛ این مکانیزم منشأ بسیاری نیا فعال را توضیح می‌دهد. " +
                            "تروجان‌ها در نقاط لاگرانژی ناپایدار اما بلندمدت قرار دارند، با اغلب متعلق به رده‌های طیفی زد تایپ، دی تایپ و پی تایپ (حدود ۲/۳ دی‌تایپ و ۱/۳ ترکیبی از پی و سی). " +
                            "بررسی گروه هیلدا نشان می‌دهد برخلاف کمربند اصلی، تعداد قابل توجهی چرخش بسیار کند (۱۰۰ ساعت) دارند و حدود ۱۸٪ ترکیبات کندگردان است؛ نرخ سیارک‌های دوتایی احتمالی در این گروه تا ۲۵٪ تخمین زده شده\u202b." +
                            "\n" +
                            "\n" +
                            "\n" +
                            ": کاربردها و پیش‌بینی‌ها\n" +
                            "\n" +
                            "پیش‌بینی خطر برخورد: نیا ها که مدارشان با مدار زمین تقاطع داشته باشد، بر اساس حد کیو 1.05 واحد نجومی و قدر مطلق ۲۲ ابتدا پیگیری می‌شوند. " +
                            "پایش آینده تروجان مشتری با مأموریت لوکی که در سال‌های ۲۰۲۷ ۲۰۳۳ چند تروجان را بررسی می‌کند، کمک به فهم گوناگونی و ساختار رصدی آن‌ها می‌کند. " +
                            "ادغام مشاهدات پن استارز، سی اس اس و ال‌اس‌اس‌تی باعث افزایش قابل توجه نمونه‌های مداری و دقیق‌تر شدن تعیین ویژگی‌های مدارها تا حدود بیش از یک میلیون جرم تا پایان دهه جاری خواهد شد. " +
                            "مطالعه دقیق گروه‌هایی مانند هیلدا کمک می‌کند مکانیزم‌های شکل‌گیری و تکامل دینامیکی آن‌ها را در مقایسه با کمربند اصلی تحلیل کنیم\u202b." +
                            "\n" +
                            "\n" +
                            "\n" +
                            ": نقش در علم و فناوری\n" +
                            "\n" +
                            "شناخت مسیر تکامل مداری سیارک‌ها (بویژه نیاها) برای برنامه‌های دفاع سیاره‌ای و مدیریت خطر برخورد ضروری است. " +
                            "پیشرفت در تعیین دقیق مقادیر عناصر مداری؛ مهم برای تحلیل‌های طولانی‌مدت مدارات و پیش‌بینی رفتار آینده اجرام توسط شبکه‌های رصدی بزرگ. " +
                            "استفاده از تحلیل هم‌زمان داده‌های مداری و طیفی برای ردیابی منشأ و مسیر تحول سیارک‌ها. " +
                            "پیاده‌سازی و توسعه مدل‌های عددی دینامیک و یادگیری ماشینی برای رده‌بندی اتوماتیک و تحلیل مؤلفه‌های مداری اجرام تا مقیاس میلیون‌نفری\u202b." +
                            "\n" +
                            "\n" +
                            "\n" +
                            ": بخش نظری برجسته\n" +
                            "\n" +
                            "سیارک‌های نزدیک‌زمین: گروه‌های آمور، آپولو و آتن مسئول تهدیدات بالقوه‌ای در برخورد به زمین هستند، مانند ۲۰۲۴ وای آر ₄ که مسیر عبورش طبق کیو ۱٫۰۱ واحد نجومی احتمال خطر را برانگیخت. " +
                            "کمربند اصلی: شکاف‌های کیروود (مثلاً در فاصله ~۲٫۵ واحد نجومی مربوط به رزونانس ۳:۱) ساختار جمعیتی را شکل داده و باعث مهاجرت سیارک‌ها به نیا شده‌اند. " +
                            "تروجان‌های مشتری: تخمین بیش از ~۹٬۸۰۰ شناخته‌شده تا ۲۰۲۱ و احتمال ~۱ میلیون ۱ کیلومتر ظرفیت در ال ₄ و ال ₅؛ ترکیب طیفی غالب دی‌تایپ و پی‌تایپ دارند. " +
                            "گروه هیلدا: رفتار مداری خاص با نسبت بالای گردش‌گر کند (۱۰۰ ساعت) و چگالی دوتایی بالا (~۲۵٪)، نشان‌دهنده تاریخچه دینامیکی متفاوت و منشأ ترکیبی\u202b."
                )
                val textmortabet = listOf("سیارک های ترکیبی", "سیارک های طیفی", "سیارک های نوری", "سیارک های فیزیکی", "سیارک های منشادار", "سیارک های بازالتی")
                val imagemortabet = listOf(
                    painterResource(R.drawable.asteroidtarkibi),
                    painterResource(R.drawable.astroidteifi),
                    painterResource(R.drawable.astroidnori),
                    painterResource(R.drawable.astroidfiziki),
                    painterResource(R.drawable.astroidmanshaedar),
                    painterResource(R.drawable.astroidbazalati)
                )
                val tarkib = textmortabet.zip(imagemortabet)
                Column(
                    modifier = Modifier
                        .padding(25.dp)
                        .fillMaxSize()
                ) {
                    Box(modifier = Modifier.fillMaxSize())
                    {
                        LazyColumn(
                            horizontalAlignment = Alignment.CenterHorizontally
                        ) {
                            items(textsiarakemadari) { letter ->
                                Column(modifier = Modifier.padding(30.dp)) {
                                    Row {
                                        Image(painter = painterResource(id = R.drawable.astroidmadari)
                                            , contentDescription = null , contentScale = ContentScale.Crop
                                            , modifier = Modifier.size(100.dp))
                                        Column {
                                            Text("")
                                            Row(modifier = Modifier.fillMaxWidth()
                                                ,horizontalArrangement = Arrangement.End
                                                , verticalAlignment = Alignment.CenterVertically) {
                                                Text("سیارک های مداری" , fontSize = 20.sp  , color = Color.White , style = TextStyle(
                                                    shadow = Shadow(
                                                        color = Color(0xFFFFFFFF),
                                                        offset = Offset(0f ,0f)
                                                        , blurRadius = 20f
                                                    )
                                                ), maxLines = 1)
                                            }
                                        }
                                    }
                                }
                                Box(
                                    modifier = Modifier.fillMaxSize(),
                                    contentAlignment = Alignment.CenterStart,
                                ) {
                                    Column {
                                        Text(
                                            "$letter",
                                            fontSize = 20.sp,
                                            color = Color(0xFFFFFFFF),
                                            lineHeight = 32.sp,
                                            textAlign = TextAlign.Right
                                            , style = TextStyle(
                                                shadow = Shadow(
                                                    color = Color(0xFFFFFFFF),
                                                    offset = Offset(0f ,0f)
                                                    , blurRadius = 20f
                                                )
                                            )
                                        )
                                        Text("")
                                        Text("")
                                        Text("")
                                        Text(
                                            "موضوعات مرتبط",
                                            textAlign = TextAlign.Right,
                                            modifier = Modifier.fillMaxWidth(),
                                            fontSize = 30.sp,
                                            color = Color.White
                                            , style = TextStyle(
                                                shadow = Shadow(
                                                    color = Color(0xFFFFFFFF),
                                                    offset = Offset(0f ,0f)
                                                    , blurRadius = 20f
                                                )
                                            )
                                        )
                                        Text("")
                                        LazyRow(reverseLayout = true) {
                                            items(tarkib) { (matnha, aksha) ->
                                                Card(
                                                    modifier = Modifier
                                                        .width(250.dp)
                                                        .height(120.dp)
                                                        .padding(20.dp)
                                                        .clip(shape = RoundedCornerShape(100.dp)),
                                                    shape = RectangleShape,
                                                    colors = CardDefaults.cardColors(
                                                        containerColor = Color(
                                                            0xFF0707AD
                                                        )
                                                    )
                                                ) {
                                                    Box(
                                                        modifier = Modifier.fillMaxSize(),
                                                        contentAlignment = Alignment.CenterEnd
                                                    ) {
                                                        Image(
                                                            painter = painterResource(id = R.drawable.card),
                                                            contentScale = ContentScale.Crop,
                                                            contentDescription = null,
                                                            modifier = Modifier.fillMaxSize()
                                                        )
                                                        Button(
                                                            modifier = Modifier.fillMaxSize(
                                                            ).indication(indication = null ,
                                                                interactionSource = remember { MutableInteractionSource() }), onClick = {
                                                                if (matnha == "سیارک های ترکیبی") {
                                                                    currentScreen = "astroidtarkibi"
                                                                    backap = false
                                                                }
                                                                if (matnha == "سیارک های طیفی") {
                                                                    backap = false
                                                                    currentScreen = "astroidteifi"
                                                                }
                                                                if (matnha == "سیارک های نوری") {
                                                                    currentScreen = "astroidnoori"
                                                                    backap = false
                                                                }
                                                                if (matnha == "سیارک های فیزیکی") {
                                                                    backap = false
                                                                    currentScreen = "astroidfiziki"
                                                                }
                                                                if (matnha == "سیارک های منشادار") {
                                                                    backap = false
                                                                    currentScreen = "astroidmanshaedar"
                                                                }
                                                                if (matnha == "سیارک های مداری") {
                                                                    backap = false
                                                                    currentScreen = "astroidmadari"
                                                                }
                                                                if (matnha == "سیارک های بازالتی") {
                                                                    backap = false
                                                                    currentScreen = "astroidbazalati"
                                                                }
                                                            }, colors = ButtonDefaults.buttonColors(
                                                                contentColor = Color.Transparent,
                                                                containerColor = Color.Transparent
                                                            )) {
                                                        }
                                                        Row() {
                                                            Spacer(modifier = Modifier.width(10.dp))
                                                            Column {
                                                                Spacer(modifier = Modifier.height(9.dp))
                                                                Text(
                                                                    "$matnha",
                                                                    color = Color.White,
                                                                    fontSize = 20.sp
                                                                    , style = TextStyle(
                                                                        shadow = Shadow(
                                                                            color = Color(0xFFFFFFFF),
                                                                            offset = Offset(0f ,0f)
                                                                            , blurRadius = 20f
                                                                        )
                                                                    )
                                                                )
                                                            }
                                                            Spacer(modifier = Modifier.width(15.dp))
                                                            Image(
                                                                painter = aksha,
                                                                contentDescription = null,
                                                                contentScale = ContentScale.Crop,
                                                                modifier = Modifier.size(50.dp)
                                                            )
                                                            Spacer(modifier = Modifier.width(15.dp))
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        Text("")
                                        Text("")
                                        Text("")
                                    }
                                }
                            }
                        }
                        var count by remember { mutableStateOf(0) }
                        IconButton(
                            onClick = { count++ },
                            modifier = Modifier
                                .size(70.dp)
                                .align(Alignment.BottomEnd)
                                .indication(indication = null ,
                                    interactionSource = remember { MutableInteractionSource() }),
                            colors = IconButtonDefaults.iconButtonColors(
                                containerColor = Color(0xFF030A33)
                            )
                        ) {
                            if (count % 2 == 0) {
                                Icon(
                                    imageVector = Icons.Default.Favorite,
                                    contentDescription = null,
                                    modifier = Modifier.size(50.dp),
                                    tint = Color.Transparent
                                )
                                Icon(
                                    imageVector = Icons.Default.FavoriteBorder,
                                    contentDescription = null,
                                    modifier = Modifier.size(50.dp),
                                    tint = Color.White
                                )
                            }
                            if (count % 2 == 1) {
                                Icon(
                                    imageVector = Icons.Default.Favorite,
                                    contentDescription = null,
                                    modifier = Modifier.size(50.dp),
                                    tint = Color.White
                                )
                                Icon(
                                    imageVector = Icons.Default.FavoriteBorder,
                                    contentDescription = null,
                                    modifier = Modifier.size(50.dp),
                                    tint = Color.White
                                )
                            }
                        }
                    }
                }
            }
        }
    }
}
@Composable
fun AstroidBazalati(){
    Image(
        painter = painterResource(id = R.drawable.app_back),
        contentScale = ContentScale.Crop,
        contentDescription = null
    )
    when(currentScreen) {
        "astroidbazalati" -> {
            Column {
                Card(
                    modifier = Modifier
                        .fillMaxWidth()
                        .height(32.5.dp),
                    shape = RectangleShape,
                    colors = CardDefaults.cardColors(containerColor = Color(0xFF030A33))
                ) {
                }
                Column(){
                    Card(
                        modifier = Modifier
                            .fillMaxWidth()
                            .height(50.dp),
                        shape = RectangleShape,
                        colors = CardDefaults.cardColors(containerColor = Color(0xFF0707AD))
                    ) {
                        Row(modifier = Modifier.padding(10.dp)) {
                            IconButton(onClick = {currentScreen = "asli3"
                                backap = true
                            } , colors = IconButtonDefaults.iconButtonColors(contentColor = Color.White)
                                , modifier = Modifier.indication(indication = null ,
                                    interactionSource = remember { MutableInteractionSource() })){
                                Icon(imageVector = Icons.Outlined.ArrowBack, contentDescription = null , modifier = Modifier.size(40.dp))
                            }
                            IconButton(
                                onClick = {},
                                colors = IconButtonDefaults.iconButtonColors(contentColor = Color.White),
                                modifier = Modifier.indication(indication = null ,
                                    interactionSource = remember { MutableInteractionSource() })
                            ) {
                                Icon(imageVector = Icons.Default.Info, contentDescription = null)
                            }
                            IconButton(
                                onClick = {},
                                colors = IconButtonDefaults.iconButtonColors(contentColor = Color.White),
                                modifier = Modifier.indication(indication = null ,
                                    interactionSource = remember { MutableInteractionSource() })
                            ) {
                                Icon(imageVector = Icons.Default.Share, contentDescription = null)
                            }
                            Row(
                                modifier = Modifier.fillMaxWidth(),
                                horizontalArrangement = Arrangement.End,
                                verticalAlignment = Alignment.CenterVertically
                            ) {
                                Text("سیارک های بازآلتی", fontSize = 20.sp, color = Color.White  , maxLines = 1 , fontWeight = FontWeight.ExtraBold)
                                IconButton(onClick = {expanded = true},
                                    modifier = Modifier.size(50.dp)
                                        .indication(indication = null ,
                                            interactionSource = remember { MutableInteractionSource() }),
                                    colors = IconButtonDefaults.iconButtonColors(contentColor = Color.White)) {
                                    Icon(imageVector = Icons.Default.Menu, contentDescription = null)
                                }
                            }
                        }
                    }
                }

                var textsiarakebazalti = listOf(
                    ": معرفی کلی\n" +
                            "\n" +
                            "سیارک‌های بازآلتی یا وی‌ تایپ اجرامی هستند که سطح‌شان از بازالت ساخته شده و نشان‌دهنده گرمایش و فرآیند دگرگونی درون سیارکی‌اند. این سیارک‌ها اغلب بقایای پوسته سیارک‌های متمایز شده‌اند و نزدیکی بسیاری از آن‌ها به (4) وستا است. به‌ویژه در بخش داخلی کمربند سیارکی شایع‌اند، اما برخی نمونه‌ها در کمربند میانی یا بیرونی نیز یافت شده‌اند که منشأ متفاوت دارند\u202b." +
                            "\n" +
                            "\n" +
                            "\n" +
                            ": چارچوب‌های رده‌بندی و دسته‌بندی\n" +
                            "\n" +
                            "بر اساس دسته‌ طیفی رسمی: وی‌ تایپ (بازالتی)، که معمولاً از خانواده وستا (وی‌ ستوئیدها) هستند. " +
                            "بعضی نمونه‌ها خارج از مدار وستا قرار دارند و منشأهای مستقل دارند؛ مانند ماگنیا در کمربند بیرونی. " +
                            "بر اساس محل مداری: غالباً در کمربند داخلی (بین ~2.18 تا 2.5 واحد نجومی)، اما برخی نمونه‌های هیجان‌انگیز در کمربند میانی و بیرونی نیز شناسایی شده‌اند\u202b." +
                            "\n" +
                            "\n" +
                            "\n" +
                            ": اصول و مبانی نظری کلیدی\n" +
                            "\n" +
                            "بازالت محصول ذوب و جدایی عنصر-ها در سیارک‌های متمایزشده است؛ وی‌ تایپ‌ها نمایانگر پوسته‌های بازالتی این اجرام‌اند. " +
                            "طیف نوری در محدوده مادون‌قرمز نزدیک با ویژگی‌های جذب حدود ۰٫۹ و ۱٫۹ میکرون، شاخص تشخیص پیروکسن و بازالت است. " +
                            "تحلیل‌های طیفی از داده‌های مأموریت گایا بیش از ۳۵۰ وی‌ تایپ را در بخش میانی و بیرونی کمربند شناسایی کرده‌اند که با ویژگی‌های متفاوت از نمونه‌های وستا هستند. " +
                            "شبیه‌سازی‌های دینامیکی نشان می‌دهد که برخی اجرام مانند اتاباسکا و 1999 اف جی ₅ منشأ مستقلی از وستا دارند\u202b." +
                            "\n" +
                            "\n" +
                            "\n" +
                            ": کاربردها و پیش‌بینی‌ها\n" +
                            "\n" +
                            "ردیابی تعداد واقعی اجسام مشتق‌شده از پوسته‌های سیارک‌های متمایزشده و درک تعداد منشأهای احتمالی غیر وستایی. " +
                            "شناخت بهتر تکامل درونی و تاریخچه گرمایش سیارکی در نخستین دوران منظومه شمسی. " +
                            "ادغام مشاهدات گایا با سوروی هایی مانند موویز برای شناسایی اجرامی در محدوده کمربند میانی و بیرونی که در گذشته ناشناخته بودند. " +
                            "ادامه رصدهای طیفی و دینامیکی پیش‌بینی افزایش نمونه‌های وی‌ تایپ مستقل از وستا تا اوایل دهه ۲۰۳۰ را دارد\u202b." +
                            "\n" +
                            "\n" +
                            "\n" +
                            ": نقش در علم و فناوری\n" +
                            "\n" +
                            "درک فرآیندهای دگرگونی سیارکی و منشأ شهاب‌سنگ‌های هد از طریق تحلیل وی تایپ‌ها. " +
                            "تعیین منشأ چندین خانواده غیر وستایی که فرآیند گرمایش و تشکیل مشابه دارند. " +
                            "راهنمایی هدف‌گذاری مأموریت‌های آینده برای نمونه‌برداری از بازالت‌های فضایی. " +
                            "استفاده از یادگیری ماشین برای رده‌بندی خودکار وی‌ تایپ‌ها بر اساس ویژگی‌های طیفی و مداری\u202b." +
                            "\n" +
                            "\n" +
                            "\n" +
                            ": بخش نظری برجسته\n" +
                            "\n" +
                            "خانواده وستا: احتمالاً منشأ بیش از ۹۰٪ وی تایپ‌های کمربند داخلی هستند، با دو دهانه بزرگ برخوردی وننیا و رهیسیلویا که باعث خارج‌شدن مواد بازالتی شد. " +
                            "سیارک ماگنیا (۱۴۵۹): اولین وی‌‑تایپ شناسایی شده در کمربند بیرونی، مستقل از وستا و نشان‌دهنده منشأ متفاوت. " +
                            "اجسام مانند اتاباسکا و 1999 اف جی ₅: وی تایپ‌هایی در کمربند داخلی که روابط دینامیکی مستقلی با وستا ندارند و احتمال منشأ متفاوت مطرح است. " +
                            "نمونه‌های میانی و بیرونی دی آر 3 گایا: بیش از ۳۵۰ وی تایپ تأییدشده، که برخی خصوصیات طیفی عمیق‌تر از ماگنیا دارند و فرضیه وجود پوشش‌های بازالتی دیگر اجرام اولیه را تقویت می‌کنند\u202b."
                )
                val textmortabet = listOf("سیارک های ترکیبی", "سیارک های طیفی", "سیارک های نوری", "سیارک های فیزیکی", "سیارک های منشادار", "سیارک های مداری")
                val imagemortabet = listOf(
                    painterResource(R.drawable.asteroidtarkibi),
                    painterResource(R.drawable.astroidteifi),
                    painterResource(R.drawable.astroidnori),
                    painterResource(R.drawable.astroidfiziki),
                    painterResource(R.drawable.astroidmanshaedar),
                    painterResource(R.drawable.astroidmadari)
                )
                val tarkib = textmortabet.zip(imagemortabet)
                Column(
                    modifier = Modifier
                        .padding(25.dp)
                        .fillMaxSize()
                ) {
                    Box(modifier = Modifier.fillMaxSize())
                    {
                        LazyColumn(
                            horizontalAlignment = Alignment.CenterHorizontally
                        ) {
                            items(textsiarakebazalti) { letter ->
                                Column(modifier = Modifier.padding(30.dp)) {
                                    Row {
                                        Image(painter = painterResource(id = R.drawable.astroidbazalati)
                                            , contentDescription = null , contentScale = ContentScale.Crop
                                            , modifier = Modifier.size(100.dp))
                                        Column {
                                            Text("")
                                            Row(modifier = Modifier.fillMaxWidth()
                                                ,horizontalArrangement = Arrangement.End
                                                , verticalAlignment = Alignment.CenterVertically) {
                                                Text("سیارک های بازآلتی" , fontSize = 20.sp  , color = Color.White , style = TextStyle(
                                                    shadow = Shadow(
                                                        color = Color(0xFFFFFFFF),
                                                        offset = Offset(0f ,0f)
                                                        , blurRadius = 20f
                                                    )
                                                ), maxLines = 1)
                                            }
                                        }
                                    }
                                }
                                Box(
                                    modifier = Modifier.fillMaxSize(),
                                    contentAlignment = Alignment.CenterStart,
                                ) {
                                    Column {
                                        Text(
                                            "$letter",
                                            fontSize = 20.sp,
                                            color = Color(0xFFFFFFFF),
                                            lineHeight = 32.sp,
                                            textAlign = TextAlign.Right
                                            , style = TextStyle(
                                                shadow = Shadow(
                                                    color = Color(0xFFFFFFFF),
                                                    offset = Offset(0f ,0f)
                                                    , blurRadius = 20f
                                                )
                                            )
                                        )
                                        Text("")
                                        Text("")
                                        Text("")
                                        Text(
                                            "موضوعات مرتبط",
                                            textAlign = TextAlign.Right,
                                            modifier = Modifier.fillMaxWidth(),
                                            fontSize = 30.sp,
                                            color = Color.White
                                            , style = TextStyle(
                                                shadow = Shadow(
                                                    color = Color(0xFFFFFFFF),
                                                    offset = Offset(0f ,0f)
                                                    , blurRadius = 20f
                                                )
                                            )
                                        )
                                        Text("")
                                        LazyRow(reverseLayout = true) {
                                            items(tarkib) { (matnha, aksha) ->
                                                Card(
                                                    modifier = Modifier
                                                        .width(250.dp)
                                                        .height(120.dp)
                                                        .padding(20.dp)
                                                        .clip(shape = RoundedCornerShape(100.dp)),
                                                    shape = RectangleShape,
                                                    colors = CardDefaults.cardColors(
                                                        containerColor = Color(
                                                            0xFF0707AD
                                                        )
                                                    )
                                                ) {
                                                    Box(
                                                        modifier = Modifier.fillMaxSize(),
                                                        contentAlignment = Alignment.CenterEnd
                                                    ) {
                                                        Image(
                                                            painter = painterResource(id = R.drawable.card),
                                                            contentScale = ContentScale.Crop,
                                                            contentDescription = null,
                                                            modifier = Modifier.fillMaxSize()
                                                        )
                                                        Button(
                                                            modifier = Modifier.fillMaxSize(
                                                            ).indication(indication = null ,
                                                                interactionSource = remember { MutableInteractionSource() }), onClick = {
                                                                if (matnha == "سیارک های ترکیبی") {
                                                                    currentScreen = "astroidtarkibi"
                                                                    backap = false
                                                                }
                                                                if (matnha == "سیارک های طیفی") {
                                                                    backap = false
                                                                    currentScreen = "astroidteifi"
                                                                }
                                                                if (matnha == "سیارک های نوری") {
                                                                    currentScreen = "astroidnoori"
                                                                    backap = false
                                                                }
                                                                if (matnha == "سیارک های فیزیکی") {
                                                                    backap = false
                                                                    currentScreen = "astroidfiziki"
                                                                }
                                                                if (matnha == "سیارک های منشادار") {
                                                                    backap = false
                                                                    currentScreen = "astroidmanshaedar"
                                                                }
                                                                if (matnha == "سیارک های مداری") {
                                                                    backap = false
                                                                    currentScreen = "astroidmadari"
                                                                }
                                                                if (matnha == "سیارک های بازالتی") {
                                                                    backap = false
                                                                    currentScreen = "astroidbazalati"
                                                                }
                                                            }, colors = ButtonDefaults.buttonColors(
                                                                contentColor = Color.Transparent,
                                                                containerColor = Color.Transparent
                                                            )) {
                                                        }
                                                        Row() {
                                                            Spacer(modifier = Modifier.width(10.dp))
                                                            Column {
                                                                Spacer(modifier = Modifier.height(9.dp))
                                                                Text(
                                                                    "$matnha",
                                                                    color = Color.White,
                                                                    fontSize = 20.sp
                                                                    , style = TextStyle(
                                                                        shadow = Shadow(
                                                                            color = Color(0xFFFFFFFF),
                                                                            offset = Offset(0f ,0f)
                                                                            , blurRadius = 20f
                                                                        )
                                                                    )
                                                                )
                                                            }
                                                            Spacer(modifier = Modifier.width(15.dp))
                                                            Image(
                                                                painter = aksha,
                                                                contentDescription = null,
                                                                contentScale = ContentScale.Crop,
                                                                modifier = Modifier.size(50.dp)
                                                            )
                                                            Spacer(modifier = Modifier.width(15.dp))
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        Text("")
                                        Text("")
                                        Text("")
                                    }
                                }
                            }
                        }
                        var count by remember { mutableStateOf(0) }
                        IconButton(
                            onClick = { count++ },
                            modifier = Modifier
                                .size(70.dp)
                                .align(Alignment.BottomEnd)
                                .indication(indication = null ,
                                    interactionSource = remember { MutableInteractionSource() }),
                            colors = IconButtonDefaults.iconButtonColors(
                                containerColor = Color(0xFF030A33)
                            )
                        ) {
                            if (count % 2 == 0) {
                                Icon(
                                    imageVector = Icons.Default.Favorite,
                                    contentDescription = null,
                                    modifier = Modifier.size(50.dp),
                                    tint = Color.Transparent
                                )
                                Icon(
                                    imageVector = Icons.Default.FavoriteBorder,
                                    contentDescription = null,
                                    modifier = Modifier.size(50.dp),
                                    tint = Color.White
                                )
                            }
                            if (count % 2 == 1) {
                                Icon(
                                    imageVector = Icons.Default.Favorite,
                                    contentDescription = null,
                                    modifier = Modifier.size(50.dp),
                                    tint = Color.White
                                )
                                Icon(
                                    imageVector = Icons.Default.FavoriteBorder,
                                    contentDescription = null,
                                    modifier = Modifier.size(50.dp),
                                    tint = Color.White
                                )
                            }
                        }
                    }
                }
            }
        }
    }
}












//دنباله دار ها










@Composable
fun Comekotah(){
    Image(
        painter = painterResource(id = R.drawable.app_back),
        contentScale = ContentScale.Crop,
        contentDescription = null
    )
    when(currentScreen) {
        "comekotah" -> {
            Column {
                Card(
                    modifier = Modifier
                        .fillMaxWidth()
                        .height(32.5.dp),
                    shape = RectangleShape,
                    colors = CardDefaults.cardColors(containerColor = Color(0xFF030A33))
                ) {
                }
                Column(){
                    Card(
                        modifier = Modifier
                            .fillMaxWidth()
                            .height(50.dp),
                        shape = RectangleShape,
                        colors = CardDefaults.cardColors(containerColor = Color(0xFF0707AD))
                    ) {
                        Row(modifier = Modifier.padding(10.dp)) {
                            IconButton(onClick = {currentScreen = "asli4"
                                backap = true
                            } , colors = IconButtonDefaults.iconButtonColors(contentColor = Color.White)
                                , modifier = Modifier.indication(indication = null ,
                                    interactionSource = remember { MutableInteractionSource() })){
                                Icon(imageVector = Icons.Outlined.ArrowBack, contentDescription = null , modifier = Modifier.size(40.dp))
                            }
                            IconButton(
                                onClick = {},
                                colors = IconButtonDefaults.iconButtonColors(contentColor = Color.White),
                                modifier = Modifier.indication(indication = null ,
                                    interactionSource = remember { MutableInteractionSource() })
                            ) {
                                Icon(imageVector = Icons.Default.Info, contentDescription = null)
                            }
                            IconButton(
                                onClick = {},
                                colors = IconButtonDefaults.iconButtonColors(contentColor = Color.White),
                                modifier = Modifier.indication(indication = null ,
                                    interactionSource = remember { MutableInteractionSource() })
                            ) {
                                Icon(imageVector = Icons.Default.Share, contentDescription = null)
                            }
                            Row(
                                modifier = Modifier.fillMaxWidth(),
                                horizontalArrangement = Arrangement.End,
                                verticalAlignment = Alignment.CenterVertically
                            ) {
                                Text("دنباله دار کوتاه دوره", fontSize = 20.sp, color = Color.White  , maxLines = 1 , fontWeight = FontWeight.ExtraBold)
                                IconButton(onClick = {expanded = true},
                                    modifier = Modifier.size(50.dp)
                                        .indication(indication = null ,
                                            interactionSource = remember { MutableInteractionSource() }),
                                    colors = IconButtonDefaults.iconButtonColors(contentColor = Color.White)) {
                                    Icon(imageVector = Icons.Default.Menu, contentDescription = null)
                                }
                            }
                        }
                    }
                }
                var textDonbaleDareKortAMD = listOf(
                    ": معرفی کلی\n" +
                            "\n" +
                            "دنباله‌دارهای کوتاه‌مدت یا دنباله‌دارهای دوره‌ای گروهی از دنباله‌دارها هستند که دورهٔ مداری آنان کمتر از ۲۰۰ سال است و در نتیجه طی عمر یک انسان بیش از یک بار در آسمان ظاهر می‌شوند. بیشتر این دنباله‌دارها منشأ خود را از کمربند کویی‌پر یا نواحی فراسوی نپتون گرفته‌اند و در اثر برهم‌کنش‌های گرانشی با سیارات بزرگ به‌ویژه مشتری به مدارهای کوتاه‌تر رانده شده‌اند. " +
                            "دنباله‌دارهای کوتاه‌مدت اغلب هسته‌هایی با اندازه‌های چند صدم تا چند ده کیلومتر دارند و سطح آنان پوشیده از مخلوطی از یخ‌های آب، کربن‌دی‌اکسید، متان و مواد آلی تیره‌رنگ است. در گذر به نزدیکی خورشید، این یخ‌ها تصعید شده و گیسو و دنبالهٔ درخشان ایجاد می‌کنند. " +
                            "از نظر تاریخی این اجرام نقش مهمی در شکل‌گیری نگاه بشر به پویایی منظومهٔ شمسی داشته‌اند و رصدهای مکرر آن‌ها امکان بررسی فرسایش و تغییرات سطحی طی زمان را فراهم کرده است\u202b." +
                            "\n" +
                            "\n" +
                            "\n" +
                            ": چارچوب‌های رده‌بندی و دسته‌بندی\n" +
                            "\n" +
                            "بر اساس دورهٔ مداری: دنباله‌دارهای کوتاه‌مدت به‌طور کلی کمتر از ۲۰۰ سال دوره دارند. در این میان دو ردهٔ مهم تعریف می‌شوند: " +
                            "خانوادهٔ مشتری‌محور: با دوره کمتر از ۲۰ سال، مدارهایی نزدیک به صفحهٔ منظومه و تحت کنترل گرانش مشتری. " +
                            "نوع هالی: با دوره‌های بین ۲۰ تا ۲۰۰ سال و مدارهایی کشیده‌تر و گاه با میل مداری زیاد. " +
                            "بر اساس منشأ: منشأ اصلی این دنباله‌دارها کمربند کویی‌پر و دیسک پراکنده است؛ در مقابل، دنباله‌دارهای بلندمدت منشأیی در ابر اورت دارند. " +
                            "بر اساس فعالیت: برخی هسته‌ها فعال و دارای گیسوی پرنور هستند، در حالی‌که برخی مانند دنباله‌دار انکه یا بلانپن فعالیت ضعیف‌تری دارند که به دلیل مصرف‌شدن یخ‌های سطحی است\u202b." +
                            "\n" +
                            "\n" +
                            "\n" +
                            ": اصول و مبانی نظری کلیدی\n" +
                            "\n" +
                            "پویایی مداری: شبیه‌سازی‌های دینامیکی نشان می‌دهد که برهم‌کنش‌های گرانشی با مشتری و زحل عامل اصلی به‌دام‌افتادن اجرام کمربند کویی‌پر در مدارهای کوتاه‌مدت است. " +
                            "ساختار داخلی: هستهٔ دنباله‌دارها ترکیبی از یخ و غبار است که در لایه‌های متخلخل و شکننده قرار دارند. بررسی مأموریت روزتا به دنباله‌دار ۶۷پی نشان داد که چگالی متوسط بسیار پایین و ساختار مانند اسفنج یخی است. " +
                            "ترکیب شیمیایی: تحلیل طیفی گیسو و دنباله ترکیباتی چون آب، کربن‌دی‌اکسید، مونوکسیدکربن، متان، آمونیاک و مولکول‌های آلی پیچیده را آشکار می‌کند که سرنخ‌هایی از شیمی آغازین منظومهٔ شمسی هستند. " +
                            "فرسایش و تکامل: هر بار گذر حضیض باعث از دست رفتن لایه‌ای از یخ و گردوغبار می‌شود. در نتیجه دنباله‌دارها طی میلیون‌ها سال یا نابود می‌شوند یا به اجسامی شبه‌سیارکی بی‌فعالیت بدل می‌گردند\u202b." +
                            "\n" +
                            "\n" +
                            "\n" +
                            ": کاربردها و پیش‌بینی‌ها\n" +
                            "\n" +
                            "ردیابی تاریخچهٔ آب و مواد آلی در منظومهٔ شمسی: احتمال اینکه بخشی از آب زمین توسط دنباله‌دارها منتقل شده باشد همچنان یکی از پرسش‌های بنیادین است. " +
                            "پیش‌بینی فعالیت‌های آینده: مدل‌های حرارتی و دینامیکی پیش‌بینی می‌کنند که برخی دنباله‌دارهای کوتاه‌مدت مانند انکه در چند هزار سال آینده به‌طور کامل فعالیت خود را از دست خواهند داد. " +
                            "برنامه‌ریزی مأموریت‌های فضایی: دنباله‌دارهای کوتاه‌مدت به دلیل مدارهای قابل پیش‌بینی اهداف ایده‌آلی برای کاوشگرها هستند؛ مانند روزتا که به ۶۷پی رسید. " +
                            "ردیابی تغییرات اقلیمی خورشیدی: شدت فعالیت دنباله‌دارها می‌تواند بازتابی از شرایط تابشی خورشید و باد خورشیدی در دوره‌های مختلف باشد\u202b." +
                            "\n" +
                            "\n" +
                            "\n" +
                            ": نقش در علم و فناوری\n" +
                            "\n" +
                            "آزمایشگاه طبیعی: دنباله‌دارهای کوتاه‌مدت امکان مطالعهٔ مادهٔ اولیهٔ منظومهٔ شمسی را بدون نیاز به سفرهای بسیار دور به ابر اورت فراهم می‌کنند. " +
                            "منبع داده برای یادگیری ماشین: امروزه الگوریتم‌های یادگیری ماشین برای پیش‌بینی فعالیت و دسته‌بندی دنباله‌دارها بر اساس داده‌های مداری و طیفی به‌کار گرفته می‌شوند. " +
                            "فناوری فضاپیماها: مأموریت‌هایی مانند ژوتو، روزتا و آیندهٔ کامت اینترسِپتور فناوری رهگیری و فرود بر روی اجرام کوچک و سریع را توسعه داده‌اند. " +
                            "نقش در فرهنگ و تاریخ: دنباله‌دارهای کوتاه‌مدت مانند هالی همواره الهام‌بخش تمدن‌ها بوده‌اند و بازگشت دوره‌ای آنان در تاریخ ثبت شده است\u202b." +
                            "\n" +
                            "\n" +
                            "\n" +
                            ": بخش نظری برجسته\n" +
                            "\n" +
                            "دنباله‌دار هالی: شناخته‌شده‌ترین دنباله‌دار دوره‌ای با دوره حدود ۷۵ سال؛ شاهدی از رصدهای هزارسالهٔ تمدن‌ها. " +
                            "دنباله‌دار انکه: دارای کوتاه‌ترین دوره شناخته‌شده (۳.۳ سال)؛ منشأ بارش شهابی توریدها. " +
                            "دنباله‌دار ۶۷پی/چوریوموف گراسیمنکو: هدف مأموریت روزتا که ساختار دو لوبی و فعالیت پیچیدهٔ سطحی آن شناخت تازه‌ای از دنباله‌دارها ارائه داد. " +
                            "دنباله‌دار ۹۶پی/ماخولز: مدار غیرمعمول و ترکیب متفاوت آن فرضیهٔ منشأ متفاوت و احتمالا بین‌ستاره‌ای را تقویت کرده است. " +
                            "دنباله‌دار ۴۶پی/ویرتنان: به دلیل اندازه کوچک و نزدیکی گذر به زمین در ۲۰۱۸ مورد توجه عمومی و علمی گسترده قرار گرفت. " +
                            "دستهٔ نزدیک‌گرای خورشیدی: نمونه‌هایی مانند ۳۲۳پی/سوهو نمایانگر پایداری اجرام در دماهای بسیار بالا نزدیک خورشید هستند\u202b."
                )
                val textmortabet = listOf("دنباله دار بلند دوره", "دنباله دار تک گذر", "ساختار دنباله دارها", "منشأ دنباله دارها", "دنباله دار معروف", "دنباله دار میانی" , "چرخه دنباله دار", "تأثیر دنباله دار" , "مقایسه دنباله دارها")
                val imagemortabet = listOf(
                    painterResource(R.drawable.cometbolanddore),
                    painterResource(R.drawable.cometzodgozar),
                    painterResource(R.drawable.cometsakhtar),
                    painterResource(R.drawable.cometmanshae),
                    painterResource(R.drawable.cometfamus),
                    painterResource(R.drawable.comemiansetaree),
                    painterResource(R.drawable.comecharkhehayat),
                    painterResource(R.drawable.cometaethirbarzamin),
                    painterResource(R.drawable.cometmoghayese),
                )
                val tarkib = textmortabet.zip(imagemortabet)
                Column(
                    modifier = Modifier
                        .padding(25.dp)
                        .fillMaxSize()
                ) {
                    Box(modifier = Modifier.fillMaxSize())
                    {
                        LazyColumn(
                            horizontalAlignment = Alignment.CenterHorizontally
                        ) {
                            items(textDonbaleDareKortAMD) { letter ->
                                Column(modifier = Modifier.padding(30.dp)) {
                                    Row {
                                        Image(painter = painterResource(id = R.drawable.cometkotahdore)
                                            , contentDescription = null , contentScale = ContentScale.Crop
                                            , modifier = Modifier.size(100.dp))
                                        Column {
                                            Text("")
                                            Row(modifier = Modifier.fillMaxWidth()
                                                ,horizontalArrangement = Arrangement.End
                                                , verticalAlignment = Alignment.CenterVertically) {
                                                Text("دنباله دار کوتاه دوره" , fontSize = 20.sp  , color = Color.White , style = TextStyle(
                                                    shadow = Shadow(
                                                        color = Color(0xFFFFFFFF),
                                                        offset = Offset(0f ,0f)
                                                        , blurRadius = 20f
                                                    )
                                                ), maxLines = 1)
                                            }
                                        }
                                    }
                                }
                                Box(
                                    modifier = Modifier.fillMaxSize(),
                                    contentAlignment = Alignment.CenterStart,
                                ) {
                                    Column {
                                        Text(
                                            "$letter",
                                            fontSize = 20.sp,
                                            color = Color(0xFFFFFFFF),
                                            lineHeight = 32.sp,
                                            textAlign = TextAlign.Right
                                            , style = TextStyle(
                                                shadow = Shadow(
                                                    color = Color(0xFFFFFFFF),
                                                    offset = Offset(0f ,0f)
                                                    , blurRadius = 20f
                                                )
                                            )
                                        )
                                        Text("")
                                        Text("")
                                        Text("")
                                        Text(
                                            "موضوعات مرتبط",
                                            textAlign = TextAlign.Right,
                                            modifier = Modifier.fillMaxWidth(),
                                            fontSize = 30.sp,
                                            color = Color.White
                                            , style = TextStyle(
                                                shadow = Shadow(
                                                    color = Color(0xFFFFFFFF),
                                                    offset = Offset(0f ,0f)
                                                    , blurRadius = 20f
                                                )
                                            )
                                        )
                                        Text("")
                                        LazyRow(reverseLayout = true) {
                                            items(tarkib) { (matnha, aksha) ->
                                                Card(
                                                    modifier = Modifier
                                                        .width(250.dp)
                                                        .height(120.dp)
                                                        .padding(20.dp)
                                                        .clip(shape = RoundedCornerShape(100.dp)),
                                                    shape = RectangleShape,
                                                    colors = CardDefaults.cardColors(
                                                        containerColor = Color(
                                                            0xFF0707AD
                                                        )
                                                    )
                                                ) {
                                                    Box(
                                                        modifier = Modifier.fillMaxSize(),
                                                        contentAlignment = Alignment.CenterEnd
                                                    ) {
                                                        Image(
                                                            painter = painterResource(id = R.drawable.card),
                                                            contentScale = ContentScale.Crop,
                                                            contentDescription = null,
                                                            modifier = Modifier.fillMaxSize()
                                                        )
                                                        Button(
                                                            modifier = Modifier.fillMaxSize(
                                                            ).indication(indication = null ,
                                                                interactionSource = remember { MutableInteractionSource() }), onClick = {
                                                                if (matnha == "دنباله دار کوتاه دوره") {
                                                                    backap = false
                                                                    currentScreen = "comekotah"
                                                                }
                                                                if (matnha == "دنباله دار بلند دوره") {
                                                                    currentScreen = "comeboland"
                                                                    backap = false
                                                                }
                                                                if (matnha == "دنباله دار تک گذر") {
                                                                    backap = false
                                                                    currentScreen = "cometakgozar"
                                                                }
                                                                if (matnha == "ساختار دنباله دارها") {
                                                                    currentScreen = "comesakhtar"
                                                                    backap = false
                                                                }
                                                                if (matnha == "منشأ دنباله دارها") {
                                                                    backap = false
                                                                    currentScreen = "comemanshae"
                                                                }
                                                                if (matnha == "دنباله دار معروف") {
                                                                    backap = false
                                                                    currentScreen = "comefamus"
                                                                }
                                                                if (matnha == "دنباله دار میانی") {
                                                                    backap = false
                                                                    currentScreen = "comemiani"
                                                                }
                                                                if (matnha == "چرخه دنباله دار") {
                                                                    backap = false
                                                                    currentScreen = "comecharkhe"
                                                                }
                                                                if (matnha == "تأثیر دنباله دار") {
                                                                    backap = false
                                                                    currentScreen = "cometaethir"
                                                                }
                                                                if (matnha == "مقایسه دنباله دارها") {
                                                                    backap = false
                                                                    currentScreen = "comemoghayese"
                                                                }
                                                            }, colors = ButtonDefaults.buttonColors(
                                                                contentColor = Color.Transparent,
                                                                containerColor = Color.Transparent
                                                            )) {
                                                        }
                                                        Row() {
                                                            Spacer(modifier = Modifier.width(10.dp))
                                                            Column {
                                                                Spacer(modifier = Modifier.height(9.dp))
                                                                Text(
                                                                    "$matnha",
                                                                    color = Color.White,
                                                                    fontSize = 20.sp
                                                                    , style = TextStyle(
                                                                        shadow = Shadow(
                                                                            color = Color(0xFFFFFFFF),
                                                                            offset = Offset(0f ,0f)
                                                                            , blurRadius = 20f
                                                                        )
                                                                    )
                                                                )
                                                            }
                                                            Spacer(modifier = Modifier.width(15.dp))
                                                            Image(
                                                                painter = aksha,
                                                                contentDescription = null,
                                                                contentScale = ContentScale.Crop,
                                                                modifier = Modifier.size(50.dp)
                                                            )
                                                            Spacer(modifier = Modifier.width(15.dp))
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        Text("")
                                        Text("")
                                        Text("")
                                    }
                                }
                            }
                        }
                        var count by remember { mutableStateOf(0) }
                        IconButton(
                            onClick = { count++ },
                            modifier = Modifier
                                .size(70.dp)
                                .align(Alignment.BottomEnd)
                                .indication(indication = null ,
                                    interactionSource = remember { MutableInteractionSource() }),
                            colors = IconButtonDefaults.iconButtonColors(
                                containerColor = Color(0xFF030A33)
                            )
                        ) {
                            if (count % 2 == 0) {
                                Icon(
                                    imageVector = Icons.Default.Favorite,
                                    contentDescription = null,
                                    modifier = Modifier.size(50.dp),
                                    tint = Color.Transparent
                                )
                                Icon(
                                    imageVector = Icons.Default.FavoriteBorder,
                                    contentDescription = null,
                                    modifier = Modifier.size(50.dp),
                                    tint = Color.White
                                )
                            }
                            if (count % 2 == 1) {
                                Icon(
                                    imageVector = Icons.Default.Favorite,
                                    contentDescription = null,
                                    modifier = Modifier.size(50.dp),
                                    tint = Color.White
                                )
                                Icon(
                                    imageVector = Icons.Default.FavoriteBorder,
                                    contentDescription = null,
                                    modifier = Modifier.size(50.dp),
                                    tint = Color.White
                                )
                            }
                        }
                    }
                }
            }
        }
    }
}
@Composable
fun Comeboland(){
    Image(
        painter = painterResource(id = R.drawable.app_back),
        contentScale = ContentScale.Crop,
        contentDescription = null
    )
    when(currentScreen) {
        "comeboland" -> {
            Column {
                Card(
                    modifier = Modifier
                        .fillMaxWidth()
                        .height(32.5.dp),
                    shape = RectangleShape,
                    colors = CardDefaults.cardColors(containerColor = Color(0xFF030A33))
                ) {
                }
                Column(){
                    Card(
                        modifier = Modifier
                            .fillMaxWidth()
                            .height(50.dp),
                        shape = RectangleShape,
                        colors = CardDefaults.cardColors(containerColor = Color(0xFF0707AD))
                    ) {
                        Row(modifier = Modifier.padding(10.dp)) {
                            IconButton(onClick = {currentScreen = "asli4"
                                backap = true
                            } , colors = IconButtonDefaults.iconButtonColors(contentColor = Color.White)
                                , modifier = Modifier.indication(indication = null ,
                                    interactionSource = remember { MutableInteractionSource() })){
                                Icon(imageVector = Icons.Outlined.ArrowBack, contentDescription = null , modifier = Modifier.size(40.dp))
                            }
                            IconButton(
                                onClick = {},
                                colors = IconButtonDefaults.iconButtonColors(contentColor = Color.White),
                                modifier = Modifier.indication(indication = null ,
                                    interactionSource = remember { MutableInteractionSource() })
                            ) {
                                Icon(imageVector = Icons.Default.Info, contentDescription = null)
                            }
                            IconButton(
                                onClick = {},
                                colors = IconButtonDefaults.iconButtonColors(contentColor = Color.White),
                                modifier = Modifier.indication(indication = null ,
                                    interactionSource = remember { MutableInteractionSource() })
                            ) {
                                Icon(imageVector = Icons.Default.Share, contentDescription = null)
                            }
                            Row(
                                modifier = Modifier.fillMaxWidth(),
                                horizontalArrangement = Arrangement.End,
                                verticalAlignment = Alignment.CenterVertically
                            ) {
                                Text("دنباله دار بلند دوره", fontSize = 20.sp, color = Color.White  , maxLines = 1 , fontWeight = FontWeight.ExtraBold)
                                IconButton(onClick = {expanded = true},
                                    modifier = Modifier.size(50.dp)
                                        .indication(indication = null ,
                                            interactionSource = remember { MutableInteractionSource() }),
                                    colors = IconButtonDefaults.iconButtonColors(contentColor = Color.White)) {
                                    Icon(imageVector = Icons.Default.Menu, contentDescription = null)
                                }
                            }
                        }
                    }
                }
                var textDonbaleDareBolandModat = listOf(
                    ": معرفی کلی\n" +
                            "\n" +
                            "دنباله‌دارهای بلندمدت گروهی از دنباله‌دارها هستند که دورهٔ مداری آنان بیش از ۲۰۰ سال است و در بسیاری موارد حتی هزاران تا میلیون‌ها سال طول می‌کشد تا یک بار به حضیض خورشیدی برسند. برخی از این دنباله‌دارها تنها یک بار در تاریخ بشر دیده شده‌اند و شاید هرگز بازنگردند. منشأ اصلی این اجرام در ابر اورت، در فاصله‌های بسیار دور از خورشید (تا ده‌ها هزار واحد نجومی) است. " +
                            "این دنباله‌دارها نمایانگر ذخایر یخ‌زده و بکر منظومهٔ شمسی هستند که از زمان شکل‌گیری اولیه تقریباً دست‌نخورده باقی مانده‌اند. به دلیل فاصلهٔ زیاد، ورود هر یک از آن‌ها به نواحی درونی منظومه یک رویداد نادر اما بسیار پرشکوه در آسمان است\u202b." +
                            "\n" +
                            "\n" +
                            "\n" +
                            ": چارچوب‌های رده‌بندی و دسته‌بندی\n" +
                            "\n" +
                            "بر اساس دورهٔ مداری: دنباله‌دارهای بلندمدت دارای مدارهایی با دوره‌های بیش از ۲۰۰ سال هستند. برخی مدارها در حد هزاران سال طول می‌کشند و حتی دسته‌ای با دوره‌های میلیون‌ساله وجود دارند. " +
                            "بر اساس شکل مدار: بیشتر این دنباله‌دارها مدارهایی بسیار بیضوی یا نزدیک به سهمی دارند، به‌طوری که حضیض نزدیک خورشید ولی اوج در فاصله‌های عظیم است. " +
                            "بر اساس منشأ: منبع اصلی این گروه ابر اورت است که ذخیرهٔ یخی دوردست منظومهٔ شمسی محسوب می‌شود. " +
                            "بر اساس میزان مشاهده: بعضی از دنباله‌دارهای بلندمدت تنها یک بار دیده شده‌اند (غیر دوره‌ای)، در حالی که معدودی مانند هالی نوع بلندمدت واقعی با دوره مشخص دارند\u202b." +
                            "\n" +
                            "\n" +
                            "\n" +
                            ": اصول و مبانی نظری کلیدی\n" +
                            "\n" +
                            "پویایی مداری: گرانش ستارگان گذری و میدان کشندی کهکشان گاه اجرام ابر اورت را مختل کرده و آن‌ها را به سمت خورشید هدایت می‌کند. " +
                            "ساختار و ترکیب: هستهٔ این دنباله‌دارها عمدتاً از یخ‌های بسیار سرد و مواد آلی پیچیده تشکیل شده که در اعماق سرد فضا برای میلیاردها سال محفوظ مانده‌اند. " +
                            "فرسایش: با ورود به نزدیکی خورشید، دنباله‌دارهای بلندمدت معمولاً فوران‌های شدیدی از گاز و غبار نشان می‌دهند زیرا سطح آن‌ها پیش‌تر در معرض حرارت قرار نگرفته است. " +
                            "اهمیت کیهانی: این اجرام پنجره‌ای بی‌بدیل به شرایط آغازین منظومهٔ شمسی و ترکیبات میان‌ستاره‌ای زمان تولد آن هستند\u202b." +
                            "\n" +
                            "\n" +
                            "\n" +
                            ": کاربردها و پیش‌بینی‌ها\n" +
                            "\n" +
                            "شناخت ترکیب آغازین: دنباله‌دارهای بلندمدت به دلیل دست‌نخورده بودن، بهترین نمونه برای مطالعهٔ مواد اولیهٔ سازندهٔ منظومهٔ شمسی هستند. " +
                            "ردیابی تاریخچهٔ دینامیکی: بررسی مدارها به ما امکان می‌دهد تا اثر میدان کهکشانی و ستارگان گذری بر ساختار ابر اورت را بازسازی کنیم. " +
                            "پیش‌بینی ظهورهای آینده: هرچند به دلیل دوره‌های بسیار طولانی پیش‌بینی دقیق دشوار است، اما فناوری امروزی توانسته بازگشت بعضی نمونه‌ها را تخمین بزند. " +
                            "کاربرد در مأموریت‌های فضایی: در آینده مأموریت‌هایی برای رهگیری یا نمونه‌برداری از دنباله‌دارهای بلندمدت در نظر گرفته می‌شود که می‌تواند به درک بهتر منشاء حیات کمک کند\u202b." +
                            "\n" +
                            "\n" +
                            "\n" +
                            ": نقش در علم و فناوری\n" +
                            "\n" +
                            "پژوهش‌های اخترفیزیکی: رصد دنباله‌دارهای بلندمدت اطلاعاتی دربارهٔ پویایی‌های دوردست منظومهٔ شمسی و تعامل آن با کهکشان ارائه می‌دهد. " +
                            "منشأ احتمالی حیات: ترکیبات آلی پیچیده در این اجرام می‌تواند سرنخ‌هایی از ورود مولکول‌های آلی به زمین در آغاز تاریخ حیات بدهد. " +
                            "الهام فرهنگی: دنباله‌دارهای بلندمدت اغلب با روشنایی خیره‌کننده در آسمان ظاهر می‌شوند و از دیرباز الهام‌بخش اسطوره‌ها و ادبیات بوده‌اند. " +
                            "فناوری رصدی: مطالعهٔ این اجرام باعث توسعهٔ سامانه‌های پیشرفتهٔ هشدار سریع و تلسکوپ‌های مجهز برای شناسایی اجرام نزدیک به زمین شده است\u202b." +
                            "\n" +
                            "\n" +
                            "\n" +
                            ": بخش نظری برجسته\n" +
                            "\n" +
                            "دنباله‌دار هیل باپ: یکی از درخشان‌ترین دنباله‌دارهای سدهٔ بیستم که در سال ۱۹۹۷ به‌خوبی قابل مشاهده بود و دورهٔ آن بیش از ۲۵۰۰ سال است. " +
                            "دنباله‌دار هییاکوتاکه: در سال ۱۹۹۶ بسیار نزدیک از کنار زمین گذشت و نمایشی تماشایی داشت؛ دورهٔ مداری حدود ۷۰ هزار سال. " +
                            "دنباله‌دار مک‌نات: در سال ۲۰۰۷ با درخشندگی بی‌سابقه‌ای در نیمکرهٔ جنوبی ظاهر شد و به عنوان یکی از درخشان‌ترین دنباله‌دارهای عصر مدرن شناخته شد. " +
                            "دنباله‌دار نیوآیز: در سال ۲۰۲۰ با دم بلند و روشنایی قابل توجه ظاهر شد؛ یک نمونهٔ تازه از دنباله‌دارهای بلندمدت. " +
                            "دنباله‌دارهای غیردوره‌ای: بسیاری از این اجرام پس از یک بار ورود به ناحیهٔ درونی منظومه احتمالاً هرگز بازنمی‌گردند و تنها شاهدی زودگذر از اعماق ابر اورت هستند\u202b."
                )
                val textmortabet = listOf("دنباله دار کوتاه دوره", "دنباله دار تک گذر", "ساختار دنباله دارها", "منشأ دنباله دارها", "دنباله دار معروف", "دنباله دار میانی" , "چرخه دنباله دار", "تأثیر دنباله دار" , "مقایسه دنباله دارها")
                val imagemortabet = listOf(
                    painterResource(R.drawable.cometkotahdore),
                    painterResource(R.drawable.cometzodgozar),
                    painterResource(R.drawable.cometsakhtar),
                    painterResource(R.drawable.cometmanshae),
                    painterResource(R.drawable.cometfamus),
                    painterResource(R.drawable.comemiansetaree),
                    painterResource(R.drawable.comecharkhehayat),
                    painterResource(R.drawable.cometaethirbarzamin),
                    painterResource(R.drawable.cometmoghayese),
                )
                val tarkib = textmortabet.zip(imagemortabet)
                Column(
                    modifier = Modifier
                        .padding(25.dp)
                        .fillMaxSize()
                ) {
                    Box(modifier = Modifier.fillMaxSize())
                    {
                        LazyColumn(
                            horizontalAlignment = Alignment.CenterHorizontally
                        ) {
                            items(textDonbaleDareBolandModat) { letter ->
                                Column(modifier = Modifier.padding(30.dp)) {
                                    Row {
                                        Image(painter = painterResource(id = R.drawable.cometbolanddore)
                                            , contentDescription = null , contentScale = ContentScale.Crop
                                            , modifier = Modifier.size(100.dp))
                                        Column {
                                            Text("")
                                            Row(modifier = Modifier.fillMaxWidth()
                                                ,horizontalArrangement = Arrangement.End
                                                , verticalAlignment = Alignment.CenterVertically) {
                                                Text("دنباله دار بلند دوره" , fontSize = 20.sp  , color = Color.White , style = TextStyle(
                                                    shadow = Shadow(
                                                        color = Color(0xFFFFFFFF),
                                                        offset = Offset(0f ,0f)
                                                        , blurRadius = 20f
                                                    )
                                                ), maxLines = 1)
                                            }
                                        }
                                    }
                                }
                                Box(
                                    modifier = Modifier.fillMaxSize(),
                                    contentAlignment = Alignment.CenterStart,
                                ) {
                                    Column {
                                        Text(
                                            "$letter",
                                            fontSize = 20.sp,
                                            color = Color(0xFFFFFFFF),
                                            lineHeight = 32.sp,
                                            textAlign = TextAlign.Right
                                            , style = TextStyle(
                                                shadow = Shadow(
                                                    color = Color(0xFFFFFFFF),
                                                    offset = Offset(0f ,0f)
                                                    , blurRadius = 20f
                                                )
                                            )
                                        )
                                        Text("")
                                        Text("")
                                        Text("")
                                        Text(
                                            "موضوعات مرتبط",
                                            textAlign = TextAlign.Right,
                                            modifier = Modifier.fillMaxWidth(),
                                            fontSize = 30.sp,
                                            color = Color.White
                                            , style = TextStyle(
                                                shadow = Shadow(
                                                    color = Color(0xFFFFFFFF),
                                                    offset = Offset(0f ,0f)
                                                    , blurRadius = 20f
                                                )
                                            )
                                        )
                                        Text("")
                                        LazyRow(reverseLayout = true) {
                                            items(tarkib) { (matnha, aksha) ->
                                                Card(
                                                    modifier = Modifier
                                                        .width(250.dp)
                                                        .height(120.dp)
                                                        .padding(20.dp)
                                                        .clip(shape = RoundedCornerShape(100.dp)),
                                                    shape = RectangleShape,
                                                    colors = CardDefaults.cardColors(
                                                        containerColor = Color(
                                                            0xFF0707AD
                                                        )
                                                    )
                                                ) {
                                                    Box(
                                                        modifier = Modifier.fillMaxSize(),
                                                        contentAlignment = Alignment.CenterEnd
                                                    ) {
                                                        Image(
                                                            painter = painterResource(id = R.drawable.card),
                                                            contentScale = ContentScale.Crop,
                                                            contentDescription = null,
                                                            modifier = Modifier.fillMaxSize()
                                                        )
                                                        Button(
                                                            modifier = Modifier.fillMaxSize(
                                                            ).indication(indication = null ,
                                                                interactionSource = remember { MutableInteractionSource() }), onClick = {
                                                                if (matnha == "دنباله دار کوتاه دوره") {
                                                                    backap = false
                                                                    currentScreen = "comekotah"
                                                                }
                                                                if (matnha == "دنباله دار بلند دوره") {
                                                                    currentScreen = "comeboland"
                                                                    backap = false
                                                                }
                                                                if (matnha == "دنباله دار تک گذر") {
                                                                    backap = false
                                                                    currentScreen = "cometakgozar"
                                                                }
                                                                if (matnha == "ساختار دنباله دارها") {
                                                                    currentScreen = "comesakhtar"
                                                                    backap = false
                                                                }
                                                                if (matnha == "منشأ دنباله دارها") {
                                                                    backap = false
                                                                    currentScreen = "comemanshae"
                                                                }
                                                                if (matnha == "دنباله دار معروف") {
                                                                    backap = false
                                                                    currentScreen = "comefamus"
                                                                }
                                                                if (matnha == "دنباله دار میانی") {
                                                                    backap = false
                                                                    currentScreen = "comemiani"
                                                                }
                                                                if (matnha == "چرخه دنباله دار") {
                                                                    backap = false
                                                                    currentScreen = "comecharkhe"
                                                                }
                                                                if (matnha == "تأثیر دنباله دار") {
                                                                    backap = false
                                                                    currentScreen = "cometaethir"
                                                                }
                                                                if (matnha == "مقایسه دنباله دارها") {
                                                                    backap = false
                                                                    currentScreen = "comemoghayese"
                                                                }
                                                            }, colors = ButtonDefaults.buttonColors(
                                                                contentColor = Color.Transparent,
                                                                containerColor = Color.Transparent
                                                            )) {
                                                        }
                                                        Row() {
                                                            Spacer(modifier = Modifier.width(10.dp))
                                                            Column {
                                                                Spacer(modifier = Modifier.height(9.dp))
                                                                Text(
                                                                    "$matnha",
                                                                    color = Color.White,
                                                                    fontSize = 20.sp
                                                                    , style = TextStyle(
                                                                        shadow = Shadow(
                                                                            color = Color(0xFFFFFFFF),
                                                                            offset = Offset(0f ,0f)
                                                                            , blurRadius = 20f
                                                                        )
                                                                    )
                                                                )
                                                            }
                                                            Spacer(modifier = Modifier.width(15.dp))
                                                            Image(
                                                                painter = aksha,
                                                                contentDescription = null,
                                                                contentScale = ContentScale.Crop,
                                                                modifier = Modifier.size(50.dp)
                                                            )
                                                            Spacer(modifier = Modifier.width(15.dp))
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        Text("")
                                        Text("")
                                        Text("")
                                    }
                                }
                            }
                        }
                        var count by remember { mutableStateOf(0) }
                        IconButton(
                            onClick = { count++ },
                            modifier = Modifier
                                .size(70.dp)
                                .align(Alignment.BottomEnd)
                                .indication(indication = null ,
                                    interactionSource = remember { MutableInteractionSource() }),
                            colors = IconButtonDefaults.iconButtonColors(
                                containerColor = Color(0xFF030A33)
                            )
                        ) {
                            if (count % 2 == 0) {
                                Icon(
                                    imageVector = Icons.Default.Favorite,
                                    contentDescription = null,
                                    modifier = Modifier.size(50.dp),
                                    tint = Color.Transparent
                                )
                                Icon(
                                    imageVector = Icons.Default.FavoriteBorder,
                                    contentDescription = null,
                                    modifier = Modifier.size(50.dp),
                                    tint = Color.White
                                )
                            }
                            if (count % 2 == 1) {
                                Icon(
                                    imageVector = Icons.Default.Favorite,
                                    contentDescription = null,
                                    modifier = Modifier.size(50.dp),
                                    tint = Color.White
                                )
                                Icon(
                                    imageVector = Icons.Default.FavoriteBorder,
                                    contentDescription = null,
                                    modifier = Modifier.size(50.dp),
                                    tint = Color.White
                                )
                            }
                        }
                    }
                }
            }
        }
    }
}
@Composable
fun Cometakgozar(){
    Image(
        painter = painterResource(id = R.drawable.app_back),
        contentScale = ContentScale.Crop,
        contentDescription = null
    )
    when(currentScreen) {
        "cometakgozar" -> {
            Column {
                Card(
                    modifier = Modifier
                        .fillMaxWidth()
                        .height(32.5.dp),
                    shape = RectangleShape,
                    colors = CardDefaults.cardColors(containerColor = Color(0xFF030A33))
                ) {
                }
                Column(){
                    Card(
                        modifier = Modifier
                            .fillMaxWidth()
                            .height(50.dp),
                        shape = RectangleShape,
                        colors = CardDefaults.cardColors(containerColor = Color(0xFF0707AD))
                    ) {
                        Row(modifier = Modifier.padding(10.dp)) {
                            IconButton(onClick = {currentScreen = "asli4"
                                backap = true
                            } , colors = IconButtonDefaults.iconButtonColors(contentColor = Color.White)
                                , modifier = Modifier.indication(indication = null ,
                                    interactionSource = remember { MutableInteractionSource() })){
                                Icon(imageVector = Icons.Outlined.ArrowBack, contentDescription = null , modifier = Modifier.size(40.dp))
                            }
                            IconButton(
                                onClick = {},
                                colors = IconButtonDefaults.iconButtonColors(contentColor = Color.White),
                                modifier = Modifier.indication(indication = null ,
                                    interactionSource = remember { MutableInteractionSource() })
                            ) {
                                Icon(imageVector = Icons.Default.Info, contentDescription = null)
                            }
                            IconButton(
                                onClick = {},
                                colors = IconButtonDefaults.iconButtonColors(contentColor = Color.White),
                                modifier = Modifier.indication(indication = null ,
                                    interactionSource = remember { MutableInteractionSource() })
                            ) {
                                Icon(imageVector = Icons.Default.Share, contentDescription = null)
                            }
                            Row(
                                modifier = Modifier.fillMaxWidth(),
                                horizontalArrangement = Arrangement.End,
                                verticalAlignment = Alignment.CenterVertically
                            ) {
                                Text("دنباله دار تک گذر", fontSize = 20.sp, color = Color.White  , maxLines = 1 , fontWeight = FontWeight.ExtraBold)
                                IconButton(onClick = {expanded = true},
                                    modifier = Modifier.size(50.dp)
                                        .indication(indication = null ,
                                            interactionSource = remember { MutableInteractionSource() }),
                                    colors = IconButtonDefaults.iconButtonColors(contentColor = Color.White)) {
                                    Icon(imageVector = Icons.Default.Menu, contentDescription = null)
                                }
                            }
                        }
                    }
                }
                var textDonbaleDareTakGozar = listOf(
                    ": معرفی کلی\n" +
                            "\n" +
                            "دنباله‌دارهای تک‌گذر گروهی از دنباله‌دارها هستند که تنها یک بار در تاریخ بشر به ناحیهٔ درونی منظومهٔ شمسی وارد می‌شوند و پس از آن هرگز بازنمی‌گردند. " +
                            "مدار این اجرام معمولاً باز (سهمی یا هذلولی) است و سرعت فرار آن‌ها به اندازه‌ای است که از گرانش خورشید می‌گریزند. " +
                            "بسیاری از این دنباله‌دارها از ابر اورت به‌سوی منظومهٔ شمسی درونی کشیده می‌شوند یا حتی منشأیی میان‌ستاره‌ای دارند. " +
                            "ظاهر شدن یک دنباله‌دار تک‌گذر اغلب رویدادی شگفت‌انگیز است، زیرا با درخشندگی فراوان و دم‌های بسیار بلند در آسمان نمایان می‌شود و فرصتی یگانه برای مطالعهٔ مواد دست‌نخوردهٔ کیهانی فراهم می‌آورد\u202b." +
                            "\n" +
                            "\n" +
                            "\n" +
                            ": چارچوب‌های رده‌بندی و دسته‌بندی\n" +
                            "\n" +
                            "بر اساس مدار: این دنباله‌دارها دارای مدارهای سهمی یا هذلولی هستند که نشان می‌دهد پس از گذر حضیض هرگز بازنمی‌گردند. " +
                            "بر اساس منشأ: برخی منشأ در ابر اورت دارند، برخی احتمالاً از نواحی میان‌ستاره‌ای وارد می‌شوند. " +
                            "بر اساس فعالیت: شدت فعالیت این دنباله‌دارها اغلب بسیار زیاد است زیرا نخستین بار به خورشید نزدیک می‌شوند و یخ‌های سطحی کاملاً بکر و دست‌نخورده‌اند. " +
                            "بر اساس قابلیت مشاهده: بعضی از آن‌ها بسیار درخشان و چشمگیرند (مانند دنباله‌دارهای بزرگ)، در حالی‌که برخی با چشم غیرمسلح دیده نمی‌شوند و تنها با تلسکوپ قابل ردیابی‌اند\u202b." +
                            "\n" +
                            "\n" +
                            "\n" +
                            ": اصول و مبانی نظری کلیدی\n" +
                            "\n" +
                            "پویایی مداری: گرانش ستارگان گذری یا اختلال کهکشانی می‌تواند اجرام ابر اورت را به مدارهایی با خروج از مرکز بسیار بالا هدایت کند و باعث ورودشان به منظومهٔ شمسی شود. " +
                            "منشأ میان‌ستاره‌ای: برخی دنباله‌دارهای تک‌گذر احتمالاً از فراسوی منظومهٔ شمسی می‌آیند و برای همیشه از آن عبور می‌کنند. " +
                            "ساختار و ترکیب: این اجرام دارای یخ‌های بسیار سرد و مواد آلی هستند که از زمان شکل‌گیری کیهان در حالت اولیه باقی مانده‌اند. " +
                            "ویژگی‌های نوری: نخستین نزدیکی به خورشید باعث فعالیت انفجاری و ایجاد دم‌های عظیم می‌شود که آن‌ها را به پدیده‌های درخشان آسمان شب تبدیل می‌کند\u202b." +
                            "\n" +
                            "\n" +
                            "\n" +
                            ": کاربردها و پیش‌بینی‌ها\n" +
                            "\n" +
                            "شناخت مادهٔ آغازین: این دنباله‌دارها بهترین نمونه برای بررسی شرایط آغازین منظومهٔ شمسی و شاید حتی ترکیبات میان‌ستاره‌ای هستند. " +
                            "پیش‌بینی ظهور: به دلیل مدارهای باز و غیرتکراری، پیش‌بینی بازگشت آن‌ها ممکن نیست و هر ظهور فرصتی تکرارنشدنی است. " +
                            "کاربرد در اخترزیست‌شناسی: ترکیبات آلی پیچیده در این دنباله‌دارها می‌تواند سرنخی از منشأ حیات در زمین یا دیگر سیارات باشد. " +
                            "چالش‌های رصدی: به دلیل سرعت بالا و مسیر غیرقابل‌تکرار، مطالعهٔ دقیق آن‌ها نیازمند واکنش سریع و فناوری پیشرفتهٔ رصدی است\u202b." +
                            "\n" +
                            "\n" +
                            "\n" +
                            ": نقش در علم و فناوری\n" +
                            "\n" +
                            "توسعهٔ فناوری هشدار: شناسایی سریع دنباله‌دارهای تک‌گذر موجب ارتقای سیستم‌های کشف اجرام گذری شده است. " +
                            "منبع دادهٔ نو: مطالعهٔ آن‌ها اطلاعاتی از خارج از محدودهٔ منظومهٔ شمسی در اختیار دانشمندان می‌گذارد. " +
                            "الهام فرهنگی: پدیدار شدن ناگهانی و شگفت‌انگیز این دنباله‌دارها در آسمان همواره بازتاب گسترده‌ای در فرهنگ، اسطوره و هنر داشته است. " +
                            "گسترش مرزهای علمی: رصد این اجرام به اخترشناسان امکان داده تا اثرات گرانشی کهکشان و تعامل میان‌ستاره‌ای را بهتر بشناسند\u202b." +
                            "\n" +
                            "\n" +
                            "\n" +
                            ": بخش نظری برجسته\n" +
                            "\n" +
                            "دنباله‌دار آیسان: در سال ۲۰۱۳ به عنوان یک دنباله‌دار تک‌گذر توجه جهانی را به خود جلب کرد؛ هرچند در نزدیکی خورشید متلاشی شد. " +
                            "دنباله‌دار هییاکوتاکه: هرچند در دستهٔ بلندمدت جای دارد، اما بسیاری از ویژگی‌های بارز یک تک‌گذر را در نمایش خود در ۱۹۹۶ نشان داد. " +
                            "دنباله‌دار مک‌نات: در سال ۲۰۰۷ با درخشندگی چشمگیر و دم عظیم در نیمکرهٔ جنوبی ظاهر شد و از زیباترین دنباله‌دارهای عصر جدید به شمار آمد. " +
                            "دنباله‌دار نیوآیز: در سال ۲۰۲۰ به‌طور ناگهانی ظاهر شد و دم بلند و درخشان آن باعث شد میلیون‌ها نفر در سراسر جهان شاهد پدیده‌ای شگفت‌انگیز باشند. " +
                            "دنباله‌دارهای میان‌ستاره‌ای: نمونه‌هایی مانند اوموآموا و بوریسوف نمونه‌هایی ویژه از اجرام تک‌گذر هستند که منشأ میان‌ستاره‌ای دارند و مسیرشان نشان می‌دهد که هرگز به منظومهٔ شمسی بازنخواهند گشت\u202b."
                )
                val textmortabet = listOf("دنباله دار کوتاه دوره", "دنباله دار بلند دوره", "ساختار دنباله دارها", "منشأ دنباله دارها", "دنباله دار معروف", "دنباله دار میانی" , "چرخه دنباله دار", "تأثیر دنباله دار" , "مقایسه دنباله دارها")
                val imagemortabet = listOf(
                    painterResource(R.drawable.cometkotahdore),
                    painterResource(R.drawable.cometbolanddore),
                    painterResource(R.drawable.cometsakhtar),
                    painterResource(R.drawable.cometmanshae),
                    painterResource(R.drawable.cometfamus),
                    painterResource(R.drawable.comemiansetaree),
                    painterResource(R.drawable.comecharkhehayat),
                    painterResource(R.drawable.cometaethirbarzamin),
                    painterResource(R.drawable.cometmoghayese),
                )
                val tarkib = textmortabet.zip(imagemortabet)
                Column(
                    modifier = Modifier
                        .padding(25.dp)
                        .fillMaxSize()
                ) {
                    Box(modifier = Modifier.fillMaxSize())
                    {
                        LazyColumn(
                            horizontalAlignment = Alignment.CenterHorizontally
                        ) {
                            items(textDonbaleDareTakGozar) { letter ->
                                Column(modifier = Modifier.padding(30.dp)) {
                                    Row {
                                        Image(painter = painterResource(id = R.drawable.cometzodgozar)
                                            , contentDescription = null , contentScale = ContentScale.Crop
                                            , modifier = Modifier.size(100.dp))
                                        Column {
                                            Text("")
                                            Row(modifier = Modifier.fillMaxWidth()
                                                ,horizontalArrangement = Arrangement.End
                                                , verticalAlignment = Alignment.CenterVertically) {
                                                Text("دنباله دار تک گذر" , fontSize = 20.sp  , color = Color.White , style = TextStyle(
                                                    shadow = Shadow(
                                                        color = Color(0xFFFFFFFF),
                                                        offset = Offset(0f ,0f)
                                                        , blurRadius = 20f
                                                    )
                                                ), maxLines = 1)
                                            }
                                        }
                                    }
                                }
                                Box(
                                    modifier = Modifier.fillMaxSize(),
                                    contentAlignment = Alignment.CenterStart,
                                ) {
                                    Column {
                                        Text(
                                            "$letter",
                                            fontSize = 20.sp,
                                            color = Color(0xFFFFFFFF),
                                            lineHeight = 32.sp,
                                            textAlign = TextAlign.Right
                                            , style = TextStyle(
                                                shadow = Shadow(
                                                    color = Color(0xFFFFFFFF),
                                                    offset = Offset(0f ,0f)
                                                    , blurRadius = 20f
                                                )
                                            )
                                        )
                                        Text("")
                                        Text("")
                                        Text("")
                                        Text(
                                            "موضوعات مرتبط",
                                            textAlign = TextAlign.Right,
                                            modifier = Modifier.fillMaxWidth(),
                                            fontSize = 30.sp,
                                            color = Color.White
                                            , style = TextStyle(
                                                shadow = Shadow(
                                                    color = Color(0xFFFFFFFF),
                                                    offset = Offset(0f ,0f)
                                                    , blurRadius = 20f
                                                )
                                            )
                                        )
                                        Text("")
                                        LazyRow(reverseLayout = true) {
                                            items(tarkib) { (matnha, aksha) ->
                                                Card(
                                                    modifier = Modifier
                                                        .width(250.dp)
                                                        .height(120.dp)
                                                        .padding(20.dp)
                                                        .clip(shape = RoundedCornerShape(100.dp)),
                                                    shape = RectangleShape,
                                                    colors = CardDefaults.cardColors(
                                                        containerColor = Color(
                                                            0xFF0707AD
                                                        )
                                                    )
                                                ) {
                                                    Box(
                                                        modifier = Modifier.fillMaxSize(),
                                                        contentAlignment = Alignment.CenterEnd
                                                    ) {
                                                        Image(
                                                            painter = painterResource(id = R.drawable.card),
                                                            contentScale = ContentScale.Crop,
                                                            contentDescription = null,
                                                            modifier = Modifier.fillMaxSize()
                                                        )
                                                        Button(
                                                            modifier = Modifier.fillMaxSize(
                                                            ).indication(indication = null ,
                                                                interactionSource = remember { MutableInteractionSource() }), onClick = {
                                                                if (matnha == "دنباله دار کوتاه دوره") {
                                                                    backap = false
                                                                    currentScreen = "comekotah"
                                                                }
                                                                if (matnha == "دنباله دار بلند دوره") {
                                                                    currentScreen = "comeboland"
                                                                    backap = false
                                                                }
                                                                if (matnha == "دنباله دار تک گذر") {
                                                                    backap = false
                                                                    currentScreen = "cometakgozar"
                                                                }
                                                                if (matnha == "ساختار دنباله دارها") {
                                                                    currentScreen = "comesakhtar"
                                                                    backap = false
                                                                }
                                                                if (matnha == "منشأ دنباله دارها") {
                                                                    backap = false
                                                                    currentScreen = "comemanshae"
                                                                }
                                                                if (matnha == "دنباله دار معروف") {
                                                                    backap = false
                                                                    currentScreen = "comefamus"
                                                                }
                                                                if (matnha == "دنباله دار میانی") {
                                                                    backap = false
                                                                    currentScreen = "comemiani"
                                                                }
                                                                if (matnha == "چرخه دنباله دار") {
                                                                    backap = false
                                                                    currentScreen = "comecharkhe"
                                                                }
                                                                if (matnha == "تأثیر دنباله دار") {
                                                                    backap = false
                                                                    currentScreen = "cometaethir"
                                                                }
                                                                if (matnha == "مقایسه دنباله دارها") {
                                                                    backap = false
                                                                    currentScreen = "comemoghayese"
                                                                }
                                                            }, colors = ButtonDefaults.buttonColors(
                                                                contentColor = Color.Transparent,
                                                                containerColor = Color.Transparent
                                                            )) {
                                                        }
                                                        Row() {
                                                            Spacer(modifier = Modifier.width(10.dp))
                                                            Column {
                                                                Spacer(modifier = Modifier.height(9.dp))
                                                                Text(
                                                                    "$matnha",
                                                                    color = Color.White,
                                                                    fontSize = 20.sp
                                                                    , style = TextStyle(
                                                                        shadow = Shadow(
                                                                            color = Color(0xFFFFFFFF),
                                                                            offset = Offset(0f ,0f)
                                                                            , blurRadius = 20f
                                                                        )
                                                                    )
                                                                )
                                                            }
                                                            Spacer(modifier = Modifier.width(15.dp))
                                                            Image(
                                                                painter = aksha,
                                                                contentDescription = null,
                                                                contentScale = ContentScale.Crop,
                                                                modifier = Modifier.size(50.dp)
                                                            )
                                                            Spacer(modifier = Modifier.width(15.dp))
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        Text("")
                                        Text("")
                                        Text("")
                                    }
                                }
                            }
                        }
                        var count by remember { mutableStateOf(0) }
                        IconButton(
                            onClick = { count++ },
                            modifier = Modifier
                                .size(70.dp)
                                .align(Alignment.BottomEnd)
                                .indication(indication = null ,
                                    interactionSource = remember { MutableInteractionSource() }),
                            colors = IconButtonDefaults.iconButtonColors(
                                containerColor = Color(0xFF030A33)
                            )
                        ) {
                            if (count % 2 == 0) {
                                Icon(
                                    imageVector = Icons.Default.Favorite,
                                    contentDescription = null,
                                    modifier = Modifier.size(50.dp),
                                    tint = Color.Transparent
                                )
                                Icon(
                                    imageVector = Icons.Default.FavoriteBorder,
                                    contentDescription = null,
                                    modifier = Modifier.size(50.dp),
                                    tint = Color.White
                                )
                            }
                            if (count % 2 == 1) {
                                Icon(
                                    imageVector = Icons.Default.Favorite,
                                    contentDescription = null,
                                    modifier = Modifier.size(50.dp),
                                    tint = Color.White
                                )
                                Icon(
                                    imageVector = Icons.Default.FavoriteBorder,
                                    contentDescription = null,
                                    modifier = Modifier.size(50.dp),
                                    tint = Color.White
                                )
                            }
                        }
                    }
                }
            }
        }
    }
}
@Composable
fun Cometsakhtar(){
    Image(
        painter = painterResource(id = R.drawable.app_back),
        contentScale = ContentScale.Crop,
        contentDescription = null
    )
    when(currentScreen) {
        "comesakhtar" -> {
            Column {
                Card(
                    modifier = Modifier
                        .fillMaxWidth()
                        .height(32.5.dp),
                    shape = RectangleShape,
                    colors = CardDefaults.cardColors(containerColor = Color(0xFF030A33))
                ) {
                }
                Column(){
                    Card(
                        modifier = Modifier
                            .fillMaxWidth()
                            .height(50.dp),
                        shape = RectangleShape,
                        colors = CardDefaults.cardColors(containerColor = Color(0xFF0707AD))
                    ) {
                        Row(modifier = Modifier.padding(10.dp)) {
                            IconButton(onClick = {currentScreen = "asli4"
                                backap = true
                            } , colors = IconButtonDefaults.iconButtonColors(contentColor = Color.White)
                                , modifier = Modifier.indication(indication = null ,
                                    interactionSource = remember { MutableInteractionSource() })){
                                Icon(imageVector = Icons.Outlined.ArrowBack, contentDescription = null , modifier = Modifier.size(40.dp))
                            }
                            IconButton(
                                onClick = {},
                                colors = IconButtonDefaults.iconButtonColors(contentColor = Color.White),
                                modifier = Modifier.indication(indication = null ,
                                    interactionSource = remember { MutableInteractionSource() })
                            ) {
                                Icon(imageVector = Icons.Default.Info, contentDescription = null)
                            }
                            IconButton(
                                onClick = {},
                                colors = IconButtonDefaults.iconButtonColors(contentColor = Color.White),
                                modifier = Modifier.indication(indication = null ,
                                    interactionSource = remember { MutableInteractionSource() })
                            ) {
                                Icon(imageVector = Icons.Default.Share, contentDescription = null)
                            }
                            Row(
                                modifier = Modifier.fillMaxWidth(),
                                horizontalArrangement = Arrangement.End,
                                verticalAlignment = Alignment.CenterVertically
                            ) {
                                Text("ساختار دنباله دارها", fontSize = 20.sp, color = Color.White  , maxLines = 1 , fontWeight = FontWeight.ExtraBold)
                                IconButton(onClick = {expanded = true},
                                    modifier = Modifier.size(50.dp)
                                        .indication(indication = null ,
                                            interactionSource = remember { MutableInteractionSource() }),
                                    colors = IconButtonDefaults.iconButtonColors(contentColor = Color.White)) {
                                    Icon(imageVector = Icons.Default.Menu, contentDescription = null)
                                }
                            }
                        }
                    }
                }
                var textSakhtarDonbaleDarha = listOf(
                    ": معرفی کلی\n" +
                            "\n" +
                            "ساختار دنباله‌دارها از چند بخش اصلی تشکیل شده است که هر یک ویژگی‌ها و نقش خاصی در رفتار این اجرام کیهانی دارند. " +
                            "دنباله‌دارها بقایای یخی و سنگی از دوران آغازین منظومهٔ شمسی هستند که شامل هسته، کما، دم یونی و دم گرد و غباری‌اند. " +
                            "مطالعهٔ این ساختارها دیدگاهی منحصر به فرد دربارهٔ شرایط اولیهٔ شکل‌گیری منظومهٔ شمسی و ترکیبات بنیادین آن فراهم می‌کند. " +
                            "تفاوت در ساختار دنباله‌دارها موجب تنوع ظاهری و رفتاری آن‌ها در هنگام نزدیک‌شدن به خورشید می‌شود\u202b." +
                            "\n" +
                            "\n" +
                            "\n" +
                            ": چارچوب‌های رده‌بندی و دسته‌بندی\n" +
                            "\n" +
                            "بر اساس هسته: اندازه، ترکیب یخ‌ها، و نسبت مواد سنگی به یخی. " +
                            "بر اساس کما: گستردگی و شدت فعالیت در اطراف هسته. " +
                            "بر اساس دم‌ها: وجود دم یونی (یونی شده توسط باد خورشیدی) و دم گرد و غباری (بازتاب نور خورشید). " +
                            "بر اساس فعالیت: دنباله‌دارهای فعال با خروج گاز و غبار گسترده در برابر دنباله‌دارهای خاموش و کم‌فعالیت. " +
                            "بر اساس پایداری: برخی دنباله‌دارها به دلیل ساختار ضعیف در نزدیکی خورشید متلاشی می‌شوند، در حالی که برخی دیگر چندین بار مدار خود را طی می‌کنند\u202b." +
                            "\n" +
                            "\n" +
                            "\n" +
                            ": اصول و مبانی نظری کلیدی\n" +
                            "\n" +
                            "هسته: معمولاً از یخ‌های آب، کربن‌دی‌اکسید، منواکسیدکربن، متان، آمونیاک و مواد آلی پیچیده همراه با ذرات سنگی تشکیل شده است. " +
                            "کما: ابر گازی و غباری که بر اثر گرم‌شدن هسته در اطراف آن تشکیل می‌شود و به اندازهٔ هزاران کیلومتر گسترش می‌یابد. " +
                            "دم یونی: در اثر برهم‌کنش گازهای یونیزه با باد خورشیدی ایجاد شده و همیشه در جهت مخالف خورشید کشیده می‌شود. " +
                            "دم گرد و غباری: ذرات جامد که بر اثر فشار تابشی خورشید از هسته جدا می‌شوند و در مسیر مدار دنباله‌دار کشیده می‌شوند. " +
                            "پوستهٔ سطحی: لایه‌ای از گرد و غبار تیره که می‌تواند جلوی تبخیر یخ‌ها را گرفته و فعالیت دنباله‌دار را کنترل کند\u202b." +
                            "\n" +
                            "\n" +
                            "\n" +
                            ": کاربردها و پیش‌بینی‌ها\n" +
                            "\n" +
                            "شناخت تاریخچهٔ منظومهٔ شمسی از طریق بررسی ترکیب هستهٔ دنباله‌دارها. " +
                            "بررسی نقش دنباله‌دارها در انتقال آب و ترکیبات آلی به زمین اولیه. " +
                            "پیش‌بینی تغییرات فعالیت دنباله‌دارها بر اساس ساختار هسته و میزان یخ‌های فرّار. " +
                            "ارزیابی خطر برخورد قطعات متلاشی‌شدهٔ دنباله‌دارها با زمین و اثرات بالقوهٔ آن. " +
                            "برنامه‌ریزی برای مأموریت‌های فضایی آینده به‌منظور نمونه‌برداری و بررسی دقیق هسته\u202b." +
                            "\n" +
                            "\n" +
                            "\n" +
                            ": نقش در علم و فناوری\n" +
                            "\n" +
                            "الهام برای طراحی فضاپیماهای پیشرفته مانند مأموریت روزتا که ساختار هسته را از نزدیک بررسی کرد. " +
                            "کاربرد داده‌های طیفی در توسعهٔ روش‌های جدید شناسایی مواد آلی و یخی در فضا. " +
                            "ارتقای فناوری تصویربرداری و آشکارسازی ذرات ریز در محیط‌های کیهانی. " +
                            "بهبود مدل‌های دینامیکی برای پیش‌بینی رفتار دنباله‌دارها و تعامل آن‌ها با باد خورشیدی. " +
                            "استفاده از شبیه‌سازی‌های رایانه‌ای برای بازسازی فرایندهای فیزیکی و شیمیایی در هستهٔ دنباله‌دارها\u202b." +
                            "\n" +
                            "\n" +
                            "\n" +
                            ": بخش نظری برجسته\n" +
                            "\n" +
                            "مأموریت روزتا و فیله: نخستین کاوشگر که روی هستهٔ دنباله‌دار ۶۷پی فرود آمد و ساختار سطحی و ترکیب آن را آشکار ساخت. " +
                            "مدل گلولهٔ برفی کثیف: نظریهٔ معروفی که دنباله‌دارها را به‌عنوان ترکیبی از یخ و غبار توصیف می‌کند. " +
                            "شواهد انتقال آب: ایزوتوپ‌های هیدروژن در برخی دنباله‌دارها با آب زمین همخوانی دارد و فرضیهٔ نقش آن‌ها در تأمین آب زمین را تقویت می‌کند. " +
                            "دنباله‌دار هیل–باپ: نمونه‌ای عظیم با کما و دم گسترده که ساختار چندلایهٔ پوستهٔ هسته را برجسته ساخت. " +
                            "تحلیل داده‌های تلسکوپی: بررسی ترکیبات آلی پیچیده در کما، نشانه‌ای از فرآیندهای شیمیایی پیش‌زیستی در اوایل تاریخ کیهان\u202b."
                )
                val textmortabet = listOf("دنباله دار کوتاه دوره", "دنباله دار بلند دوره", "دنباله دار تک گذر", "منشأ دنباله دارها", "دنباله دار معروف", "دنباله دار میانی" , "چرخه دنباله دار", "تأثیر دنباله دار" , "مقایسه دنباله دارها")
                val imagemortabet = listOf(
                    painterResource(R.drawable.cometkotahdore),
                    painterResource(R.drawable.cometbolanddore),
                    painterResource(R.drawable.cometzodgozar),
                    painterResource(R.drawable.cometmanshae),
                    painterResource(R.drawable.cometfamus),
                    painterResource(R.drawable.comemiansetaree),
                    painterResource(R.drawable.comecharkhehayat),
                    painterResource(R.drawable.cometaethirbarzamin),
                    painterResource(R.drawable.cometmoghayese),
                )
                val tarkib = textmortabet.zip(imagemortabet)
                Column(
                    modifier = Modifier
                        .padding(25.dp)
                        .fillMaxSize()
                ) {
                    Box(modifier = Modifier.fillMaxSize())
                    {
                        LazyColumn(
                            horizontalAlignment = Alignment.CenterHorizontally
                        ) {
                            items(textSakhtarDonbaleDarha) { letter ->
                                Column(modifier = Modifier.padding(30.dp)) {
                                    Row {
                                        Image(painter = painterResource(id = R.drawable.cometsakhtar)
                                            , contentDescription = null , contentScale = ContentScale.Crop
                                            , modifier = Modifier.size(100.dp))
                                        Column {
                                            Text("")
                                            Row(modifier = Modifier.fillMaxWidth()
                                                ,horizontalArrangement = Arrangement.End
                                                , verticalAlignment = Alignment.CenterVertically) {
                                                Text("ساختار دنباله دارها" , fontSize = 20.sp  , color = Color.White , style = TextStyle(
                                                    shadow = Shadow(
                                                        color = Color(0xFFFFFFFF),
                                                        offset = Offset(0f ,0f)
                                                        , blurRadius = 20f
                                                    )
                                                ), maxLines = 1)
                                            }
                                        }
                                    }
                                }
                                Box(
                                    modifier = Modifier.fillMaxSize(),
                                    contentAlignment = Alignment.CenterStart,
                                ) {
                                    Column {
                                        Text(
                                            "$letter",
                                            fontSize = 20.sp,
                                            color = Color(0xFFFFFFFF),
                                            lineHeight = 32.sp,
                                            textAlign = TextAlign.Right
                                            , style = TextStyle(
                                                shadow = Shadow(
                                                    color = Color(0xFFFFFFFF),
                                                    offset = Offset(0f ,0f)
                                                    , blurRadius = 20f
                                                )
                                            )
                                        )
                                        Text("")
                                        Text("")
                                        Text("")
                                        Text(
                                            "موضوعات مرتبط",
                                            textAlign = TextAlign.Right,
                                            modifier = Modifier.fillMaxWidth(),
                                            fontSize = 30.sp,
                                            color = Color.White
                                            , style = TextStyle(
                                                shadow = Shadow(
                                                    color = Color(0xFFFFFFFF),
                                                    offset = Offset(0f ,0f)
                                                    , blurRadius = 20f
                                                )
                                            )
                                        )
                                        Text("")
                                        LazyRow(reverseLayout = true) {
                                            items(tarkib) { (matnha, aksha) ->
                                                Card(
                                                    modifier = Modifier
                                                        .width(250.dp)
                                                        .height(120.dp)
                                                        .padding(20.dp)
                                                        .clip(shape = RoundedCornerShape(100.dp)),
                                                    shape = RectangleShape,
                                                    colors = CardDefaults.cardColors(
                                                        containerColor = Color(
                                                            0xFF0707AD
                                                        )
                                                    )
                                                ) {
                                                    Box(
                                                        modifier = Modifier.fillMaxSize(),
                                                        contentAlignment = Alignment.CenterEnd
                                                    ) {
                                                        Image(
                                                            painter = painterResource(id = R.drawable.card),
                                                            contentScale = ContentScale.Crop,
                                                            contentDescription = null,
                                                            modifier = Modifier.fillMaxSize()
                                                        )
                                                        Button(
                                                            modifier = Modifier.fillMaxSize(
                                                            ).indication(indication = null ,
                                                                interactionSource = remember { MutableInteractionSource() }), onClick = {
                                                                if (matnha == "دنباله دار کوتاه دوره") {
                                                                    backap = false
                                                                    currentScreen = "comekotah"
                                                                }
                                                                if (matnha == "دنباله دار بلند دوره") {
                                                                    currentScreen = "comeboland"
                                                                    backap = false
                                                                }
                                                                if (matnha == "دنباله دار تک گذر") {
                                                                    backap = false
                                                                    currentScreen = "cometakgozar"
                                                                }
                                                                if (matnha == "ساختار دنباله دارها") {
                                                                    currentScreen = "comesakhtar"
                                                                    backap = false
                                                                }
                                                                if (matnha == "منشأ دنباله دارها") {
                                                                    backap = false
                                                                    currentScreen = "comemanshae"
                                                                }
                                                                if (matnha == "دنباله دار معروف") {
                                                                    backap = false
                                                                    currentScreen = "comefamus"
                                                                }
                                                                if (matnha == "دنباله دار میانی") {
                                                                    backap = false
                                                                    currentScreen = "comemiani"
                                                                }
                                                                if (matnha == "چرخه دنباله دار") {
                                                                    backap = false
                                                                    currentScreen = "comecharkhe"
                                                                }
                                                                if (matnha == "تأثیر دنباله دار") {
                                                                    backap = false
                                                                    currentScreen = "cometaethir"
                                                                }
                                                                if (matnha == "مقایسه دنباله دارها") {
                                                                    backap = false
                                                                    currentScreen = "comemoghayese"
                                                                }
                                                            }, colors = ButtonDefaults.buttonColors(
                                                                contentColor = Color.Transparent,
                                                                containerColor = Color.Transparent
                                                            )) {
                                                        }
                                                        Row() {
                                                            Spacer(modifier = Modifier.width(10.dp))
                                                            Column {
                                                                Spacer(modifier = Modifier.height(9.dp))
                                                                Text(
                                                                    "$matnha",
                                                                    color = Color.White,
                                                                    fontSize = 20.sp
                                                                    , style = TextStyle(
                                                                        shadow = Shadow(
                                                                            color = Color(0xFFFFFFFF),
                                                                            offset = Offset(0f ,0f)
                                                                            , blurRadius = 20f
                                                                        )
                                                                    )
                                                                )
                                                            }
                                                            Spacer(modifier = Modifier.width(15.dp))
                                                            Image(
                                                                painter = aksha,
                                                                contentDescription = null,
                                                                contentScale = ContentScale.Crop,
                                                                modifier = Modifier.size(50.dp)
                                                            )
                                                            Spacer(modifier = Modifier.width(15.dp))
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        Text("")
                                        Text("")
                                        Text("")
                                    }
                                }
                            }
                        }
                        var count by remember { mutableStateOf(0) }
                        IconButton(
                            onClick = { count++ },
                            modifier = Modifier
                                .size(70.dp)
                                .align(Alignment.BottomEnd)
                                .indication(indication = null ,
                                    interactionSource = remember { MutableInteractionSource() }),
                            colors = IconButtonDefaults.iconButtonColors(
                                containerColor = Color(0xFF030A33)
                            )
                        ) {
                            if (count % 2 == 0) {
                                Icon(
                                    imageVector = Icons.Default.Favorite,
                                    contentDescription = null,
                                    modifier = Modifier.size(50.dp),
                                    tint = Color.Transparent
                                )
                                Icon(
                                    imageVector = Icons.Default.FavoriteBorder,
                                    contentDescription = null,
                                    modifier = Modifier.size(50.dp),
                                    tint = Color.White
                                )
                            }
                            if (count % 2 == 1) {
                                Icon(
                                    imageVector = Icons.Default.Favorite,
                                    contentDescription = null,
                                    modifier = Modifier.size(50.dp),
                                    tint = Color.White
                                )
                                Icon(
                                    imageVector = Icons.Default.FavoriteBorder,
                                    contentDescription = null,
                                    modifier = Modifier.size(50.dp),
                                    tint = Color.White
                                )
                            }
                        }
                    }
                }
            }
        }
    }
}
@Composable
fun Cometmanshae(){
    Image(
        painter = painterResource(id = R.drawable.app_back),
        contentScale = ContentScale.Crop,
        contentDescription = null
    )
    when(currentScreen) {
        "comemanshae" -> {
            Column {
                Card(
                    modifier = Modifier
                        .fillMaxWidth()
                        .height(32.5.dp),
                    shape = RectangleShape,
                    colors = CardDefaults.cardColors(containerColor = Color(0xFF030A33))
                ) {
                }
                Column(){
                    Card(
                        modifier = Modifier
                            .fillMaxWidth()
                            .height(50.dp),
                        shape = RectangleShape,
                        colors = CardDefaults.cardColors(containerColor = Color(0xFF0707AD))
                    ) {
                        Row(modifier = Modifier.padding(10.dp)) {
                            IconButton(onClick = {currentScreen = "asli4"
                                backap = true
                            } , colors = IconButtonDefaults.iconButtonColors(contentColor = Color.White)
                                , modifier = Modifier.indication(indication = null ,
                                    interactionSource = remember { MutableInteractionSource() })){
                                Icon(imageVector = Icons.Outlined.ArrowBack, contentDescription = null , modifier = Modifier.size(40.dp))
                            }
                            IconButton(
                                onClick = {},
                                colors = IconButtonDefaults.iconButtonColors(contentColor = Color.White),
                                modifier = Modifier.indication(indication = null ,
                                    interactionSource = remember { MutableInteractionSource() })
                            ) {
                                Icon(imageVector = Icons.Default.Info, contentDescription = null)
                            }
                            IconButton(
                                onClick = {},
                                colors = IconButtonDefaults.iconButtonColors(contentColor = Color.White),
                                modifier = Modifier.indication(indication = null ,
                                    interactionSource = remember { MutableInteractionSource() })
                            ) {
                                Icon(imageVector = Icons.Default.Share, contentDescription = null)
                            }
                            Row(
                                modifier = Modifier.fillMaxWidth(),
                                horizontalArrangement = Arrangement.End,
                                verticalAlignment = Alignment.CenterVertically
                            ) {
                                Text("منشأ دنباله دارها", fontSize = 20.sp, color = Color.White  , maxLines = 1 , fontWeight = FontWeight.ExtraBold)
                                IconButton(onClick = {expanded = true},
                                    modifier = Modifier.size(50.dp)
                                        .indication(indication = null ,
                                            interactionSource = remember { MutableInteractionSource() }),
                                    colors = IconButtonDefaults.iconButtonColors(contentColor = Color.White)) {
                                    Icon(imageVector = Icons.Default.Menu, contentDescription = null)
                                }
                            }
                        }
                    }
                }
                var textManshaDonbaleDarha = listOf(
                    ": معرفی کلی\n" +
                            "\n" +
                            "منشأ دنباله‌دارها به دوران آغازین شکل‌گیری منظومهٔ شمسی بازمی‌گردد. این اجرام بقایای یخی و غبارآلودی هستند که از دیسک اولیهٔ خورشیدی به‌جا مانده‌اند. " +
                            "دو ناحیهٔ اصلی به‌عنوان خاستگاه دنباله‌دارها شناخته می‌شوند: کمربند کویی‌پر و ابر اورت. " +
                            "دنباله‌دارهای کوتاه‌مدت عمدتاً از کمربند کویی‌پر و دیسک پراکنده منشا می‌گیرند، در حالی‌که دنباله‌دارهای بلندمدت و تک‌گذر از ابر اورت سرچشمه می‌گیرند. " +
                            "بررسی منشأ دنباله‌دارها کلید فهم پویایی منظومهٔ شمسی و تاریخچهٔ مواد آلی و آب در زمین به شمار می‌رود\u202b." +
                            "\n" +
                            "\n" +
                            "\n" +
                            ": چارچوب‌های رده‌بندی و دسته‌بندی\n" +
                            "\n" +
                            "بر اساس ناحیهٔ منشأ: کمربند کویی‌پر (منشأ دنباله‌دارهای کوتاه‌مدت)، دیسک پراکنده، و ابر اورت (منشأ دنباله‌دارهای بلندمدت و تک‌گذر). " +
                            "بر اساس اثرات گرانشی: رانده‌شدن اجرام به مدارهای درونی تحت تأثیر سیارات غول‌پیکر به‌ویژه مشتری و نپتون. " +
                            "بر اساس دینامیک مداری: مدارهای پایدار در کمربند کویی‌پر در برابر مدارهای ناپایدار ابر اورت. " +
                            "بر اساس ترکیب: منشأهای متفاوت می‌توانند ترکیبات یخی و نسبت‌های ایزوتوپی متمایز ایجاد کنند. " +
                            "بر اساس تاریخچه: دنباله‌دارهایی که بارها به درون منظومه وارد شده‌اند در برابر اجرامی که تنها یک بار (تک‌گذر) به درون می‌آیند\u202b." +
                            "\n" +
                            "\n" +
                            "\n" +
                            ": اصول و مبانی نظری کلیدی\n" +
                            "\n" +
                            "کمربند کویی‌پر: ناحیه‌ای پس از نپتون شامل میلیون‌ها جرم یخی که منبع اصلی دنباله‌دارهای کوتاه‌مدت است. " +
                            "دیسک پراکنده: منطقه‌ای با اجرام دارای مدارهای کشیده و متمایل که منشأ بخشی از دنباله‌دارها محسوب می‌شود. " +
                            "ابر اورت: پوسته‌ای کروی‌شکل در فاصلهٔ ده‌ها هزار واحد نجومی از خورشید که مخزن عظیم دنباله‌دارهای بلندمدت و تک‌گذر است. " +
                            "تأثیر گرانش سیارات: برهم‌کنش با مشتری و نپتون اجرام را به سمت منظومهٔ درونی هدایت می‌کند. " +
                            "تأثیر ستارگان گذری و کشش کهکشانی: در بازه‌های زمانی طولانی می‌توانند اجرام ابر اورت را به مدارهای جدید برانند\u202b." +
                            "\n" +
                            "\n" +
                            "\n" +
                            ": کاربردها و پیش‌بینی‌ها\n" +
                            "\n" +
                            "شناخت شرایط اولیهٔ شکل‌گیری منظومهٔ شمسی از طریق منشأ دنباله‌دارها. " +
                            "بررسی احتمال انتقال آب و ترکیبات آلی از مناطق بیرونی به زمین اولیه. " +
                            "پیش‌بینی ورود دنباله‌دارهای جدید از ابر اورت بر اساس مدل‌های دینامیکی. " +
                            "ارزیابی نقش سیارات غول‌پیکر در تعیین پویایی اجرام یخی. " +
                            "مدل‌سازی آیندهٔ منظومهٔ شمسی و نرخ ورود دنباله‌دارها به نواحی درونی\u202b." +
                            "\n" +
                            "\n" +
                            "\n" +
                            ": نقش در علم و فناوری\n" +
                            "\n" +
                            "الهام برای طراحی شبیه‌سازی‌های دینامیکی گسترده از منشأ و تکامل اجرام کوچک. " +
                            "کاربرد داده‌های رصدی در توسعهٔ مدل‌های منشأ آب زمین. " +
                            "بهبود فناوری تلسکوپ‌ها و کاوشگرها برای کشف اجرام دوردست کمربند کویی‌پر و ابر اورت. " +
                            "تقویت همکاری بین‌المللی در پروژه‌های علمی مانند پان‌استارز و ورا روبین برای کشف دنباله‌دارهای تازه. " +
                            "گسترش دانش بشر دربارهٔ نقش برهم‌کنش‌های کهکشانی در پویایی منظومهٔ شمسی\u202b." +
                            "\n" +
                            "\n" +
                            "\n" +
                            ": بخش نظری برجسته\n" +
                            "\n" +
                            "نظریهٔ ابر اورت: ارائه‌شده توسط یان اورت در سال ۱۹۵۰ به‌عنوان منشأ دنباله‌دارهای بلندمدت. " +
                            "کشف کمربند کویی‌پر: اثبات‌شده در دههٔ ۱۹۹۰ که منشأ دنباله‌دارهای کوتاه‌مدت را آشکار کرد. " +
                            "مدل نایس: مدلی از مهاجرت سیارات غول‌پیکر که توزیع اجرام یخی را توضیح می‌دهد. " +
                            "دنباله‌دار هیل باپ و نظریهٔ منشأ ابر اورت: یکی از شواهد آشکار برای وجود مخزن عظیم اجرام دوردست. " +
                            "مطالعات ایزوتوپی آب در دنباله‌دار ۶۷پی: نشان‌دهندهٔ تفاوت در منشأ آب میان کمربند کویی‌پر و زمین\u202b."
                )
                val textmortabet = listOf("دنباله دار کوتاه دوره", "دنباله دار بلند دوره", "دنباله دار تک گذر", "ساختار دنباله دارها", "دنباله دار معروف", "دنباله دار میانی" , "چرخه دنباله دار", "تأثیر دنباله دار" , "مقایسه دنباله دارها")
                val imagemortabet = listOf(
                    painterResource(R.drawable.cometkotahdore),
                    painterResource(R.drawable.cometbolanddore),
                    painterResource(R.drawable.cometzodgozar),
                    painterResource(R.drawable.cometsakhtar),
                    painterResource(R.drawable.cometfamus),
                    painterResource(R.drawable.comemiansetaree),
                    painterResource(R.drawable.comecharkhehayat),
                    painterResource(R.drawable.cometaethirbarzamin),
                    painterResource(R.drawable.cometmoghayese),
                )
                val tarkib = textmortabet.zip(imagemortabet)
                Column(
                    modifier = Modifier
                        .padding(25.dp)
                        .fillMaxSize()
                ) {
                    Box(modifier = Modifier.fillMaxSize())

                    {
                        LazyColumn(
                            horizontalAlignment = Alignment.CenterHorizontally
                        ) {
                            items(textManshaDonbaleDarha) { letter ->
                                Column(modifier = Modifier.padding(30.dp)) {
                                    Row {
                                        Image(painter = painterResource(id = R.drawable.cometmanshae)
                                            , contentDescription = null , contentScale = ContentScale.Crop
                                            , modifier = Modifier.size(100.dp))
                                        Column {
                                            Text("")
                                            Row(modifier = Modifier.fillMaxWidth()
                                                ,horizontalArrangement = Arrangement.End
                                                , verticalAlignment = Alignment.CenterVertically) {
                                                Text("منشأ دنباله دارها" , fontSize = 20.sp  , color = Color.White , style = TextStyle(
                                                    shadow = Shadow(
                                                        color = Color(0xFFFFFFFF),
                                                        offset = Offset(0f ,0f)
                                                        , blurRadius = 20f
                                                    )
                                                ), maxLines = 1)
                                            }
                                        }
                                    }
                                }
                                Box(
                                    modifier = Modifier.fillMaxSize(),
                                    contentAlignment = Alignment.CenterStart,
                                ) {
                                    Column {
                                        Text(
                                            "$letter",
                                            fontSize = 20.sp,
                                            color = Color(0xFFFFFFFF),
                                            lineHeight = 32.sp,
                                            textAlign = TextAlign.Right
                                            , style = TextStyle(
                                                shadow = Shadow(
                                                    color = Color(0xFFFFFFFF),
                                                    offset = Offset(0f ,0f)
                                                    , blurRadius = 20f
                                                )
                                            )
                                        )
                                        Text("")
                                        Text("")
                                        Text("")
                                        Text(
                                            "موضوعات مرتبط",
                                            textAlign = TextAlign.Right,
                                            modifier = Modifier.fillMaxWidth(),
                                            fontSize = 30.sp,
                                            color = Color.White
                                            , style = TextStyle(
                                                shadow = Shadow(
                                                    color = Color(0xFFFFFFFF),
                                                    offset = Offset(0f ,0f)
                                                    , blurRadius = 20f
                                                )
                                            )
                                        )
                                        Text("")
                                        LazyRow(reverseLayout = true) {
                                            items(tarkib) { (matnha, aksha) ->
                                                Card(
                                                    modifier = Modifier
                                                        .width(250.dp)
                                                        .height(120.dp)
                                                        .padding(20.dp)
                                                        .clip(shape = RoundedCornerShape(100.dp)),
                                                    shape = RectangleShape,
                                                    colors = CardDefaults.cardColors(
                                                        containerColor = Color(
                                                            0xFF0707AD
                                                        )
                                                    )
                                                ) {
                                                    Box(
                                                        modifier = Modifier.fillMaxSize(),
                                                        contentAlignment = Alignment.CenterEnd
                                                    ) {
                                                        Image(
                                                            painter = painterResource(id = R.drawable.card),
                                                            contentScale = ContentScale.Crop,
                                                            contentDescription = null,
                                                            modifier = Modifier.fillMaxSize()
                                                        )
                                                        Button(
                                                            modifier = Modifier.fillMaxSize(
                                                            ).indication(indication = null ,
                                                                interactionSource = remember { MutableInteractionSource() }), onClick = {
                                                                if (matnha == "دنباله دار کوتاه دوره") {
                                                                    backap = false
                                                                    currentScreen = "comekotah"
                                                                }
                                                                if (matnha == "دنباله دار بلند دوره") {
                                                                    currentScreen = "comeboland"
                                                                    backap = false
                                                                }
                                                                if (matnha == "دنباله دار تک گذر") {
                                                                    backap = false
                                                                    currentScreen = "cometakgozar"
                                                                }
                                                                if (matnha == "ساختار دنباله دارها") {
                                                                    currentScreen = "comesakhtar"
                                                                    backap = false
                                                                }
                                                                if (matnha == "منشأ دنباله دارها") {
                                                                    backap = false
                                                                    currentScreen = "comemanshae"
                                                                }
                                                                if (matnha == "دنباله دار معروف") {
                                                                    backap = false
                                                                    currentScreen = "comefamus"
                                                                }
                                                                if (matnha == "دنباله دار میانی") {
                                                                    backap = false
                                                                    currentScreen = "comemiani"
                                                                }
                                                                if (matnha == "چرخه دنباله دار") {
                                                                    backap = false
                                                                    currentScreen = "comecharkhe"
                                                                }
                                                                if (matnha == "تأثیر دنباله دار") {
                                                                    backap = false
                                                                    currentScreen = "cometaethir"
                                                                }
                                                                if (matnha == "مقایسه دنباله دارها") {
                                                                    backap = false
                                                                    currentScreen = "comemoghayese"
                                                                }
                                                            }, colors = ButtonDefaults.buttonColors(
                                                                contentColor = Color.Transparent,
                                                                containerColor = Color.Transparent
                                                            )) {
                                                        }
                                                        Row() {
                                                            Spacer(modifier = Modifier.width(10.dp))
                                                            Column {
                                                                Spacer(modifier = Modifier.height(9.dp))
                                                                Text(
                                                                    "$matnha",
                                                                    color = Color.White,
                                                                    fontSize = 20.sp
                                                                    , style = TextStyle(
                                                                        shadow = Shadow(
                                                                            color = Color(0xFFFFFFFF),
                                                                            offset = Offset(0f ,0f)
                                                                            , blurRadius = 20f
                                                                        )
                                                                    )
                                                                )
                                                            }
                                                            Spacer(modifier = Modifier.width(15.dp))
                                                            Image(
                                                                painter = aksha,
                                                                contentDescription = null,
                                                                contentScale = ContentScale.Crop,
                                                                modifier = Modifier.size(50.dp)
                                                            )
                                                            Spacer(modifier = Modifier.width(15.dp))
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        Text("")
                                        Text("")
                                        Text("")
                                    }
                                }
                            }
                        }
                        var count by remember { mutableStateOf(0) }
                        IconButton(
                            onClick = { count++ },
                            modifier = Modifier
                                .size(70.dp)
                                .align(Alignment.BottomEnd)
                                .indication(indication = null ,
                                    interactionSource = remember { MutableInteractionSource() }),
                            colors = IconButtonDefaults.iconButtonColors(
                                containerColor = Color(0xFF030A33)
                            )
                        ) {
                            if (count % 2 == 0) {
                                Icon(
                                    imageVector = Icons.Default.Favorite,
                                    contentDescription = null,
                                    modifier = Modifier.size(50.dp),
                                    tint = Color.Transparent
                                )
                                Icon(
                                    imageVector = Icons.Default.FavoriteBorder,
                                    contentDescription = null,
                                    modifier = Modifier.size(50.dp),
                                    tint = Color.White
                                )
                            }
                            if (count % 2 == 1) {
                                Icon(
                                    imageVector = Icons.Default.Favorite,
                                    contentDescription = null,
                                    modifier = Modifier.size(50.dp),
                                    tint = Color.White
                                )
                                Icon(
                                    imageVector = Icons.Default.FavoriteBorder,
                                    contentDescription = null,
                                    modifier = Modifier.size(50.dp),
                                    tint = Color.White
                                )
                            }
                        }
                    }
                }
            }
        }
    }
}
@Composable
fun Cometfamus(){
    Image(
        painter = painterResource(id = R.drawable.app_back),
        contentScale = ContentScale.Crop,
        contentDescription = null
    )
    when(currentScreen) {
        "comefamus" -> {
            Column {
                Card(
                    modifier = Modifier
                        .fillMaxWidth()
                        .height(32.5.dp),
                    shape = RectangleShape,
                    colors = CardDefaults.cardColors(containerColor = Color(0xFF030A33))
                ) {
                }
                Column(){
                    Card(
                        modifier = Modifier
                            .fillMaxWidth()
                            .height(50.dp),
                        shape = RectangleShape,
                        colors = CardDefaults.cardColors(containerColor = Color(0xFF0707AD))
                    ) {
                        Row(modifier = Modifier.padding(10.dp)) {
                            IconButton(onClick = {currentScreen = "asli4"
                                backap = true
                            } , colors = IconButtonDefaults.iconButtonColors(contentColor = Color.White)
                                , modifier = Modifier.indication(indication = null ,
                                    interactionSource = remember { MutableInteractionSource() })){
                                Icon(imageVector = Icons.Outlined.ArrowBack, contentDescription = null , modifier = Modifier.size(40.dp))
                            }
                            IconButton(
                                onClick = {},
                                colors = IconButtonDefaults.iconButtonColors(contentColor = Color.White),
                                modifier = Modifier.indication(indication = null ,
                                    interactionSource = remember { MutableInteractionSource() })
                            ) {
                                Icon(imageVector = Icons.Default.Info, contentDescription = null)
                            }
                            IconButton(
                                onClick = {},
                                colors = IconButtonDefaults.iconButtonColors(contentColor = Color.White),
                                modifier = Modifier.indication(indication = null ,
                                    interactionSource = remember { MutableInteractionSource() })
                            ) {
                                Icon(imageVector = Icons.Default.Share, contentDescription = null)
                            }
                            Row(
                                modifier = Modifier.fillMaxWidth(),
                                horizontalArrangement = Arrangement.End,
                                verticalAlignment = Alignment.CenterVertically
                            ) {
                                Text("دنباله دار معروف", fontSize = 20.sp, color = Color.White  , maxLines = 1 , fontWeight = FontWeight.ExtraBold)
                                IconButton(onClick = {expanded = true},
                                    modifier = Modifier.size(50.dp)
                                        .indication(indication = null ,
                                            interactionSource = remember { MutableInteractionSource() }),
                                    colors = IconButtonDefaults.iconButtonColors(contentColor = Color.White)) {
                                    Icon(imageVector = Icons.Default.Menu, contentDescription = null)
                                }
                            }
                        }
                    }
                }
                var textDonbaleDarhayeMarof = listOf(
                    ": معرفی کلی\n" +
                            "\n" +
                            "دنباله‌دارهای معروف آن دسته از اجرام‌اند که به دلیل روشنایی زیاد، تکرار منظم در آسمان، یا ویژگی‌های علمی برجسته در تاریخ رصد و اخترشناسی جایگاه ویژه‌ای یافته‌اند. " +
                            "از جمله هالی، هیل باپ، هیاکوتاکه و انکه که در فرهنگ‌ها و تمدن‌های مختلف اثرگذار بوده‌اند. " +
                            "این دنباله‌دارها نه‌تنها پدیده‌های تماشایی برای عموم مردم هستند بلکه نقش مهمی در پیشرفت علوم سیاره‌ای و شناخت منشأ منظومهٔ شمسی داشته‌اند. " +
                            "دنباله‌دارهای معروف معمولاً دارای مدارهای شناخته‌شده و پیش‌بینی‌پذیر بوده و رصدهای متعددی در بازگشت‌های مختلف از آن‌ها صورت گرفته است\u202b." +
                            "\n" +
                            "\n" +
                            "\n" +
                            ": چارچوب‌های رده‌بندی و دسته‌بندی\n" +
                            "\n" +
                            "بر اساس دورهٔ مداری: دنباله‌دارهای کوتاه‌مدت مانند انکه، و بلندمدت مانند هیل باپ. " +
                            "بر اساس اهمیت تاریخی: دنباله‌دارهایی که در متون باستانی و ثبت‌های نجومی قدیمی ذکر شده‌اند (مثل هالی در تمدن چین و اروپا). " +
                            "بر اساس میزان روشنایی: دنباله‌دارهای بسیار درخشان مانند هیاکوتاکه یا نیوآیس که به‌راحتی با چشم غیرمسلح دیده می‌شوند. " +
                            "بر اساس مأموریت‌های فضایی: دنباله‌دارهایی که هدف فضاپیماها قرار گرفته‌اند (مثل ۶۷پی و چوریوموف گراسیمنکو با مأموریت روزتا). " +
                            "بر اساس اهمیت علمی: دنباله‌دارهایی با ترکیب ویژه یا داده‌های منحصربه‌فرد که پرسش‌های بنیادی دربارهٔ منشأ منظومه را پاسخ می‌دهند\u202b." +
                            "\n" +
                            "\n" +
                            "\n" +
                            ": اصول و مبانی نظری کلیدی\n" +
                            "\n" +
                            "دنباله‌دار هالی: با دورهٔ ۷۶ سال، مشهورترین دنباله‌دار تناوبی که در متون باستانی نیز ثبت شده است. " +
                            "دنباله‌دار انکه: دارای کوتاه‌ترین دورهٔ شناخته‌شده (حدود ۳٫۳ سال) و منشأ بارش شهابی توریدها. " +
                            "دنباله‌دار هیل باپ: بسیار روشن و طولانی‌مدت که در ۱۹۹۷ با چشم غیرمسلح ماه‌ها دیده شد. " +
                            "دنباله‌دار هیاکوتاکه: در ۱۹۹۶ به زمین نزدیک شد و تصویربرداری‌های مدرن از دم یونی و گردوغبار آن دانش تازه‌ای فراهم کرد. " +
                            "دنباله‌دار ۶۷پی و چوریوموف گراسیمنکو: نخستین هدف مأموریت فرود فضاپیما (روزتا) که اطلاعات بی‌نظیری از ساختار سطحی و ترکیب آن به دست آمد\u202b." +
                            "\n" +
                            "\n" +
                            "\n" +
                            ": کاربردها و پیش‌بینی‌ها\n" +
                            "\n" +
                            "امکان بررسی مستقیم یخ‌ها و ترکیبات آلی اولیه از طریق مطالعهٔ دنباله‌دارهای شاخص. " +
                            "پیش‌بینی دقیق بازگشت دنباله‌دارهای تناوبی برای آماده‌سازی رصدهای علمی. " +
                            "ارتباط برخی دنباله‌دارهای معروف با بارش‌های شهابی (مانند شهابی‌های توریدها و اوریونیدها). " +
                            "ایجاد فرصت‌های آموزشی و عمومی برای علاقه‌مندان نجوم در هنگام ظهور دنباله‌دارهای پرنور. " +
                            "پیش‌بینی ظهور دنباله‌دارهای تازه (مانند نیوآیس در ۲۰۲۰) که می‌توانند در فهرست دنباله‌دارهای معروف آینده جای گیرند\u202b." +
                            "\n" +
                            "\n" +
                            "\n" +
                            ": نقش در علم و فناوری\n" +
                            "\n" +
                            "کمک به توسعهٔ نظریه‌های منشأ آب و مواد آلی زمین. " +
                            "الهام برای مأموریت‌های فضایی مانند جوتو (برخورد با هالی)، دیپ ایمپکت (بررسی ۹ تمپل ۱) و روزتا (فرود روی ۶۷پی). " +
                            "ایجاد داده‌های کلیدی برای مدل‌های تشکیل منظومهٔ شمسی. " +
                            "پیشرفت فناوری رصدی در پی نیاز به دنبال‌کردن دنباله‌دارهای متغیر و پرنور. " +
                            "گسترش همکاری بین‌المللی در مطالعات رصدی دنباله‌دارهای برجسته\u202b." +
                            "\n" +
                            "\n" +
                            "\n" +
                            ": بخش نظری برجسته\n" +
                            "\n" +
                            "دنباله‌دار هالی: بارها در تاریخ تمدن‌ها ظاهر شده و پیش‌بینی آن توسط ادموند هالی نقطهٔ عطفی در علم نجوم بود. " +
                            "دنباله‌دار انکه: نخستین دنباله‌دار کوتاه‌مدت شناخته‌شده با مدار دقیق محاسبه‌شده. " +
                            "دنباله‌دار هیل باپ: با درخشندگی خیره‌کننده در ۱۹۹۷ به یکی از پرشورترین پدیده‌های نجومی قرن بیستم تبدیل شد. " +
                            "دنباله‌دار هیاکوتاکه: موجب کشف دم یونی بسیار بلند شد که رکوردی در مشاهدات به‌جا گذاشت. " +
                            "دنباله‌دار ۶۷پی: نخستین دنباله‌داری که فضاپیما روی سطح آن فرود آمد و جزئیات علمی بی‌سابقه‌ای آشکار شد\u202b."
                )
                val textmortabet = listOf("دنباله دار کوتاه دوره", "دنباله دار بلند دوره", "دنباله دار تک گذر", "ساختار دنباله دارها", "منشأ دنباله دارها", "دنباله دار میانی" , "چرخه دنباله دار", "تأثیر دنباله دار" , "مقایسه دنباله دارها")
                val imagemortabet = listOf(
                    painterResource(R.drawable.cometkotahdore),
                    painterResource(R.drawable.cometbolanddore),
                    painterResource(R.drawable.cometzodgozar),
                    painterResource(R.drawable.cometsakhtar),
                    painterResource(R.drawable.cometmanshae),
                    painterResource(R.drawable.comemiansetaree),
                    painterResource(R.drawable.comecharkhehayat),
                    painterResource(R.drawable.cometaethirbarzamin),
                    painterResource(R.drawable.cometmoghayese),
                )
                val tarkib = textmortabet.zip(imagemortabet)
                Column(
                    modifier = Modifier
                        .padding(25.dp)
                        .fillMaxSize()
                ) {
                    Box(modifier = Modifier.fillMaxSize())

                    {
                        LazyColumn(
                            horizontalAlignment = Alignment.CenterHorizontally
                        ) {
                            items(textDonbaleDarhayeMarof) { letter ->
                                Column(modifier = Modifier.padding(30.dp)) {
                                    Row {
                                        Image(painter = painterResource(id = R.drawable.cometfamus)
                                            , contentDescription = null , contentScale = ContentScale.Crop
                                            , modifier = Modifier.size(100.dp))
                                        Column {
                                            Text("")
                                            Row(modifier = Modifier.fillMaxWidth()
                                                ,horizontalArrangement = Arrangement.End
                                                , verticalAlignment = Alignment.CenterVertically) {
                                                Text("دنباله دار معروف" , fontSize = 20.sp  , color = Color.White , style = TextStyle(
                                                    shadow = Shadow(
                                                        color = Color(0xFFFFFFFF),
                                                        offset = Offset(0f ,0f)
                                                        , blurRadius = 20f
                                                    )
                                                ), maxLines = 1)
                                            }
                                        }
                                    }
                                }
                                Box(
                                    modifier = Modifier.fillMaxSize(),
                                    contentAlignment = Alignment.CenterStart,
                                ) {
                                    Column {
                                        Text(
                                            "$letter",
                                            fontSize = 20.sp,
                                            color = Color(0xFFFFFFFF),
                                            lineHeight = 32.sp,
                                            textAlign = TextAlign.Right
                                            , style = TextStyle(
                                                shadow = Shadow(
                                                    color = Color(0xFFFFFFFF),
                                                    offset = Offset(0f ,0f)
                                                    , blurRadius = 20f
                                                )
                                            )
                                        )
                                        Text("")
                                        Text("")
                                        Text("")
                                        Text(
                                            "موضوعات مرتبط",
                                            textAlign = TextAlign.Right,
                                            modifier = Modifier.fillMaxWidth(),
                                            fontSize = 30.sp,
                                            color = Color.White
                                            , style = TextStyle(
                                                shadow = Shadow(
                                                    color = Color(0xFFFFFFFF),
                                                    offset = Offset(0f ,0f)
                                                    , blurRadius = 20f
                                                )
                                            )
                                        )
                                        Text("")
                                        LazyRow(reverseLayout = true) {
                                            items(tarkib) { (matnha, aksha) ->
                                                Card(
                                                    modifier = Modifier
                                                        .width(250.dp)
                                                        .height(120.dp)
                                                        .padding(20.dp)
                                                        .clip(shape = RoundedCornerShape(100.dp)),
                                                    shape = RectangleShape,
                                                    colors = CardDefaults.cardColors(
                                                        containerColor = Color(
                                                            0xFF0707AD
                                                        )
                                                    )
                                                ) {
                                                    Box(
                                                        modifier = Modifier.fillMaxSize(),
                                                        contentAlignment = Alignment.CenterEnd
                                                    ) {
                                                        Image(
                                                            painter = painterResource(id = R.drawable.card),
                                                            contentScale = ContentScale.Crop,
                                                            contentDescription = null,
                                                            modifier = Modifier.fillMaxSize()
                                                        )
                                                        Button(
                                                            modifier = Modifier.fillMaxSize(
                                                            ).indication(indication = null ,
                                                                interactionSource = remember { MutableInteractionSource() }), onClick = {
                                                                if (matnha == "دنباله دار کوتاه دوره") {
                                                                    backap = false
                                                                    currentScreen = "comekotah"
                                                                }
                                                                if (matnha == "دنباله دار بلند دوره") {
                                                                    currentScreen = "comeboland"
                                                                    backap = false
                                                                }
                                                                if (matnha == "دنباله دار تک گذر") {
                                                                    backap = false
                                                                    currentScreen = "cometakgozar"
                                                                }
                                                                if (matnha == "ساختار دنباله دارها") {
                                                                    currentScreen = "comesakhtar"
                                                                    backap = false
                                                                }
                                                                if (matnha == "منشأ دنباله دارها") {
                                                                    backap = false
                                                                    currentScreen = "comemanshae"
                                                                }
                                                                if (matnha == "دنباله دار معروف") {
                                                                    backap = false
                                                                    currentScreen = "comefamus"
                                                                }
                                                                if (matnha == "دنباله دار میانی") {
                                                                    backap = false
                                                                    currentScreen = "comemiani"
                                                                }
                                                                if (matnha == "چرخه دنباله دار") {
                                                                    backap = false
                                                                    currentScreen = "comecharkhe"
                                                                }
                                                                if (matnha == "تأثیر دنباله دار") {
                                                                    backap = false
                                                                    currentScreen = "cometaethir"
                                                                }
                                                                if (matnha == "مقایسه دنباله دارها") {
                                                                    backap = false
                                                                    currentScreen = "comemoghayese"
                                                                }
                                                            }, colors = ButtonDefaults.buttonColors(
                                                                contentColor = Color.Transparent,
                                                                containerColor = Color.Transparent
                                                            )) {
                                                        }
                                                        Row() {
                                                            Spacer(modifier = Modifier.width(10.dp))
                                                            Column {
                                                                Spacer(modifier = Modifier.height(9.dp))
                                                                Text(
                                                                    "$matnha",
                                                                    color = Color.White,
                                                                    fontSize = 20.sp
                                                                    , style = TextStyle(
                                                                        shadow = Shadow(
                                                                            color = Color(0xFFFFFFFF),
                                                                            offset = Offset(0f ,0f)
                                                                            , blurRadius = 20f
                                                                        )
                                                                    )
                                                                )
                                                            }
                                                            Spacer(modifier = Modifier.width(15.dp))
                                                            Image(
                                                                painter = aksha,
                                                                contentDescription = null,
                                                                contentScale = ContentScale.Crop,
                                                                modifier = Modifier.size(50.dp)
                                                            )
                                                            Spacer(modifier = Modifier.width(15.dp))
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        Text("")
                                        Text("")
                                        Text("")
                                    }
                                }
                            }
                        }
                        var count by remember { mutableStateOf(0) }
                        IconButton(
                            onClick = { count++ },
                            modifier = Modifier
                                .size(70.dp)
                                .align(Alignment.BottomEnd)
                                .indication(indication = null ,
                                    interactionSource = remember { MutableInteractionSource() }),
                            colors = IconButtonDefaults.iconButtonColors(
                                containerColor = Color(0xFF030A33)
                            )
                        ) {
                            if (count % 2 == 0) {
                                Icon(
                                    imageVector = Icons.Default.Favorite,
                                    contentDescription = null,
                                    modifier = Modifier.size(50.dp),
                                    tint = Color.Transparent
                                )
                                Icon(
                                    imageVector = Icons.Default.FavoriteBorder,
                                    contentDescription = null,
                                    modifier = Modifier.size(50.dp),
                                    tint = Color.White
                                )
                            }
                            if (count % 2 == 1) {
                                Icon(
                                    imageVector = Icons.Default.Favorite,
                                    contentDescription = null,
                                    modifier = Modifier.size(50.dp),
                                    tint = Color.White
                                )
                                Icon(
                                    imageVector = Icons.Default.FavoriteBorder,
                                    contentDescription = null,
                                    modifier = Modifier.size(50.dp),
                                    tint = Color.White
                                )
                            }
                        }
                    }
                }
            }
        }
    }
}
@Composable
fun Cometmiani(){
    Image(
        painter = painterResource(id = R.drawable.app_back),
        contentScale = ContentScale.Crop,
        contentDescription = null
    )
    when(currentScreen) {
        "comemiani" -> {
            Column {
                Card(
                    modifier = Modifier
                        .fillMaxWidth()
                        .height(32.5.dp),
                    shape = RectangleShape,
                    colors = CardDefaults.cardColors(containerColor = Color(0xFF030A33))
                ) {
                }
                Column(){
                    Card(
                        modifier = Modifier
                            .fillMaxWidth()
                            .height(50.dp),
                        shape = RectangleShape,
                        colors = CardDefaults.cardColors(containerColor = Color(0xFF0707AD))
                    ) {
                        Row(modifier = Modifier.padding(10.dp)) {
                            IconButton(onClick = {currentScreen = "asli4"
                                backap = true
                            } , colors = IconButtonDefaults.iconButtonColors(contentColor = Color.White)
                                , modifier = Modifier.indication(indication = null ,
                                    interactionSource = remember { MutableInteractionSource() })){
                                Icon(imageVector = Icons.Outlined.ArrowBack, contentDescription = null , modifier = Modifier.size(40.dp))
                            }
                            IconButton(
                                onClick = {},
                                colors = IconButtonDefaults.iconButtonColors(contentColor = Color.White),
                                modifier = Modifier.indication(indication = null ,
                                    interactionSource = remember { MutableInteractionSource() })
                            ) {
                                Icon(imageVector = Icons.Default.Info, contentDescription = null)
                            }
                            IconButton(
                                onClick = {},
                                colors = IconButtonDefaults.iconButtonColors(contentColor = Color.White),
                                modifier = Modifier.indication(indication = null ,
                                    interactionSource = remember { MutableInteractionSource() })
                            ) {
                                Icon(imageVector = Icons.Default.Share, contentDescription = null)
                            }
                            Row(
                                modifier = Modifier.fillMaxWidth(),
                                horizontalArrangement = Arrangement.End,
                                verticalAlignment = Alignment.CenterVertically
                            ) {
                                Text("دنباله دار میانی", fontSize = 20.sp, color = Color.White  , maxLines = 1 , fontWeight = FontWeight.ExtraBold)
                                IconButton(onClick = {expanded = true},
                                    modifier = Modifier.size(50.dp)
                                        .indication(indication = null ,
                                            interactionSource = remember { MutableInteractionSource() }),
                                    colors = IconButtonDefaults.iconButtonColors(contentColor = Color.White)) {
                                    Icon(imageVector = Icons.Default.Menu, contentDescription = null)
                                }
                            }
                        }
                    }
                }
                var textDonbaleDarhayeMianSetareei = listOf(
                    ": معرفی کلی\n" +
                            "\n" +
                            "دنباله‌دارهای میان‌ستاره‌ای اجرامی نادر و شگفت‌انگیزند که برخلاف دنباله‌دارهای معمولی، منشأ آن‌ها در منظومهٔ شمسی نیست بلکه از فضای میان‌ستاره‌ای وارد حوزهٔ گرانشی خورشید می‌شوند. " +
                            "این اجرام معمولاً مدارهای هایپربولیک دارند که نشان می‌دهد پس از یک گذر، از منظومه خارج می‌شوند و دیگر بازنخواهند گشت. " +
                            "تا کنون تنها دو نمونه به‌طور قطعی شناسایی شده‌اند: ʻاوموآموا (۲۰۱۷) و ۲آی بوریسوف (۲۰۱۹). " +
                            "این کشفیات پنجره‌ای تازه به روی شناخت فرآیندهای شکل‌گیری سیارات و دنباله‌دارها در سامانه‌های ستاره‌ای دیگر گشوده‌اند و اهمیت بی‌سابقه‌ای در اخترشناسی دارند\u202b." +
                            "\n" +
                            "\n" +
                            "\n" +
                            ": چارچوب‌های رده‌بندی و دسته‌بندی\n" +
                            "\n" +
                            "بر اساس مدار: مدارهای هایپربولیک با خروجی بیشتر از ۱ که نشان‌دهندهٔ منشأ فراخورشیدی است. " +
                            "بر اساس ویژگی‌های فیزیکی: برخی مانند بوریسوف ساختاری شبیه دنباله‌دارهای سنتی داشتند (با دم غبار و یون)، اما ʻاوموآموا فاقد دم آشکار بود. " +
                            "بر اساس روش کشف: معمولاً با جست‌وجوهای آسمانی عریض مانند پان استارز (اوموآموا) یا تلسکوپ‌های رباتیک آماتوری (بوریسوف) کشف می‌شوند. " +
                            "بر اساس اهمیت علمی: دسته‌ای برای مطالعهٔ مستقیم مواد و فرآیندهای سامانه‌های دیگر، و دسته‌ای به‌عنوان پیام‌آور احتمالی نظریه‌های میان‌ستاره‌ای\u202b." +
                            "\n" +
                            "\n" +
                            "\n" +
                            ": اصول و مبانی نظری کلیدی\n" +
                            "\n" +
                            "ورود اجرام میان‌ستاره‌ای نتیجهٔ پرتاب گرانشی آن‌ها در سامانهٔ مادری است؛ مثلاً تعامل سیارات غول‌پیکر با دنباله‌دارهای یخی. " +
                            "اوموآموا به دلیل شکل کشیده و حرکت غیرعادی (انحراف از مدار محاسباتی بدون دم آشکار) نظریه‌های گوناگون دربارهٔ ماهیتش برانگیخت. " +
                            "۲آی بوریسوف شباهت فراوانی به دنباله‌دارهای معمولی داشت و نخستین مدرک مستقیم از وجود دنباله‌دارهای سنتی در سامانه‌های دیگر بود. " +
                            "بررسی طیفی نشان داد که ترکیب بوریسوف از نظر یخ‌ها و مواد آلی مشابه برخی دنباله‌دارهای کمربند اورت منظومهٔ ما است. " +
                            "شبیه‌سازی‌ها نشان می‌دهد که تعداد زیادی از این اجرام باید در کهکشان وجود داشته باشد و منظومهٔ شمسی ما گه‌گاه شاهد گذر آن‌ها خواهد بود\u202b." +
                            "\n" +
                            "\n" +
                            "\n" +
                            ": کاربردها و پیش‌بینی‌ها\n" +
                            "\n" +
                            "امکان مقایسهٔ مستقیم بین دنباله‌دارهای میان‌ستاره‌ای و دنباله‌دارهای منظومهٔ شمسی. " +
                            "شناخت شرایط شکل‌گیری سیارات و دنباله‌دارها در سامانه‌های دیگر. " +
                            "پیش‌بینی افزایش کشف اجرام میان‌ستاره‌ای با شروع فعالیت تلسکوپ ورا روبین در دههٔ ۲۰۲۰. " +
                            "ایجاد طرح‌های اولیه برای مأموریت‌های رهگیری و ملاقات با دنباله‌دارهای میان‌ستاره‌ای آینده. " +
                            "بررسی امکان وجود مواد آلی پیچیده و حتی پیش‌سازهای زیستی در این اجرام\u202b." +
                            "\n" +
                            "\n" +
                            "\n" +
                            ": نقش در علم و فناوری\n" +
                            "\n" +
                            "گسترش دیدگاه بشر دربارهٔ منشأ و تنوع اجرام کوچک فراتر از منظومهٔ شمسی. " +
                            "الهام برای توسعهٔ فناوری‌های پرسرعت رهگیری فضایی. " +
                            "ایجاد ابزارهای پیشرفتهٔ رصدی برای کشف سریع‌تر اجرام گذری. " +
                            "پشتیبانی از نظریه‌های چندمنشأی بودن مواد سازندهٔ منظومهٔ شمسی. " +
                            "طرح پرسش‌های نوین دربارهٔ احتمال تبادل مواد میان سامانه‌های سیاره‌ای مختلف\u202b." +
                            "\n" +
                            "\n" +
                            "\n" +
                            ": بخش نظری برجسته\n" +
                            "\n" +
                            "اوموآموا (۲۰۱۷): نخستین جرم میان‌ستاره‌ای شناخته‌شده؛ فاقد دم آشکار، با شکل کشیده و حرکات غیرعادی. " +
                            "۲آی بوریسوف (۲۰۱۹): نخستین دنباله‌دار میان‌ستاره‌ای با دم فعال و ترکیب مشابه دنباله‌دارهای سنتی. " +
                            "فرضیهٔ اجرام میان‌ستاره‌ای متعدد: مدل‌های آماری پیش‌بینی می‌کنند که هر سال چند جرم از این نوع وارد منظومهٔ شمسی می‌شود، هرچند بیشترشان کوچک یا کم‌نورند. " +
                            "چشم‌انداز آینده: مأموریت‌های رهگیری سریع مانند پروژهٔ مفهومی (اینتر‌سپتور دنباله‌دار) آژانس فضایی اروپا می‌تواند نخستین کاوشگر مستقیم از یک جرم میان‌ستاره‌ای باشد\u202b."
                )
                val textmortabet = listOf("دنباله دار کوتاه دوره", "دنباله دار بلند دوره", "دنباله دار تک گذر", "ساختار دنباله دارها", "منشأ دنباله دارها", "دنباله دار معروف" , "چرخه دنباله دار", "تأثیر دنباله دار" , "مقایسه دنباله دارها")
                val imagemortabet = listOf(
                    painterResource(R.drawable.cometkotahdore),
                    painterResource(R.drawable.cometbolanddore),
                    painterResource(R.drawable.cometzodgozar),
                    painterResource(R.drawable.cometsakhtar),
                    painterResource(R.drawable.cometmanshae),
                    painterResource(R.drawable.cometfamus),
                    painterResource(R.drawable.comecharkhehayat),
                    painterResource(R.drawable.cometaethirbarzamin),
                    painterResource(R.drawable.cometmoghayese),
                )
                val tarkib = textmortabet.zip(imagemortabet)
                Column(
                    modifier = Modifier
                        .padding(25.dp)
                        .fillMaxSize()
                ) {
                    Box(modifier = Modifier.fillMaxSize())

                    {
                        LazyColumn(
                            horizontalAlignment = Alignment.CenterHorizontally
                        ) {
                            items(textDonbaleDarhayeMianSetareei) { letter ->
                                Column(modifier = Modifier.padding(30.dp)) {
                                    Row {
                                        Image(painter = painterResource(id = R.drawable.comemiansetaree)
                                            , contentDescription = null , contentScale = ContentScale.Crop
                                            , modifier = Modifier.size(100.dp))
                                        Column {
                                            Text("")
                                            Row(modifier = Modifier.fillMaxWidth()
                                                ,horizontalArrangement = Arrangement.End
                                                , verticalAlignment = Alignment.CenterVertically) {
                                                Text("دنباله دار میانی" , fontSize = 20.sp  , color = Color.White , style = TextStyle(
                                                    shadow = Shadow(
                                                        color = Color(0xFFFFFFFF),
                                                        offset = Offset(0f ,0f)
                                                        , blurRadius = 20f
                                                    )
                                                ), maxLines = 1)
                                            }
                                        }
                                    }
                                }
                                Box(
                                    modifier = Modifier.fillMaxSize(),
                                    contentAlignment = Alignment.CenterStart,
                                ) {
                                    Column {
                                        Text(
                                            "$letter",
                                            fontSize = 20.sp,
                                            color = Color(0xFFFFFFFF),
                                            lineHeight = 32.sp,
                                            textAlign = TextAlign.Right
                                            , style = TextStyle(
                                                shadow = Shadow(
                                                    color = Color(0xFFFFFFFF),
                                                    offset = Offset(0f ,0f)
                                                    , blurRadius = 20f
                                                )
                                            )
                                        )
                                        Text("")
                                        Text("")
                                        Text("")
                                        Text(
                                            "موضوعات مرتبط",
                                            textAlign = TextAlign.Right,
                                            modifier = Modifier.fillMaxWidth(),
                                            fontSize = 30.sp,
                                            color = Color.White
                                            , style = TextStyle(
                                                shadow = Shadow(
                                                    color = Color(0xFFFFFFFF),
                                                    offset = Offset(0f ,0f)
                                                    , blurRadius = 20f
                                                )
                                            )
                                        )
                                        Text("")
                                        LazyRow(reverseLayout = true) {
                                            items(tarkib) { (matnha, aksha) ->
                                                Card(
                                                    modifier = Modifier
                                                        .width(250.dp)
                                                        .height(120.dp)
                                                        .padding(20.dp)
                                                        .clip(shape = RoundedCornerShape(100.dp)),
                                                    shape = RectangleShape,
                                                    colors = CardDefaults.cardColors(
                                                        containerColor = Color(
                                                            0xFF0707AD
                                                        )
                                                    )
                                                ) {
                                                    Box(
                                                        modifier = Modifier.fillMaxSize(),
                                                        contentAlignment = Alignment.CenterEnd
                                                    ) {
                                                        Image(
                                                            painter = painterResource(id = R.drawable.card),
                                                            contentScale = ContentScale.Crop,
                                                            contentDescription = null,
                                                            modifier = Modifier.fillMaxSize()
                                                        )
                                                        Button(
                                                            modifier = Modifier.fillMaxSize(
                                                            ).indication(indication = null ,
                                                                interactionSource = remember { MutableInteractionSource() }), onClick = {
                                                                if (matnha == "دنباله دار کوتاه دوره") {
                                                                    backap = false
                                                                    currentScreen = "comekotah"
                                                                }
                                                                if (matnha == "دنباله دار بلند دوره") {
                                                                    currentScreen = "comeboland"
                                                                    backap = false
                                                                }
                                                                if (matnha == "دنباله دار تک گذر") {
                                                                    backap = false
                                                                    currentScreen = "cometakgozar"
                                                                }
                                                                if (matnha == "ساختار دنباله دارها") {
                                                                    currentScreen = "comesakhtar"
                                                                    backap = false
                                                                }
                                                                if (matnha == "منشأ دنباله دارها") {
                                                                    backap = false
                                                                    currentScreen = "comemanshae"
                                                                }
                                                                if (matnha == "دنباله دار معروف") {
                                                                    backap = false
                                                                    currentScreen = "comefamus"
                                                                }
                                                                if (matnha == "دنباله دار میانی") {
                                                                    backap = false
                                                                    currentScreen = "comemiani"
                                                                }
                                                                if (matnha == "چرخه دنباله دار") {
                                                                    backap = false
                                                                    currentScreen = "comecharkhe"
                                                                }
                                                                if (matnha == "تأثیر دنباله دار") {
                                                                    backap = false
                                                                    currentScreen = "cometaethir"
                                                                }
                                                                if (matnha == "مقایسه دنباله دارها") {
                                                                    backap = false
                                                                    currentScreen = "comemoghayese"
                                                                }
                                                            }, colors = ButtonDefaults.buttonColors(
                                                                contentColor = Color.Transparent,
                                                                containerColor = Color.Transparent
                                                            )) {
                                                        }
                                                        Row() {
                                                            Spacer(modifier = Modifier.width(10.dp))
                                                            Column {
                                                                Spacer(modifier = Modifier.height(9.dp))
                                                                Text(
                                                                    "$matnha",
                                                                    color = Color.White,
                                                                    fontSize = 20.sp
                                                                    , style = TextStyle(
                                                                        shadow = Shadow(
                                                                            color = Color(0xFFFFFFFF),
                                                                            offset = Offset(0f ,0f)
                                                                            , blurRadius = 20f
                                                                        )
                                                                    )
                                                                )
                                                            }
                                                            Spacer(modifier = Modifier.width(15.dp))
                                                            Image(
                                                                painter = aksha,
                                                                contentDescription = null,
                                                                contentScale = ContentScale.Crop,
                                                                modifier = Modifier.size(50.dp)
                                                            )
                                                            Spacer(modifier = Modifier.width(15.dp))
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        Text("")
                                        Text("")
                                        Text("")
                                    }
                                }
                            }
                        }
                        var count by remember { mutableStateOf(0) }
                        IconButton(
                            onClick = { count++ },
                            modifier = Modifier
                                .size(70.dp)
                                .align(Alignment.BottomEnd)
                                .indication(indication = null ,
                                    interactionSource = remember { MutableInteractionSource() }),
                            colors = IconButtonDefaults.iconButtonColors(
                                containerColor = Color(0xFF030A33)
                            )
                        ) {
                            if (count % 2 == 0) {
                                Icon(
                                    imageVector = Icons.Default.Favorite,
                                    contentDescription = null,
                                    modifier = Modifier.size(50.dp),
                                    tint = Color.Transparent
                                )
                                Icon(
                                    imageVector = Icons.Default.FavoriteBorder,
                                    contentDescription = null,
                                    modifier = Modifier.size(50.dp),
                                    tint = Color.White
                                )
                            }
                            if (count % 2 == 1) {
                                Icon(
                                    imageVector = Icons.Default.Favorite,
                                    contentDescription = null,
                                    modifier = Modifier.size(50.dp),
                                    tint = Color.White
                                )
                                Icon(
                                    imageVector = Icons.Default.FavoriteBorder,
                                    contentDescription = null,
                                    modifier = Modifier.size(50.dp),
                                    tint = Color.White
                                )
                            }
                        }
                    }
                }
            }
        }
    }
}
@Composable
fun Cometcharkhe(){
    Image(
        painter = painterResource(id = R.drawable.app_back),
        contentScale = ContentScale.Crop,
        contentDescription = null
    )
    when(currentScreen) {
        "comecharkhe" -> {
            Column {
                Card(
                    modifier = Modifier
                        .fillMaxWidth()
                        .height(32.5.dp),
                    shape = RectangleShape,
                    colors = CardDefaults.cardColors(containerColor = Color(0xFF030A33))
                ) {
                }
                Column(){
                    Card(
                        modifier = Modifier
                            .fillMaxWidth()
                            .height(50.dp),
                        shape = RectangleShape,
                        colors = CardDefaults.cardColors(containerColor = Color(0xFF0707AD))
                    ) {
                        Row(modifier = Modifier.padding(10.dp)) {
                            IconButton(onClick = {currentScreen = "asli4"
                                backap = true
                            } , colors = IconButtonDefaults.iconButtonColors(contentColor = Color.White)
                                , modifier = Modifier.indication(indication = null ,
                                    interactionSource = remember { MutableInteractionSource() })){
                                Icon(imageVector = Icons.Outlined.ArrowBack, contentDescription = null , modifier = Modifier.size(40.dp))
                            }
                            IconButton(
                                onClick = {},
                                colors = IconButtonDefaults.iconButtonColors(contentColor = Color.White),
                                modifier = Modifier.indication(indication = null ,
                                    interactionSource = remember { MutableInteractionSource() })
                            ) {
                                Icon(imageVector = Icons.Default.Info, contentDescription = null)
                            }
                            IconButton(
                                onClick = {},
                                colors = IconButtonDefaults.iconButtonColors(contentColor = Color.White),
                                modifier = Modifier.indication(indication = null ,
                                    interactionSource = remember { MutableInteractionSource() })
                            ) {
                                Icon(imageVector = Icons.Default.Share, contentDescription = null)
                            }
                            Row(
                                modifier = Modifier.fillMaxWidth(),
                                horizontalArrangement = Arrangement.End,
                                verticalAlignment = Alignment.CenterVertically
                            ) {
                                Text("چرخه حیات دنباله دار", fontSize = 20.sp, color = Color.White  , maxLines = 1 , fontWeight = FontWeight.ExtraBold)
                                IconButton(onClick = {expanded = true},
                                    modifier = Modifier.size(50.dp)
                                        .indication(indication = null ,
                                            interactionSource = remember { MutableInteractionSource() }),
                                    colors = IconButtonDefaults.iconButtonColors(contentColor = Color.White)) {
                                    Icon(imageVector = Icons.Default.Menu, contentDescription = null)
                                }
                            }
                        }
                    }
                }
                var textCharkheHayatDonbaledarha = listOf(
                    ": معرفی کلی\n" +
                            "\n" +
                            "چرخهٔ حیات دنباله‌دارها بیانگر مسیر تکاملی این اجرام از زمان شکل‌گیری تا پایان حیات فعالشان است. " +
                            "دنباله‌دارها بقایای یخی و غبارآلود منظومهٔ شمسی اولیه‌اند که با نزدیک‌شدن به خورشید فعال می‌شوند و دم درخشان پیدا می‌کنند. " +
                            "این چرخه شامل مراحل گوناگون از حالت یخ‌زده و خاموش در نواحی دوردست، تا فعال‌شدن در گذرهای خورشیدی و در نهایت خاموشی یا فروپاشی است. " +
                            "مطالعهٔ چرخهٔ حیات آن‌ها به دانشمندان کمک می‌کند تا تاریخچهٔ منظومهٔ شمسی و توزیع مواد آلی و یخی را بهتر درک کنند\u202b." +
                            "\n" +
                            "\n" +
                            "\n" +
                            ": چارچوب‌های رده‌بندی و دسته‌بندی\n" +
                            "\n" +
                            "بر اساس دورهٔ مداری: کوتاه‌مدت (کمتر از ۲۰۰ سال) و بلندمدت (بیش از ۲۰۰ سال). " +
                            "بر اساس وضعیت تکاملی: دنباله‌دارهای جوان و فعال، دنباله‌دارهای سالخورده و کم‌فعال و دنباله‌دارهای خاموش یا منقرض‌شده. " +
                            "بر اساس منبع ذخیره: کمربند کویپر و ابر اورت به عنوان مخازن اصلی. " +
                            "بر اساس سرنوشت نهایی: تبخیر کامل فروپاشی انفجاری یا تبدیل به اجرام شبه‌سیارکی خاموش\u202b." +
                            "\n" +
                            "\n" +
                            "\n" +
                            ": اصول و مبانی نظری کلیدی\n" +
                            "\n" +
                            "در نواحی دور مانند کمربند کویپر و ابر اورت دنباله‌دارها میلیاردها سال در حالت یخی و غیر‌فعال باقی می‌مانند. " +
                            "با برهم‌کنش گرانشی سیارات یا ستارگان نزدیک برخی وارد مدارهای بیضوی می‌شوند و به خورشید نزدیک می‌گردند. " +
                            "افزایش دما موجب تصعید یخ‌ها و تشکیل کما و دم می‌شود. " +
                            "در هر گذر بخشی از جرم دنباله‌دار از دست می‌رود تا به تدریج هسته کوچک‌تر و کم‌فعال شود. " +
                            "نهایتاً یا به‌طور کامل تبخیر می‌شود، یا به جرم خاموش و شبیه سیارک بدل می‌گردد، یا در اثر شکست و برخورد متلاشی می‌شود\u202b." +
                            "\n" +
                            "\n" +
                            "\n" +
                            ": کاربردها و پیش‌بینی‌ها\n" +
                            "\n" +
                            "شناخت چرخهٔ حیات دنباله‌دارها به بررسی تاریخچهٔ مواد آلی و یخی در منظومهٔ شمسی کمک می‌کند. " +
                            "پیش‌بینی فعالیت‌های دنباله‌دارها برای مأموریت‌های فضایی (مانند روزتا در ۶۷پی چوریوموف گراسیمنکو). " +
                            "شناسایی منابع احتمالی آب و ترکیبات آلی که می‌توانند در خاستگاه حیات نقش داشته باشند. " +
                            "پیش‌بینی فروپاشی یا کاهش فعالیت دنباله‌دارهای رصدی برای مطالعات بلندمدت. " +
                            "درک بهتر توزیع اجرام خاموشی که احتمالاً منشأ بسیاری از بارش‌های شهابی‌اند\u202b." +
                            "\n" +
                            "\n" +
                            "\n" +
                            ": نقش در علم و فناوری\n" +
                            "\n" +
                            "دنباله‌دارها به‌عنوان آزمایشگاه‌های طبیعی شرایط اولیهٔ منظومهٔ شمسی عمل می‌کنند. " +
                            "چرخهٔ حیات آن‌ها مسیر تکاملی مواد یخی و آلی را آشکار می‌سازد. " +
                            "برنامه‌ریزی مأموریت‌های نمونه‌برداری و کاوشگرها بر اساس فهم مراحل فعالیت انجام می‌گیرد. " +
                            "الهام برای توسعهٔ فناوری‌های حفاری رهگیری و استخراج منابع در آینده. " +
                            "استفاده از مدل‌سازی‌های چرخهٔ حیات برای پیش‌بینی بارش‌های شهابی و اثرات بالقوه بر زمین\u202b." +
                            "\n" +
                            "\n" +
                            "\n" +
                            ": بخش نظری برجسته\n" +
                            "\n" +
                            "مرحلهٔ خاموش: دنباله‌دار در دوردست منظومه سرد و غیر‌فعال در ابر اورت یا کمربند کویپر. " +
                            "مرحلهٔ فعال: نزدیک‌شدن به خورشید تشکیل کما و دم در اثر تصعید یخ‌ها. " +
                            "مرحلهٔ سالخورده: کاهش ذخیرهٔ یخ‌ها و کم‌شدن فعالیت؛ هسته کم‌نورتر می‌شود. " +
                            "مرحلهٔ انقراض: تبخیر کامل یا تبدیل به جرم شبه‌سیارکی خاموش. " +
                            "نمونهٔ بارز: دنباله‌دار ۲پی انکه که فعالیتش کاهش یافته و به سمت خاموشی پیش می‌رود\u202b."
                )
                val textmortabet = listOf("دنباله دار کوتاه دوره", "دنباله دار بلند دوره", "دنباله دار تک گذر", "ساختار دنباله دارها", "منشأ دنباله دارها", "دنباله دار معروف" , "دنباله دار میانی", "تأثیر دنباله دار" , "مقایسه دنباله دارها")
                val imagemortabet = listOf(
                    painterResource(R.drawable.cometkotahdore),
                    painterResource(R.drawable.cometbolanddore),
                    painterResource(R.drawable.cometzodgozar),
                    painterResource(R.drawable.cometsakhtar),
                    painterResource(R.drawable.cometmanshae),
                    painterResource(R.drawable.cometfamus),
                    painterResource(R.drawable.comemiansetaree),
                    painterResource(R.drawable.cometaethirbarzamin),
                    painterResource(R.drawable.cometmoghayese),
                )
                val tarkib = textmortabet.zip(imagemortabet)
                Column(
                    modifier = Modifier
                        .padding(25.dp)
                        .fillMaxSize()
                ) {
                    Box(modifier = Modifier.fillMaxSize())

                    {
                        LazyColumn(
                            horizontalAlignment = Alignment.CenterHorizontally
                        ) {
                            items(textCharkheHayatDonbaledarha) { letter ->
                                Column(modifier = Modifier.padding(30.dp)) {
                                    Row {
                                        Image(painter = painterResource(id = R.drawable.comecharkhehayat)
                                            , contentDescription = null , contentScale = ContentScale.Crop
                                            , modifier = Modifier.size(100.dp))
                                        Column {
                                            Text("")
                                            Row(modifier = Modifier.fillMaxWidth()
                                                ,horizontalArrangement = Arrangement.End
                                                , verticalAlignment = Alignment.CenterVertically) {
                                                Text("چرخه حیات دنباله دار" , fontSize = 20.sp  , color = Color.White , style = TextStyle(
                                                    shadow = Shadow(
                                                        color = Color(0xFFFFFFFF),
                                                        offset = Offset(0f ,0f)
                                                        , blurRadius = 20f
                                                    )
                                                ), maxLines = 1)
                                            }
                                        }
                                    }
                                }
                                Box(
                                    modifier = Modifier.fillMaxSize(),
                                    contentAlignment = Alignment.CenterStart,
                                ) {
                                    Column {
                                        Text(
                                            "$letter",
                                            fontSize = 20.sp,
                                            color = Color(0xFFFFFFFF),
                                            lineHeight = 32.sp,
                                            textAlign = TextAlign.Right
                                            , style = TextStyle(
                                                shadow = Shadow(
                                                    color = Color(0xFFFFFFFF),
                                                    offset = Offset(0f ,0f)
                                                    , blurRadius = 20f
                                                )
                                            )
                                        )
                                        Text("")
                                        Text("")
                                        Text("")
                                        Text(
                                            "موضوعات مرتبط",
                                            textAlign = TextAlign.Right,
                                            modifier = Modifier.fillMaxWidth(),
                                            fontSize = 30.sp,
                                            color = Color.White
                                            , style = TextStyle(
                                                shadow = Shadow(
                                                    color = Color(0xFFFFFFFF),
                                                    offset = Offset(0f ,0f)
                                                    , blurRadius = 20f
                                                )
                                            )
                                        )
                                        Text("")
                                        LazyRow(reverseLayout = true) {
                                            items(tarkib) { (matnha, aksha) ->
                                                Card(
                                                    modifier = Modifier
                                                        .width(250.dp)
                                                        .height(120.dp)
                                                        .padding(20.dp)
                                                        .clip(shape = RoundedCornerShape(100.dp)),
                                                    shape = RectangleShape,
                                                    colors = CardDefaults.cardColors(
                                                        containerColor = Color(
                                                            0xFF0707AD
                                                        )
                                                    )
                                                ) {
                                                    Box(
                                                        modifier = Modifier.fillMaxSize(),
                                                        contentAlignment = Alignment.CenterEnd
                                                    ) {
                                                        Image(
                                                            painter = painterResource(id = R.drawable.card),
                                                            contentScale = ContentScale.Crop,
                                                            contentDescription = null,
                                                            modifier = Modifier.fillMaxSize()
                                                        )
                                                        Button(
                                                            modifier = Modifier.fillMaxSize(
                                                            ).indication(indication = null ,
                                                                interactionSource = remember { MutableInteractionSource() }), onClick = {
                                                                if (matnha == "دنباله دار کوتاه دوره") {
                                                                    backap = false
                                                                    currentScreen = "comekotah"
                                                                }
                                                                if (matnha == "دنباله دار بلند دوره") {
                                                                    currentScreen = "comeboland"
                                                                    backap = false
                                                                }
                                                                if (matnha == "دنباله دار تک گذر") {
                                                                    backap = false
                                                                    currentScreen = "cometakgozar"
                                                                }
                                                                if (matnha == "ساختار دنباله دارها") {
                                                                    currentScreen = "comesakhtar"
                                                                    backap = false
                                                                }
                                                                if (matnha == "منشأ دنباله دارها") {
                                                                    backap = false
                                                                    currentScreen = "comemanshae"
                                                                }
                                                                if (matnha == "دنباله دار معروف") {
                                                                    backap = false
                                                                    currentScreen = "comefamus"
                                                                }
                                                                if (matnha == "دنباله دار میانی") {
                                                                    backap = false
                                                                    currentScreen = "comemiani"
                                                                }
                                                                if (matnha == "چرخه دنباله دار") {
                                                                    backap = false
                                                                    currentScreen = "comecharkhe"
                                                                }
                                                                if (matnha == "تأثیر دنباله دار") {
                                                                    backap = false
                                                                    currentScreen = "cometaethir"
                                                                }
                                                                if (matnha == "مقایسه دنباله دارها") {
                                                                    backap = false
                                                                    currentScreen = "comemoghayese"
                                                                }
                                                            }, colors = ButtonDefaults.buttonColors(
                                                                contentColor = Color.Transparent,
                                                                containerColor = Color.Transparent
                                                            )) {
                                                        }
                                                        Row() {
                                                            Spacer(modifier = Modifier.width(10.dp))
                                                            Column {
                                                                Spacer(modifier = Modifier.height(9.dp))
                                                                Text(
                                                                    "$matnha",
                                                                    color = Color.White,
                                                                    fontSize = 20.sp
                                                                    , style = TextStyle(
                                                                        shadow = Shadow(
                                                                            color = Color(0xFFFFFFFF),
                                                                            offset = Offset(0f ,0f)
                                                                            , blurRadius = 20f
                                                                        )
                                                                    )
                                                                )
                                                            }
                                                            Spacer(modifier = Modifier.width(15.dp))
                                                            Image(
                                                                painter = aksha,
                                                                contentDescription = null,
                                                                contentScale = ContentScale.Crop,
                                                                modifier = Modifier.size(50.dp)
                                                            )
                                                            Spacer(modifier = Modifier.width(15.dp))
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        Text("")
                                        Text("")
                                        Text("")
                                    }
                                }
                            }
                        }
                        var count by remember { mutableStateOf(0) }
                        IconButton(
                            onClick = { count++ },
                            modifier = Modifier
                                .size(70.dp)
                                .align(Alignment.BottomEnd)
                                .indication(indication = null ,
                                    interactionSource = remember { MutableInteractionSource() }),
                            colors = IconButtonDefaults.iconButtonColors(
                                containerColor = Color(0xFF030A33)
                            )
                        ) {
                            if (count % 2 == 0) {
                                Icon(
                                    imageVector = Icons.Default.Favorite,
                                    contentDescription = null,
                                    modifier = Modifier.size(50.dp),
                                    tint = Color.Transparent
                                )
                                Icon(
                                    imageVector = Icons.Default.FavoriteBorder,
                                    contentDescription = null,
                                    modifier = Modifier.size(50.dp),
                                    tint = Color.White
                                )
                            }
                            if (count % 2 == 1) {
                                Icon(
                                    imageVector = Icons.Default.Favorite,
                                    contentDescription = null,
                                    modifier = Modifier.size(50.dp),
                                    tint = Color.White
                                )
                                Icon(
                                    imageVector = Icons.Default.FavoriteBorder,
                                    contentDescription = null,
                                    modifier = Modifier.size(50.dp),
                                    tint = Color.White
                                )
                            }
                        }
                    }
                }
            }
        }
    }
}
@Composable
fun Comettaethir(){
    Image(
        painter = painterResource(id = R.drawable.app_back),
        contentScale = ContentScale.Crop,
        contentDescription = null
    )
    when(currentScreen) {
        "cometaethir" -> {
            Column {
                Card(
                    modifier = Modifier
                        .fillMaxWidth()
                        .height(32.5.dp),
                    shape = RectangleShape,
                    colors = CardDefaults.cardColors(containerColor = Color(0xFF030A33))
                ) {
                }
                Column(){
                    Card(
                        modifier = Modifier
                            .fillMaxWidth()
                            .height(50.dp),
                        shape = RectangleShape,
                        colors = CardDefaults.cardColors(containerColor = Color(0xFF0707AD))
                    ) {
                        Row(modifier = Modifier.padding(10.dp)) {
                            IconButton(onClick = {currentScreen = "asli4"
                                backap = true
                            } , colors = IconButtonDefaults.iconButtonColors(contentColor = Color.White)
                                , modifier = Modifier.indication(indication = null ,
                                    interactionSource = remember { MutableInteractionSource() })){
                                Icon(imageVector = Icons.Outlined.ArrowBack, contentDescription = null , modifier = Modifier.size(40.dp))
                            }
                            IconButton(
                                onClick = {},
                                colors = IconButtonDefaults.iconButtonColors(contentColor = Color.White),
                                modifier = Modifier.indication(indication = null ,
                                    interactionSource = remember { MutableInteractionSource() })
                            ) {
                                Icon(imageVector = Icons.Default.Info, contentDescription = null)
                            }
                            IconButton(
                                onClick = {},
                                colors = IconButtonDefaults.iconButtonColors(contentColor = Color.White),
                                modifier = Modifier.indication(indication = null ,
                                    interactionSource = remember { MutableInteractionSource() })
                            ) {
                                Icon(imageVector = Icons.Default.Share, contentDescription = null)
                            }
                            Row(
                                modifier = Modifier.fillMaxWidth(),
                                horizontalArrangement = Arrangement.End,
                                verticalAlignment = Alignment.CenterVertically
                            ) {
                                Text("تأثیر دنباله دار بر زمین", fontSize = 20.sp, color = Color.White  , maxLines = 1 , fontWeight = FontWeight.ExtraBold)
                                IconButton(onClick = {expanded = true},
                                    modifier = Modifier.size(50.dp)
                                        .indication(indication = null ,
                                            interactionSource = remember { MutableInteractionSource() }),
                                    colors = IconButtonDefaults.iconButtonColors(contentColor = Color.White)) {
                                    Icon(imageVector = Icons.Default.Menu, contentDescription = null)
                                }
                            }
                        }
                    }
                }
                var textTasirDonbaledarBarZamin = listOf(
                    ": معرفی کلی\n" +
                            "\n" +
                            "دنباله‌دارها به‌عنوان اجرام یخی و غبارآلود منظومهٔ شمسی همواره تأثیرات متعددی بر زمین داشته‌اند. " +
                            "این تأثیرات شامل رساندن آب و مواد آلی در دوران اولیه ایجاد بارش‌های شهابی در برخورد ذرات جداشده با جو زمین و همچنین احتمال برخوردهای مستقیم در گذشته‌های دور است. " +
                            "نقش دنباله‌دارها در شکل‌گیری تاریخ زمین از منظر زمین‌شناسی اقلیم و حتی منشأ احتمالی حیات مورد توجه دانشمندان است\u202b." +
                            "\n" +
                            "\n" +
                            "\n" +
                            ": چارچوب‌های رده‌بندی و دسته‌بندی\n" +
                            "\n" +
                            "بر اساس نوع تأثیر: تأثیرات مستقیم (برخورد با زمین) و غیرمستقیم (بارش‌های شهابی، تغییرات اقلیمی). " +
                            "بر اساس زمان‌بندی: تأثیرات اولیه در دوران شکل‌گیری زمین و تأثیرات معاصر در قالب بارش‌های شهابی. " +
                            "بر اساس مقیاس: تأثیرات محلی (مانند بارش‌های شهابی محدود) و جهانی (مانند برخوردهای بزرگ و تغییرات اقلیمی عمده). " +
                            "بر اساس ماهیت مواد: آب ترکیبات آلی گردوغبار کیهانی و انرژی آزادشده در برخوردها\u202b." +
                            "\n" +
                            "\n" +
                            "\n" +
                            ": اصول و مبانی نظری کلیدی\n" +
                            "\n" +
                            "فرضیهٔ منشأ آب: بسیاری از دانشمندان بر این باورند که بخشی از آب اقیانوس‌های زمین ممکن است توسط دنباله‌دارها به زمین منتقل شده باشد. " +
                            "نقش در منشأ حیات: وجود مولکول‌های آلی پیچیده در دنباله‌دارها احتمال انتقال مواد لازم برای شکل‌گیری حیات را مطرح می‌کند. " +
                            "برخوردهای بزرگ: شواهد زمین‌شناسی نشان می‌دهد که برخوردهای دنباله‌داری یا سیارکی می‌تواند تغییرات شدید اقلیمی و حتی انقراض‌های گسترده ایجاد کند. " +
                            "بارش‌های شهابی: ذرات باقی‌مانده از دنباله‌دارها هنگام ورود به جو زمین می‌سوزند و پدیده‌های زیبای شهابی را به وجود می‌آورند\u202b." +
                            "\n" +
                            "\n" +
                            "\n" +
                            ": کاربردها و پیش‌بینی‌ها\n" +
                            "\n" +
                            "مطالعهٔ منشأ آب و ترکیبات آلی زمین و نقش احتمالی دنباله‌دارها در این فرآیند. " +
                            "پیش‌بینی بارش‌های شهابی سالانه مانند برساوشی‌ها و لئونیدی‌ها برای تحقیقات علمی و علاقه‌مندان به نجوم. " +
                            "ارزیابی خطر برخورد احتمالی دنباله‌دارها با زمین و برنامه‌ریزی برای مأموریت‌های دفاع سیاره‌ای. " +
                            "تحلیل تغییرات اقلیمی گذشته برای درک بهتر نقش برخوردهای کیهانی در تکامل زیستی. " +
                            "برنامه‌ریزی مأموریت‌های فضایی برای نمونه‌برداری از مواد دنباله‌داری و بررسی ترکیب شیمیایی آن‌ها\u202b." +
                            "\n" +
                            "\n" +
                            "\n" +
                            ": نقش در علم و فناوری\n" +
                            "\n" +
                            "الهام برای پژوهش در زمینهٔ منشأ حیات و انتقال مواد آلی در فضا. " +
                            "کاربرد داده‌های بارش‌های شهابی برای بررسی ساختار و ترکیب دنباله‌دارها. " +
                            "ایجاد انگیزه برای توسعهٔ فناوری‌های دفاع سیاره‌ای مانند تغییر مسیر اجرام نزدیک زمین. " +
                            "استفاده از مدل‌سازی برخوردهای دنباله‌داری برای شبیه‌سازی تغییرات اقلیمی شدید. " +
                            "کمک به توسعهٔ فناوری‌های رصدی و هشدار زودهنگام برای کشف دنباله‌دارهای خطرناک\u202b." +
                            "\n" +
                            "\n" +
                            "\n" +
                            ": بخش نظری برجسته\n" +
                            "\n" +
                            "فرضیهٔ منشأ آب زمین: بررسی ایزوتوپ‌های هیدروژن در آب دنباله‌دارها نشان‌دهندهٔ شباهت یا تفاوت با آب زمین. " +
                            "برخورد احتمالی دنباله‌دارها در گذشته: برخی پژوهش‌ها احتمال می‌دهند انقراض دایناسورها نه تنها از سیارک بلکه از اجرام دنباله‌داری نیز تأثیر گرفته باشد. " +
                            "بارش‌های شهابی مشهور: برساوشی‌ها لئونیدی‌ها و جوزایی‌ها که ناشی از دنباله‌دارهای فعال و خاموش‌اند. " +
                            "نمونهٔ برجسته: دنباله‌دار شوماخر-لوی ۹ که در ۱۹۹۴ با مشتری برخورد کرد و نشان داد چنین برخوردهایی در منظومهٔ شمسی رایج و پرانرژی‌اند. " +
                            "نقش در آینده: ردیابی و شناسایی دنباله‌دارهای نزدیک‌گذر برای پیشگیری از خطرات احتمالی برخورد با زمین\u202b."
                )
                val textmortabet = listOf("دنباله دار کوتاه دوره", "دنباله دار بلند دوره", "دنباله دار تک گذر", "ساختار دنباله دارها", "منشأ دنباله دارها", "دنباله دار معروف" , "دنباله دار میانی", "چرخه دنباله دار" , "مقایسه دنباله دارها")
                val imagemortabet = listOf(
                    painterResource(R.drawable.cometkotahdore),
                    painterResource(R.drawable.cometbolanddore),
                    painterResource(R.drawable.cometzodgozar),
                    painterResource(R.drawable.cometsakhtar),
                    painterResource(R.drawable.cometmanshae),
                    painterResource(R.drawable.cometfamus),
                    painterResource(R.drawable.comemiansetaree),
                    painterResource(R.drawable.comecharkhehayat),
                    painterResource(R.drawable.cometmoghayese),
                )
                val tarkib = textmortabet.zip(imagemortabet)
                Column(
                    modifier = Modifier
                        .padding(25.dp)
                        .fillMaxSize()
                ) {
                    Box(modifier = Modifier.fillMaxSize())

                    {
                        LazyColumn(
                            horizontalAlignment = Alignment.CenterHorizontally
                        ) {
                            items(textTasirDonbaledarBarZamin) { letter ->
                                Column(modifier = Modifier.padding(30.dp)) {
                                    Row {
                                        Image(painter = painterResource(id = R.drawable.cometaethirbarzamin)
                                            , contentDescription = null , contentScale = ContentScale.Crop
                                            , modifier = Modifier.size(100.dp))
                                        Column {
                                            Text("")
                                            Row(modifier = Modifier.fillMaxWidth()
                                                ,horizontalArrangement = Arrangement.End
                                                , verticalAlignment = Alignment.CenterVertically) {
                                                Text("تأثیر دنباله دار بر زمین" , fontSize = 20.sp  , color = Color.White , style = TextStyle(
                                                    shadow = Shadow(
                                                        color = Color(0xFFFFFFFF),
                                                        offset = Offset(0f ,0f)
                                                        , blurRadius = 20f
                                                    )
                                                ), maxLines = 1)
                                            }
                                        }
                                    }
                                }
                                Box(
                                    modifier = Modifier.fillMaxSize(),
                                    contentAlignment = Alignment.CenterStart,
                                ) {
                                    Column {
                                        Text(
                                            "$letter",
                                            fontSize = 20.sp,
                                            color = Color(0xFFFFFFFF),
                                            lineHeight = 32.sp,
                                            textAlign = TextAlign.Right
                                            , style = TextStyle(
                                                shadow = Shadow(
                                                    color = Color(0xFFFFFFFF),
                                                    offset = Offset(0f ,0f)
                                                    , blurRadius = 20f
                                                )
                                            )
                                        )
                                        Text("")
                                        Text("")
                                        Text("")
                                        Text(
                                            "موضوعات مرتبط",
                                            textAlign = TextAlign.Right,
                                            modifier = Modifier.fillMaxWidth(),
                                            fontSize = 30.sp,
                                            color = Color.White
                                            , style = TextStyle(
                                                shadow = Shadow(
                                                    color = Color(0xFFFFFFFF),
                                                    offset = Offset(0f ,0f)
                                                    , blurRadius = 20f
                                                )
                                            )
                                        )
                                        Text("")
                                        LazyRow(reverseLayout = true) {
                                            items(tarkib) { (matnha, aksha) ->
                                                Card(
                                                    modifier = Modifier
                                                        .width(250.dp)
                                                        .height(120.dp)
                                                        .padding(20.dp)
                                                        .clip(shape = RoundedCornerShape(100.dp)),
                                                    shape = RectangleShape,
                                                    colors = CardDefaults.cardColors(
                                                        containerColor = Color(
                                                            0xFF0707AD
                                                        )
                                                    )
                                                ) {
                                                    Box(
                                                        modifier = Modifier.fillMaxSize(),
                                                        contentAlignment = Alignment.CenterEnd
                                                    ) {
                                                        Image(
                                                            painter = painterResource(id = R.drawable.card),
                                                            contentScale = ContentScale.Crop,
                                                            contentDescription = null,
                                                            modifier = Modifier.fillMaxSize()
                                                        )
                                                        Button(
                                                            modifier = Modifier.fillMaxSize(
                                                            ).indication(indication = null ,
                                                                interactionSource = remember { MutableInteractionSource() }), onClick = {
                                                                if (matnha == "دنباله دار کوتاه دوره") {
                                                                    backap = false
                                                                    currentScreen = "comekotah"
                                                                }
                                                                if (matnha == "دنباله دار بلند دوره") {
                                                                    currentScreen = "comeboland"
                                                                    backap = false
                                                                }
                                                                if (matnha == "دنباله دار تک گذر") {
                                                                    backap = false
                                                                    currentScreen = "cometakgozar"
                                                                }
                                                                if (matnha == "ساختار دنباله دارها") {
                                                                    currentScreen = "comesakhtar"
                                                                    backap = false
                                                                }
                                                                if (matnha == "منشأ دنباله دارها") {
                                                                    backap = false
                                                                    currentScreen = "comemanshae"
                                                                }
                                                                if (matnha == "دنباله دار معروف") {
                                                                    backap = false
                                                                    currentScreen = "comefamus"
                                                                }
                                                                if (matnha == "دنباله دار میانی") {
                                                                    backap = false
                                                                    currentScreen = "comemiani"
                                                                }
                                                                if (matnha == "چرخه دنباله دار") {
                                                                    backap = false
                                                                    currentScreen = "comecharkhe"
                                                                }
                                                                if (matnha == "تأثیر دنباله دار") {
                                                                    backap = false
                                                                    currentScreen = "cometaethir"
                                                                }
                                                                if (matnha == "مقایسه دنباله دارها") {
                                                                    backap = false
                                                                    currentScreen = "comemoghayese"
                                                                }
                                                            }, colors = ButtonDefaults.buttonColors(
                                                                contentColor = Color.Transparent,
                                                                containerColor = Color.Transparent
                                                            )) {
                                                        }
                                                        Row() {
                                                            Spacer(modifier = Modifier.width(10.dp))
                                                            Column {
                                                                Spacer(modifier = Modifier.height(9.dp))
                                                                Text(
                                                                    "$matnha",
                                                                    color = Color.White,
                                                                    fontSize = 20.sp
                                                                    , style = TextStyle(
                                                                        shadow = Shadow(
                                                                            color = Color(0xFFFFFFFF),
                                                                            offset = Offset(0f ,0f)
                                                                            , blurRadius = 20f
                                                                        )
                                                                    )
                                                                )
                                                            }
                                                            Spacer(modifier = Modifier.width(15.dp))
                                                            Image(
                                                                painter = aksha,
                                                                contentDescription = null,
                                                                contentScale = ContentScale.Crop,
                                                                modifier = Modifier.size(50.dp)
                                                            )
                                                            Spacer(modifier = Modifier.width(15.dp))
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        Text("")
                                        Text("")
                                        Text("")
                                    }
                                }
                            }
                        }
                        var count by remember { mutableStateOf(0) }
                        IconButton(
                            onClick = { count++ },
                            modifier = Modifier
                                .size(70.dp)
                                .align(Alignment.BottomEnd)
                                .indication(indication = null ,
                                    interactionSource = remember { MutableInteractionSource() }),
                            colors = IconButtonDefaults.iconButtonColors(
                                containerColor = Color(0xFF030A33)
                            )
                        ) {
                            if (count % 2 == 0) {
                                Icon(
                                    imageVector = Icons.Default.Favorite,
                                    contentDescription = null,
                                    modifier = Modifier.size(50.dp),
                                    tint = Color.Transparent
                                )
                                Icon(
                                    imageVector = Icons.Default.FavoriteBorder,
                                    contentDescription = null,
                                    modifier = Modifier.size(50.dp),
                                    tint = Color.White
                                )
                            }
                            if (count % 2 == 1) {
                                Icon(
                                    imageVector = Icons.Default.Favorite,
                                    contentDescription = null,
                                    modifier = Modifier.size(50.dp),
                                    tint = Color.White
                                )
                                Icon(
                                    imageVector = Icons.Default.FavoriteBorder,
                                    contentDescription = null,
                                    modifier = Modifier.size(50.dp),
                                    tint = Color.White
                                )
                            }
                        }
                    }
                }
            }
        }
    }
}
@Composable
fun Cometmoghayese(){
    Image(
        painter = painterResource(id = R.drawable.app_back),
        contentScale = ContentScale.Crop,
        contentDescription = null
    )
    when(currentScreen) {
        "comemoghayese" -> {
            Column {
                Card(
                    modifier = Modifier
                        .fillMaxWidth()
                        .height(32.5.dp),
                    shape = RectangleShape,
                    colors = CardDefaults.cardColors(containerColor = Color(0xFF030A33))
                ) {
                }
                Column(){
                    Card(
                        modifier = Modifier
                            .fillMaxWidth()
                            .height(50.dp),
                        shape = RectangleShape,
                        colors = CardDefaults.cardColors(containerColor = Color(0xFF0707AD))
                    ) {
                        Row(modifier = Modifier.padding(10.dp)) {
                            IconButton(onClick = {currentScreen = "asli4"
                                backap = true
                            } , colors = IconButtonDefaults.iconButtonColors(contentColor = Color.White)
                                , modifier = Modifier.indication(indication = null ,
                                    interactionSource = remember { MutableInteractionSource() })){
                                Icon(imageVector = Icons.Outlined.ArrowBack, contentDescription = null , modifier = Modifier.size(40.dp))
                            }
                            IconButton(
                                onClick = {},
                                colors = IconButtonDefaults.iconButtonColors(contentColor = Color.White),
                                modifier = Modifier.indication(indication = null ,
                                    interactionSource = remember { MutableInteractionSource() })
                            ) {
                                Icon(imageVector = Icons.Default.Info, contentDescription = null)
                            }
                            IconButton(
                                onClick = {},
                                colors = IconButtonDefaults.iconButtonColors(contentColor = Color.White),
                                modifier = Modifier.indication(indication = null ,
                                    interactionSource = remember { MutableInteractionSource() })
                            ) {
                                Icon(imageVector = Icons.Default.Share, contentDescription = null)
                            }
                            Row(
                                modifier = Modifier.fillMaxWidth(),
                                horizontalArrangement = Arrangement.End,
                                verticalAlignment = Alignment.CenterVertically
                            ) {
                                Text("مقایسه دنباله دارها", fontSize = 20.sp, color = Color.White  , maxLines = 1 , fontWeight = FontWeight.ExtraBold)
                                IconButton(onClick = {expanded = true},
                                    modifier = Modifier.size(50.dp)
                                        .indication(indication = null ,
                                            interactionSource = remember { MutableInteractionSource() }),
                                    colors = IconButtonDefaults.iconButtonColors(contentColor = Color.White)) {
                                    Icon(imageVector = Icons.Default.Menu, contentDescription = null)
                                }
                            }
                        }
                    }
                }
                var textMoghayeseDonbaledarha = listOf(
                    ": معرفی کلی\n" +
                            "\n" +
                            "دنباله‌دارها اگرچه همگی اجرامی یخی و غبارآلود هستند اما از نظر ساختار مدار منشأ و تأثیراتشان بر منظومهٔ شمسی بسیار متنوع‌اند. " +
                            "مقایسهٔ دنباله‌دارها به دانشمندان کمک می‌کند تا درک عمیق‌تری از شکل‌گیری و تحول منظومهٔ شمسی به دست آورند. " +
                            "این مقایسه‌ها بر پایهٔ دسته‌بندی‌های مداری (کوتاه‌مدت و بلندمدت)، منشأ (ابر اورت و کمربند کویپر) فعالیت سطحی ترکیب شیمیایی و حتی نقش در فرهنگ و تاریخ بشر صورت می‌گیرد. " +
                            "از این رهگذر هر دنباله‌دار می‌تواند به‌عنوان یک نمونهٔ آزمایشگاهی طبیعی از شرایط اولیهٔ منظومهٔ شمسی تلقی شود\u202b." +
                            "\n" +
                            "\n" +
                            "\n" +
                            ": چارچوب‌های رده‌بندی و دسته‌بندی\n" +
                            "\n" +
                            "بر اساس دورهٔ تناوب مداری: کوتاه‌مدت (کمتر از ۲۰۰ سال) مانند هالی و ۶۷پی؛ بلندمدت (بیش از ۲۰۰ سال) مانند هیل-باپ. " +
                            "بر اساس منشأ: دنباله‌دارهای منشأ گرفته از کمربند کویپر (اغلب کوتاه‌مدت) و دنباله‌دارهای منشأ گرفته از ابر اورت (اغلب بلندمدت). " +
                            "بر اساس فعالیت: دنباله‌دارهای فعال با گیسو و دنبالهٔ پرنور در مقابل دنباله‌دارهای خاموش یا مرده که لایهٔ سطحی آن‌ها پوشیده از غبار شده است. " +
                            "بر اساس ترکیب: تفاوت نسبت‌های آب، یخ کربن‌دی‌اکسید کربن‌مونوکسید متان و مواد آلی پیچیده. " +
                            "بر اساس مقیاس رصدی: برخی دنباله‌دارها تنها با تلسکوپ قابل مشاهده‌اند در حالی که برخی دیگر در آسمان شب با چشم غیرمسلح به‌وضوح دیده می‌شوند\u202b." +
                            "\n" +
                            "\n" +
                            "\n" +
                            ": اصول و مبانی نظری کلیدی\n" +
                            "\n" +
                            "دنباله‌دارهای کوتاه‌مدت به دلیل مدار پایدارتر و نزدیک‌تر به خورشید، بیشتر مورد مطالعهٔ مستقیم قرار گرفته‌اند. " +
                            "دنباله‌دارهای بلندمدت معمولاً از نواحی دوردست می‌آیند و اطلاعاتی دربارهٔ بخش‌های کمتر شناخته‌شدهٔ منظومهٔ شمسی ارائه می‌دهند. " +
                            "فعالیت سطحی و درخشندگی دنباله‌دارها بستگی به ترکیب شیمیایی و نزدیکی به خورشید دارد. " +
                            "برخی دنباله‌دارها چندین بار درخشان می‌شوند در حالی که برخی پس از یک یا دو گذر لایهٔ یخی‌شان تحلیل می‌رود و به اجرام خاموش تبدیل می‌شوند. " +
                            "مدل‌های دینامیکی نشان می‌دهد که تفاوت در منشأ (ابر اورت در مقابل کویپر) دلیل اصلی تفاوت‌های مداری و زمانی دنباله‌دارهاست\u202b." +
                            "\n" +
                            "\n" +
                            "\n" +
                            ": کاربردها و پیش‌بینی‌ها\n" +
                            "\n" +
                            "مقایسهٔ ترکیبات شیمیایی برای بررسی منشأ احتمالی آب و مواد آلی زمین. " +
                            "پیش‌ بینی رفتار مداری برای تشخیص احتمال برخورد با سیارات یا زمین. " +
                            "استفاده از داده‌های مأموریت‌های فضایی مانند روزتا برای شناخت بهتر تفاوت‌ها میان دنباله‌دارهای گوناگون. " +
                            "تحلیل تفاوت‌ها در طول عمر فعال برای درک چرخهٔ تکاملی دنباله‌دارها. " +
                            "ارزیابی نقش دنباله‌دارها در ایجاد بارش‌های شهابی مختلف بسته به منشأ و مدارشان\u202b." +
                            "\n" +
                            "\n" +
                            "\n" +
                            ": نقش در علم و فناوری\n" +
                            "\n" +
                            "ایجاد چارچوب مقایسه‌ای برای توسعهٔ مدل‌های تحول منظومهٔ شمسی. " +
                            "کمک به طراحی مأموریت‌های کاوش فضایی با تمرکز بر انواع مختلف دنباله‌دارها. " +
                            "الهام برای فناوری‌های تحلیل داده و یادگیری ماشین برای دسته‌بندی خودکار دنباله‌دارها. " +
                            "فراهم کردن آزمایشگاه طبیعی برای بررسی فیزیک یخ‌ها تبخیر و دینامیک گازها در شرایط فضایی. " +
                            "تأثیرگذاری بر علوم میان‌رشته‌ای شامل شیمی آلی زیست‌شناسی فضایی و سیاره‌شناسی\u202b." +
                            "\n" +
                            "\n" +
                            "\n" +
                            ": بخش نظری برجسته\n" +
                            "\n" +
                            "دنباله‌دار هالی: نمونهٔ برجستهٔ کوتاه‌مدت که مدار آن دقیقاً محاسبه و ثبت شده است. " +
                            "دنباله‌دار هیل باپ: یکی از پرنورترین دنباله‌دارهای بلندمدت قرن بیستم که مقایسهٔ آن با هالی نشان‌دهندهٔ تفاوت در منشأ و ترکیب است. " +
                            "دنباله‌دار ۶۷پی چوریموف گراسیمنکو: هدف مأموریت روزتا که اطلاعات دقیقی از ترکیب و ساختار آن فراهم کرد. " +
                            "دنباله‌دار آیسون: که در سال ۲۰۱۳ نابود شد و نشان داد برخی دنباله‌دارها در نخستین گذر نزدیک به خورشید از بین می‌روند. " +
                            "دنباله‌دار میان‌ستاره‌ای ۲ای بوریسوف: نمونه‌ای نادر که نشان می‌دهد مقایسه‌ها باید فراتر از منظومهٔ شمسی نیز گسترش یابد\u202b."
                )
                val textmortabet = listOf("دنباله دار کوتاه دوره", "دنباله دار بلند دوره", "دنباله دار تک گذر", "ساختار دنباله دارها", "منشأ دنباله دارها", "دنباله دار معروف" , "دنباله دار میانی", "چرخه دنباله دار" , "تأثیر دنباله دار")
                val imagemortabet = listOf(
                    painterResource(R.drawable.cometkotahdore),
                    painterResource(R.drawable.cometbolanddore),
                    painterResource(R.drawable.cometzodgozar),
                    painterResource(R.drawable.cometsakhtar),
                    painterResource(R.drawable.cometmanshae),
                    painterResource(R.drawable.cometfamus),
                    painterResource(R.drawable.comemiansetaree),
                    painterResource(R.drawable.comecharkhehayat),
                    painterResource(R.drawable.cometaethirbarzamin),
                )
                val tarkib = textmortabet.zip(imagemortabet)
                Column(
                    modifier = Modifier
                        .padding(25.dp)
                        .fillMaxSize()
                ) {
                    Box(modifier = Modifier.fillMaxSize())

                    {
                        LazyColumn(
                            horizontalAlignment = Alignment.CenterHorizontally
                        ) {
                            items(textMoghayeseDonbaledarha) { letter ->
                                Column(modifier = Modifier.padding(30.dp)) {
                                    Row {
                                        Image(painter = painterResource(id = R.drawable.cometmoghayese)
                                            , contentDescription = null , contentScale = ContentScale.Crop
                                            , modifier = Modifier.size(100.dp))
                                        Column {
                                            Text("")
                                            Row(modifier = Modifier.fillMaxWidth()
                                                ,horizontalArrangement = Arrangement.End
                                                , verticalAlignment = Alignment.CenterVertically) {
                                                Text("مقایسه دنباله دارها" , fontSize = 20.sp  , color = Color.White , style = TextStyle(
                                                    shadow = Shadow(
                                                        color = Color(0xFFFFFFFF),
                                                        offset = Offset(0f ,0f)
                                                        , blurRadius = 20f
                                                    )
                                                ), maxLines = 1)
                                            }
                                        }
                                    }
                                }
                                Box(
                                    modifier = Modifier.fillMaxSize(),
                                    contentAlignment = Alignment.CenterStart,
                                ) {
                                    Column {
                                        Text(
                                            "$letter",
                                            fontSize = 20.sp,
                                            color = Color(0xFFFFFFFF),
                                            lineHeight = 32.sp,
                                            textAlign = TextAlign.Right
                                            , style = TextStyle(
                                                shadow = Shadow(
                                                    color = Color(0xFFFFFFFF),
                                                    offset = Offset(0f ,0f)
                                                    , blurRadius = 20f
                                                )
                                            )
                                        )
                                        Text("")
                                        Text("")
                                        Text("")
                                        Text(
                                            "موضوعات مرتبط",
                                            textAlign = TextAlign.Right,
                                            modifier = Modifier.fillMaxWidth(),
                                            fontSize = 30.sp,
                                            color = Color.White
                                            , style = TextStyle(
                                                shadow = Shadow(
                                                    color = Color(0xFFFFFFFF),
                                                    offset = Offset(0f ,0f)
                                                    , blurRadius = 20f
                                                )
                                            )
                                        )
                                        Text("")
                                        LazyRow(reverseLayout = true) {
                                            items(tarkib) { (matnha, aksha) ->
                                                Card(
                                                    modifier = Modifier
                                                        .width(250.dp)
                                                        .height(120.dp)
                                                        .padding(20.dp)
                                                        .clip(shape = RoundedCornerShape(100.dp)),
                                                    shape = RectangleShape,
                                                    colors = CardDefaults.cardColors(
                                                        containerColor = Color(
                                                            0xFF0707AD
                                                        )
                                                    )
                                                ) {
                                                    Box(
                                                        modifier = Modifier.fillMaxSize(),
                                                        contentAlignment = Alignment.CenterEnd
                                                    ) {
                                                        Image(
                                                            painter = painterResource(id = R.drawable.card),
                                                            contentScale = ContentScale.Crop,
                                                            contentDescription = null,
                                                            modifier = Modifier.fillMaxSize()
                                                        )
                                                        Button(
                                                            modifier = Modifier.fillMaxSize(
                                                            ).indication(indication = null ,
                                                                interactionSource = remember { MutableInteractionSource() }), onClick = {
                                                                if (matnha == "دنباله دار کوتاه دوره") {
                                                                    backap = false
                                                                    currentScreen = "comekotah"
                                                                }
                                                                if (matnha == "دنباله دار بلند دوره") {
                                                                    currentScreen = "comeboland"
                                                                    backap = false
                                                                }
                                                                if (matnha == "دنباله دار تک گذر") {
                                                                    backap = false
                                                                    currentScreen = "cometakgozar"
                                                                }
                                                                if (matnha == "ساختار دنباله دارها") {
                                                                    currentScreen = "comesakhtar"
                                                                    backap = false
                                                                }
                                                                if (matnha == "منشأ دنباله دارها") {
                                                                    backap = false
                                                                    currentScreen = "comemanshae"
                                                                }
                                                                if (matnha == "دنباله دار معروف") {
                                                                    backap = false
                                                                    currentScreen = "comefamus"
                                                                }
                                                                if (matnha == "دنباله دار میانی") {
                                                                    backap = false
                                                                    currentScreen = "comemiani"
                                                                }
                                                                if (matnha == "چرخه دنباله دار") {
                                                                    backap = false
                                                                    currentScreen = "comecharkhe"
                                                                }
                                                                if (matnha == "تأثیر دنباله دار") {
                                                                    backap = false
                                                                    currentScreen = "cometaethir"
                                                                }
                                                                if (matnha == "مقایسه دنباله دارها") {
                                                                    backap = false
                                                                    currentScreen = "comemoghayese"
                                                                }
                                                            }, colors = ButtonDefaults.buttonColors(
                                                                contentColor = Color.Transparent,
                                                                containerColor = Color.Transparent
                                                            )) {
                                                        }
                                                        Row() {
                                                            Spacer(modifier = Modifier.width(10.dp))
                                                            Column {
                                                                Spacer(modifier = Modifier.height(9.dp))
                                                                Text(
                                                                    "$matnha",
                                                                    color = Color.White,
                                                                    fontSize = 20.sp
                                                                    , style = TextStyle(
                                                                        shadow = Shadow(
                                                                            color = Color(0xFFFFFFFF),
                                                                            offset = Offset(0f ,0f)
                                                                            , blurRadius = 20f
                                                                        )
                                                                    )
                                                                )
                                                            }
                                                            Spacer(modifier = Modifier.width(15.dp))
                                                            Image(
                                                                painter = aksha,
                                                                contentDescription = null,
                                                                contentScale = ContentScale.Crop,
                                                                modifier = Modifier.size(50.dp)
                                                            )
                                                            Spacer(modifier = Modifier.width(15.dp))
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        Text("")
                                        Text("")
                                        Text("")
                                    }
                                }
                            }
                        }
                        var count by remember { mutableStateOf(0) }
                        IconButton(
                            onClick = { count++ },
                            modifier = Modifier
                                .size(70.dp)
                                .align(Alignment.BottomEnd)
                                .indication(indication = null ,
                                    interactionSource = remember { MutableInteractionSource() }),
                            colors = IconButtonDefaults.iconButtonColors(
                                containerColor = Color(0xFF030A33)
                            )
                        ) {
                            if (count % 2 == 0) {
                                Icon(
                                    imageVector = Icons.Default.Favorite,
                                    contentDescription = null,
                                    modifier = Modifier.size(50.dp),
                                    tint = Color.Transparent
                                )
                                Icon(
                                    imageVector = Icons.Default.FavoriteBorder,
                                    contentDescription = null,
                                    modifier = Modifier.size(50.dp),
                                    tint = Color.White
                                )
                            }
                            if (count % 2 == 1) {
                                Icon(
                                    imageVector = Icons.Default.Favorite,
                                    contentDescription = null,
                                    modifier = Modifier.size(50.dp),
                                    tint = Color.White
                                )
                                Icon(
                                    imageVector = Icons.Default.FavoriteBorder,
                                    contentDescription = null,
                                    modifier = Modifier.size(50.dp),
                                    tint = Color.White
                                )
                            }
                        }
                    }
                }
            }
        }
    }
}
@Preview(showBackground = true)
@Composable
fun GreetingPreview() {
    SecandScreen()
}